CCS PCH C Compiler, Version 4.110, 5967               25-џэт-16 00:15

               Filename: C:\Projects\MWT-3\TM3Firmware\tm3.lst

               ROM used: 14382 bytes (45%)
                         Largest free fragment is 17550
               RAM used: 848 (56%) at main() level
                         876 (57%) worst case
               Stack:    7 worst case (3 in main + 4 for interrupts)

*
0000:  GOTO   2F72
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  FF5,15
003C:  MOVFF  FF6,16
0040:  MOVFF  FF7,17
0044:  MOVFF  00,0E
0048:  MOVFF  01,0F
004C:  MOVFF  02,10
0050:  MOVFF  03,11
0054:  BTFSS  F9D.0
0056:  GOTO   0060
005A:  BTFSC  F9E.0
005C:  GOTO   2242
0060:  BTFSS  F9D.5
0062:  GOTO   006C
0066:  BTFSC  F9E.5
0068:  GOTO   0B7E
006C:  MOVFF  0E,00
0070:  MOVFF  0F,01
0074:  MOVFF  10,02
0078:  MOVFF  11,03
007C:  MOVFF  0C,FE9
0080:  MOVFF  07,FEA
0084:  BSF    07.7
0086:  MOVFF  08,FE1
008A:  MOVFF  09,FE2
008E:  MOVFF  0A,FD9
0092:  MOVFF  0B,FDA
0096:  MOVFF  12,FF3
009A:  MOVFF  13,FF4
009E:  MOVFF  14,FFA
00A2:  MOVFF  15,FF5
00A6:  MOVFF  16,FF6
00AA:  MOVFF  17,FF7
00AE:  MOVF   04,W
00B0:  MOVFF  06,FE0
00B4:  MOVFF  05,FD8
00B8:  RETFIE 0
.................... //modified 5.12.2010 
.................... //add LCD get status timeout - if LCD not responce - then ignore it and continue main execution 
.................... //function WaitStatusLCD 
....................  
.................... #include "tm3.h" 
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device ICD=TRUE 
.................... #device adc=10 
.................... #FUSES WDT                      //Watch Dog Timer  
.................... #FUSES WDT1                     //Watch Dog Timer uses 1:1 Postscale 
.................... #FUSES INTRC_IO                 //Internal RC Osc, no CLKOUT 
.................... #FUSES NOPROTECT                //Code not protected from reading 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES BORV20                   //Brownout reset at 2.7V 
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES STVREN                   //Stack full/underflow will cause reset 
.................... #FUSES NODEBUG                  //No Debug mode for ICD 
.................... #FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOWRTD                   //Data EEPROM not write protected 
.................... #FUSES IESO                     //Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                    //Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                   //PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                   //configuration not registers write protected 
.................... #FUSES NOWRTB                   //Boot block not write protected 
.................... #FUSES NOEBTR                   //Memory not protected from table reads 
.................... #FUSES NOEBTRB                  //Boot block not protected from table reads 
.................... #FUSES NOCPB                    //No Boot Block code protection 
.................... #FUSES LPT1OSC                  //Timer1 configured for low-power operation 
.................... #FUSES NOMCLR                   //Master Clear pin enabled 
.................... #FUSES XINST                    //Extended set extension and Indexed Addressing mode enabled 
....................  
.................... #use delay(clock=32000000,RESTART_WDT) 
*
21EE:  MOVLW  03
21F0:  MOVWF  FEA
21F2:  MOVLW  5F
21F4:  MOVWF  FE9
21F6:  MOVF   FEF,W
21F8:  BZ    221C
21FA:  MOVLW  0A
21FC:  MOVWF  01
21FE:  MOVLW  BF
2200:  MOVWF  00
2202:  CLRWDT
2204:  DECFSZ 00,F
2206:  BRA    2202
2208:  DECFSZ 01,F
220A:  BRA    21FE
220C:  MOVLW  5E
220E:  MOVWF  00
2210:  DECFSZ 00,F
2212:  BRA    2210
2214:  BRA    2216
2216:  CLRWDT
2218:  DECFSZ FEF,F
221A:  BRA    21FA
221C:  GOTO   287E (RETURN)
.................... #define	_WR		PIN_A0 
.................... #define	_RD		PIN_A1 
.................... #define	_CE		PIN_A2 
.................... #define	C_D		PIN_A3 
.................... #define	DAC0	PIN_A4 
.................... #define	DAC1	PIN_A5 
.................... #define	POT0	PIN_A6 
.................... #define	POT1	PIN_A7 
....................  
.................... #define	KB_A	PIN_B0 
.................... #define	KB_B	PIN_B1 
.................... #define	KB_C	PIN_B2 
.................... #define	KB_D	PIN_B3 
.................... #define	KB_1	PIN_B4 
.................... #define	KB_2	PIN_B5 
.................... #define	KB_3	PIN_B6 
.................... #define	KB_4	PIN_B7 
....................  
.................... #define	OUT2	PIN_C0 
.................... #define	STAT	PIN_C1 
.................... #define	TR_DIR	PIN_C2 
.................... #define	SCK		PIN_C3 
.................... #define	SDI		PIN_C4 
.................... #define	SDO		PIN_C5 
.................... #define	TX		PIN_C6 
.................... #define	RX		PIN_C7 
....................  
.................... #define	OUT0	PIN_E0 
.................... #define	OUT1	PIN_E1 
.................... #define	LCD_BL	PIN_E2 
....................  
.................... #bit	TMR0IF=0xff2.2 
....................  
.................... #include <stdlib.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... char s[15]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... #include "ee_var.h" 
.................... //TM-3 EEPROM storage structure 
.................... //define adresses of EEPROM locations 
.................... /*		LocName		Addr	Discr			*/ 
.................... /*==========================================*/ 
.................... #define	EE_Speed	0x00	//serial device speed 
.................... #define	EE_Host		0x02	//host address & serial number	<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<!!! Device ID!!! 
.................... #define	EE_POT0		0x04	//output range 0 
.................... #define	EE_POT1		0x06	//output range 1 
....................  
.................... //EEPROM data definition 
.................... #ROM	0xf00000={0x4B00,	//EE_Speed 
.................... 				  0x0002,	//EE_Host				   
.................... 				  0x003C,	//EE_POT0 
.................... 				  0x0044	//EE_POT1 
.................... } 
.................... // 
....................  
.................... #include "font_6x8r.h" 
.................... /**********************************************/ 
.................... /*                                            */ 
.................... /*     Font file generated by fontconv.c      */ 
.................... /*     Alexander Frink, Juli 1999             */ 
.................... /*     Font captured from Windows NT 4.0      */ 
.................... /*                                            */ 
.................... /**********************************************/ 
....................  
.................... #define FONTDATAMAX 2048 
....................  
.................... //char fontname_6x8[] = "VGA6x8"; 
....................  
.................... int  fontheight_6x8 = 8; 
.................... int  fontwidth_6x8  = 6; 
....................  
.................... const char fontdata_6x8[FONTDATAMAX]= { 
....................  
....................     /* 0 0x00 '     
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 1 0x01 '' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .**.** */ 0x1b, 
....................     /* .*...* */ 0x11, 
....................     /* .*.*.* */ 0x15, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 2 0x02 '' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .***** */ 0x1f, 
....................     /* .*.*.* */ 0x15, 
....................     /* .***** */ 0x1f, 
....................     /* .*...* */ 0x11, 
....................     /* .***** */ 0x1f, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 3 0x03 '' */ 
....................     /* ...... */ 0x00, 
....................     /* ..*.*. */ 0x0a, 
....................     /* .***** */ 0x1f, 
....................     /* .***** */ 0x1f, 
....................     /* .***** */ 0x1f, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 4 0x04 '' */ 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* .***** */ 0x1f, 
....................     /* .***** */ 0x1f, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 5 0x05 '' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* .***** */ 0x1f, 
....................     /* .***** */ 0x1f, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 6 0x06 '' */ 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* .***** */ 0x1f, 
....................     /* .***** */ 0x1f, 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 7 0x07 '' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..**.. */ 0x0c, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 8 0x08 '' */ 
....................     /* ****** */ 0x3f, 
....................     /* ****** */ 0x3f, 
....................     /* ****** */ 0x3f, 
....................     /* **..** */ 0x33, 
....................     /* **..** */ 0x33, 
....................     /* ****** */ 0x3f, 
....................     /* ****** */ 0x3f, 
....................     /* ****** */ 0x3f, 
....................  
....................     /* 9 0x09 '	' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .****. */ 0x1e, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .****. */ 0x1e, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 10 0x0a ' ' */ 
....................     /* ****** */ 0x3f, 
....................     /* ****** */ 0x3f, 
....................     /* *....* */ 0x21, 
....................     /* *.**.* */ 0x2d, 
....................     /* *.**.* */ 0x2d, 
....................     /* *....* */ 0x21, 
....................     /* ****** */ 0x3f, 
....................     /* ****** */ 0x3f, 
....................  
....................     /* 11 0x0b '' */ 
....................     /* ...... */ 0x00, 
....................     /* ...*** */ 0x07, 
....................     /* ....** */ 0x03, 
....................     /* ..**.* */ 0x0d, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 12 0x0c '' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 13 0x0d '' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ...**. */ 0x06, 
....................     /* ...*.* */ 0x05, 
....................     /* ...*.. */ 0x04, 
....................     /* ..**.. */ 0x0c, 
....................     /* .***.. */ 0x1c, 
....................     /* .**... */ 0x18, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 14 0x0e '' */ 
....................     /* ....** */ 0x03, 
....................     /* ..**.* */ 0x0d, 
....................     /* ..*.** */ 0x0b, 
....................     /* ..**.* */ 0x0d, 
....................     /* ..*.** */ 0x0b, 
....................     /* .**.** */ 0x1b, 
....................     /* .**... */ 0x18, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 15 0x0f '' */ 
....................     /* ...... */ 0x00, 
....................     /* .*.*.* */ 0x15, 
....................     /* ..***. */ 0x0e, 
....................     /* .**.** */ 0x1b, 
....................     /* ..***. */ 0x0e, 
....................     /* .*.*.* */ 0x15, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 16 0x10 '' */ 
....................     /* ..*... */ 0x08, 
....................     /* ..**.. */ 0x0c, 
....................     /* ..***. */ 0x0e, 
....................     /* ..**** */ 0x0f, 
....................     /* ..***. */ 0x0e, 
....................     /* ..**.. */ 0x0c, 
....................     /* ..*... */ 0x08, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 17 0x11 '' */ 
....................     /* ....*. */ 0x02, 
....................     /* ...**. */ 0x06, 
....................     /* ..***. */ 0x0e, 
....................     /* .****. */ 0x1e, 
....................     /* ..***. */ 0x0e, 
....................     /* ...**. */ 0x06, 
....................     /* ....*. */ 0x02, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 18 0x12 '' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* .***** */ 0x1f, 
....................     /* ...*.. */ 0x04, 
....................     /* .***** */ 0x1f, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 19 0x13 '' */ 
....................     /* ..*.*. */ 0x0a, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 20 0x14 '' */ 
....................     /* ..**** */ 0x0f, 
....................     /* .*.*.* */ 0x15, 
....................     /* .*.*.* */ 0x15, 
....................     /* ..**.* */ 0x0d, 
....................     /* ...*.* */ 0x05, 
....................     /* ...*.* */ 0x05, 
....................     /* ...*.* */ 0x05, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 21 0x15 '' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* ..**.. */ 0x0c, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...**. */ 0x06, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 22 0x16 '' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .****. */ 0x1e, 
....................     /* .****. */ 0x1e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 23 0x17 '' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* .***** */ 0x1f, 
....................     /* ...*.. */ 0x04, 
....................     /* .***** */ 0x1f, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................  
....................     /* 24 0x18 '' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* .***** */ 0x1f, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 25 0x19 '' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* .***** */ 0x1f, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 26 0x1a '' */ 
....................      
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ...**. */ 0x06, 
....................     /* .***** */ 0x1f, 
....................     /* ...**. */ 0x06, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 27 0x1b '' */ 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ..**.. */ 0x0c, 
....................     /* .***** */ 0x1f, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 28 0x1c '' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .***** */ 0x1f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 29 0x1d '' */ 
....................     /* ...... */ 0x00, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ..*.*. */ 0x0a, 
....................     /* .***** */ 0x1f, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 30 0x1e '' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* ..***. */ 0x0e, 
....................     /* .***** */ 0x1f, 
....................     /* .***** */ 0x1f, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 31 0x1f '' */ 
....................     /* .***** */ 0x1f, 
....................     /* .***** */ 0x1f, 
....................     /* ..***. */ 0x0e, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 32 0x20 ' ' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 33 0x21 '!' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 34 0x22 '"' */ 
....................     /* .**.** */ 0x1b, 
....................     /* .**.** */ 0x1b, 
....................     /* .*..*. */ 0x12, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 35 0x23 '#' */ 
....................     /* ...... */ 0x00, 
....................     /* ..*.*. */ 0x0a, 
....................     /* .***** */ 0x1f, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ..*.*. */ 0x0a, 
....................     /* .***** */ 0x1f, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 36 0x24 '$' */ 
....................     /* ..*... */ 0x08, 
....................     /* ..***. */ 0x0e, 
....................     /* .*.... */ 0x10, 
....................     /* ..**.. */ 0x0c, 
....................     /* ....*. */ 0x02, 
....................     /* .***.. */ 0x1c, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 37 0x25 '%' */ 
....................     /* .**..* */ 0x19, 
....................     /* .**..* */ 0x19, 
....................     /* ....*. */ 0x02, 
....................     /* ...*.. */ 0x04, 
....................     /* ..*... */ 0x08, 
....................     /* .*..** */ 0x13, 
....................     /* .*..** */ 0x13, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 38 0x26 '&' */ 
....................     /* ..*... */ 0x08, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* ..*... */ 0x08, 
....................     /* .*.*.* */ 0x15, 
....................     /* .*..*. */ 0x12, 
....................     /* ..**.* */ 0x0d, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 39 0x27 ''' */ 
....................     /* ..**.. */ 0x0c, 
....................     /* ..**.. */ 0x0c, 
....................     /* ..*... */ 0x08, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 40 0x28 '(' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 41 0x29 ')' */ 
....................     /* ..*... */ 0x08, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ..*... */ 0x08, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 42 0x2a '*' */ 
....................     /* ...... */ 0x00, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ..***. */ 0x0e, 
....................     /* .***** */ 0x1f, 
....................     /* ..***. */ 0x0e, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 43 0x2b '+' */ 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* .***** */ 0x1f, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 44 0x2c ',' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..**.. */ 0x0c, 
....................     /* ..**.. */ 0x0c, 
....................     /* ..*... */ 0x08, 
....................  
....................     /* 45 0x2d '-' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .***** */ 0x1f, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 46 0x2e '.' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..**.. */ 0x0c, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 47 0x2f '/' */ 
....................     /* ...... */ 0x00, 
....................     /* .....* */ 0x01, 
....................     /* ....*. */ 0x02, 
....................     /* ...*.. */ 0x04, 
....................     /* ..*... */ 0x08, 
....................     /* .*.... */ 0x10, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 48 0x30 '0' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*..** */ 0x13, 
....................     /* .*.*.* */ 0x15, 
....................     /* .**..* */ 0x19, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 49 0x31 '1' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 50 0x32 '2' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .....* */ 0x01, 
....................     /* ...**. */ 0x06, 
....................     /* ..*... */ 0x08, 
....................     /* .*.... */ 0x10, 
....................     /* .***** */ 0x1f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 51 0x33 '3' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .....* */ 0x01, 
....................     /* ..***. */ 0x0e, 
....................     /* .....* */ 0x01, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 52 0x34 '4' */ 
....................     /* ....*. */ 0x02, 
....................     /* ...**. */ 0x06, 
....................     /* ..*.*. */ 0x0a, 
....................     /* .*..*. */ 0x12, 
....................     /* .***** */ 0x1f, 
....................     /* ....*. */ 0x02, 
....................     /* ....*. */ 0x02, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 53 0x35 '5' */ 
....................     /* .***** */ 0x1f, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .****. */ 0x1e, 
....................     /* .....* */ 0x01, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 54 0x36 '6' */ 
....................     /* ...**. */ 0x06, 
....................     /* ..*... */ 0x08, 
....................     /* .*.... */ 0x10, 
....................     /* .****. */ 0x1e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 55 0x37 '7' */ 
....................     /* .***** */ 0x1f, 
....................     /* .....* */ 0x01, 
....................     /* ....*. */ 0x02, 
....................     /* ...*.. */ 0x04, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 56 0x38 '8' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 57 0x39 '9' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..**** */ 0x0f, 
....................     /* .....* */ 0x01, 
....................     /* ....*. */ 0x02, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 58 0x3a ':' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..**.. */ 0x0c, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................     /* ..**.. */ 0x0c, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 59 0x3b ';' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..**.. */ 0x0c, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................     /* ..**.. */ 0x0c, 
....................     /* ..**.. */ 0x0c, 
....................     /* ..*... */ 0x08, 
....................  
....................     /* 60 0x3c '<' */ 
....................     /* ....*. */ 0x02, 
....................     /* ...*.. */ 0x04, 
....................     /* ..*... */ 0x08, 
....................     /* .*.... */ 0x10, 
....................     /* ..*... */ 0x08, 
....................     /* ...*.. */ 0x04, 
....................     /* ....*. */ 0x02, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 61 0x3d '=' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .***** */ 0x1f, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .***** */ 0x1f, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 62 0x3e '>' */ 
....................     /* ..*... */ 0x08, 
....................     /* ...*.. */ 0x04, 
....................     /* ....*. */ 0x02, 
....................     /* .....* */ 0x01, 
....................     /* ....*. */ 0x02, 
....................     /* ...*.. */ 0x04, 
....................     /* ..*... */ 0x08, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 63 0x3f '?' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .....* */ 0x01, 
....................     /* ...**. */ 0x06, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 64 0x40 '@' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*.*** */ 0x17, 
....................     /* .*.*.* */ 0x15, 
....................     /* .*.*** */ 0x17, 
....................     /* .*.... */ 0x10, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 65 0x41 'A' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .***** */ 0x1f, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 66 0x42 'B' */ 
....................     /* .****. */ 0x1e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .****. */ 0x1e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .****. */ 0x1e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 67 0x43 'C' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 68 0x44 'D' */ 
....................     /* .****. */ 0x1e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .****. */ 0x1e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 69 0x45 'E' */ 
....................     /* .***** */ 0x1f, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .****. */ 0x1e, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .***** */ 0x1f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 70 0x46 'F' */ 
....................     /* .***** */ 0x1f, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .****. */ 0x1e, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 71 0x47 'G' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*.... */ 0x10, 
....................     /* .*.*** */ 0x17, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..**** */ 0x0f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 72 0x48 'H' */ 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .***** */ 0x1f, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 73 0x49 'I' */ 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 74 0x4a 'J' */ 
....................     /* .....* */ 0x01, 
....................     /* .....* */ 0x01, 
....................     /* .....* */ 0x01, 
....................     /* .....* */ 0x01, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 75 0x4b 'K' */ 
....................     /* .*...* */ 0x11, 
....................     /* .*..*. */ 0x12, 
....................     /* .*.*.. */ 0x14, 
....................     /* .**... */ 0x18, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*..*. */ 0x12, 
....................     /* .*...* */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 76 0x4c 'L' */ 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .***** */ 0x1f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 77 0x4d 'M' */ 
....................     /* .*...* */ 0x11, 
....................     /* .**.** */ 0x1b, 
....................     /* .*.*.* */ 0x15, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 78 0x4e 'N' */ 
....................     /* .*...* */ 0x11, 
....................     /* .**..* */ 0x19, 
....................     /* .*.*.* */ 0x15, 
....................     /* .*..** */ 0x13, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 79 0x4f 'O' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 80 0x50 'P' */ 
....................     /* .****. */ 0x1e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .****. */ 0x1e, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 81 0x51 'Q' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*.*.* */ 0x15, 
....................     /* .*..*. */ 0x12, 
....................     /* ..**.* */ 0x0d, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 82 0x52 'R' */ 
....................     /* .****. */ 0x1e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .****. */ 0x1e, 
....................     /* .*..*. */ 0x12, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 83 0x53 'S' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*.... */ 0x10, 
....................     /* ..***. */ 0x0e, 
....................     /* .....* */ 0x01, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 84 0x54 'T' */ 
....................     /* .***** */ 0x1f, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 85 0x55 'U' */ 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 86 0x56 'V' */ 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 87 0x57 'W' */ 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*.*.* */ 0x15, 
....................     /* .*.*.* */ 0x15, 
....................     /* .*.*.* */ 0x15, 
....................     /* .*.*.* */ 0x15, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 88 0x58 'X' */ 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...*.. */ 0x04, 
....................     /* ..*.*. */ 0x0a, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 89 0x59 'Y' */ 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 90 0x5a 'Z' */ 
....................     /* .****. */ 0x1e, 
....................     /* ....*. */ 0x02, 
....................     /* ...*.. */ 0x04, 
....................     /* ..*... */ 0x08, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .****. */ 0x1e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 91 0x5b '[' */ 
....................     /* ..***. */ 0x0e, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 92 0x5c '\' */ 
....................     /* ...... */ 0x00, 
....................     /* .*.... */ 0x10, 
....................     /* ..*... */ 0x08, 
....................     /* ...*.. */ 0x04, 
....................     /* ....*. */ 0x02, 
....................     /* .....* */ 0x01, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 93 0x5d ']' */ 
....................     /* ..***. */ 0x0e, 
....................     /* ....*. */ 0x02, 
....................     /* ....*. */ 0x02, 
....................     /* ....*. */ 0x02, 
....................     /* ....*. */ 0x02, 
....................     /* ....*. */ 0x02, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 94 0x5e '^' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ..*.*. */ 0x0a, 
....................     /* .*...* */ 0x11, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 95 0x5f '_' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ****** */ 0x3f, 
....................  
....................     /* 96 0x60 '`' */ 
....................     /* ..**.. */ 0x0c, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 97 0x61 'a' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .....* */ 0x01, 
....................     /* ..**** */ 0x0f, 
....................     /* .*...* */ 0x11, 
....................     /* ..**** */ 0x0f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 98 0x62 'b' */ 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .****. */ 0x1e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .****. */ 0x1e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 99 0x63 'c' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*.... */ 0x10, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 100 0x64 'd' */ 
....................     /* .....* */ 0x01, 
....................     /* .....* */ 0x01, 
....................     /* ..**** */ 0x0f, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..**** */ 0x0f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 101 0x65 'e' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .****. */ 0x1e, 
....................     /* .*.... */ 0x10, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 102 0x66 'f' */ 
....................     /* ...**. */ 0x06, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* .****. */ 0x1e, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 103 0x67 'g' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..**** */ 0x0f, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..**** */ 0x0f, 
....................     /* .....* */ 0x01, 
....................     /* ..***. */ 0x0e, 
....................  
....................     /* 104 0x68 'h' */ 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .***.. */ 0x1c, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 105 0x69 'i' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...**. */ 0x06, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 106 0x6a 'j' */ 
....................     /* ....*. */ 0x02, 
....................     /* ...... */ 0x00, 
....................     /* ...**. */ 0x06, 
....................     /* ....*. */ 0x02, 
....................     /* ....*. */ 0x02, 
....................     /* ....*. */ 0x02, 
....................     /* .*..*. */ 0x12, 
....................     /* ..**.. */ 0x0c, 
....................  
....................     /* 107 0x6b 'k' */ 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .*..*. */ 0x12, 
....................     /* .*.*.. */ 0x14, 
....................     /* .**... */ 0x18, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*..*. */ 0x12, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 108 0x6c 'l' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...**. */ 0x06, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 109 0x6d 'm' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .**.*. */ 0x1a, 
....................     /* .*.*.* */ 0x15, 
....................     /* .*.*.* */ 0x15, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 110 0x6e 'n' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .***.. */ 0x1c, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 111 0x6f 'o' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 112 0x70 'p' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .****. */ 0x1e, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .****. */ 0x1e, 
....................     /* .*.... */ 0x10, 
....................  
....................     /* 113 0x71 'q' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..**** */ 0x0f, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..**** */ 0x0f, 
....................     /* .....* */ 0x01, 
....................  
....................     /* 114 0x72 'r' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .*.**. */ 0x16, 
....................     /* ..*..* */ 0x09, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* .***.. */ 0x1c, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 115 0x73 's' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .*.... */ 0x10, 
....................     /* ..***. */ 0x0e, 
....................     /* .....* */ 0x01, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 116 0x74 't' */ 
....................     /* ...... */ 0x00, 
....................     /* ..*... */ 0x08, 
....................     /* .****. */ 0x1e, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 117 0x75 'u' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*.**. */ 0x16, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 118 0x76 'v' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 119 0x77 'w' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .*.*.* */ 0x15, 
....................     /* .***** */ 0x1f, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 120 0x78 'x' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ..**.. */ 0x0c, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 121 0x79 'y' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* .**... */ 0x18, 
....................  
....................     /* 122 0x7a 'z' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .****. */ 0x1e, 
....................     /* ....*. */ 0x02, 
....................     /* ..**.. */ 0x0c, 
....................     /* .*.... */ 0x10, 
....................     /* .****. */ 0x1e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 123 0x7b '{' */ 
....................     /* ...**. */ 0x06, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* .**... */ 0x18, 
....................     /* ..*... */ 0x08, 
....................     /* ..*... */ 0x08, 
....................     /* ...**. */ 0x06, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 124 0x7c '|' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 125 0x7d '}' */ 
....................     /* ..**.. */ 0x0c, 
....................     /* ....*. */ 0x02, 
....................     /* ....*. */ 0x02, 
....................     /* ....** */ 0x03, 
....................     /* ....*. */ 0x02, 
....................     /* ....*. */ 0x02, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 126 0x7e '~' */ 
....................     /* ..*.*. */ 0x0a, 
....................     /* .*.*.. */ 0x14, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 127 0x7f '' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* .**.** */ 0x1b, 
....................     /* .*...* */ 0x11, 
....................     /* .*...* */ 0x11, 
....................     /* .***** */ 0x1f, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 128 0x80 '' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ..**.. */ 0x0c, 
....................  
....................     /* 129 0x81 '' */ 
....................     /* .*..*. */ 0x12, 
....................     /* ...... */ 0x00, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*.**. */ 0x16, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 130 0x82 '' */ 
....................     /* ....** */ 0x03, 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .****. */ 0x1e, 
....................     /* .*.... */ 0x10, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 131 0x83 '' */ 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .....* */ 0x01, 
....................     /* ..**** */ 0x0f, 
....................     /* .*...* */ 0x11, 
....................     /* ..**** */ 0x0f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 132 0x84 '' */ 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .....* */ 0x01, 
....................     /* ..**** */ 0x0f, 
....................     /* .*...* */ 0x11, 
....................     /* ..**** */ 0x0f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 133 0x85 '' */ 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .....* */ 0x01, 
....................     /* ..**** */ 0x0f, 
....................     /* .*...* */ 0x11, 
....................     /* ..**** */ 0x0f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 134 0x86 '' */ 
....................     /* ..***. */ 0x0e, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ..***. */ 0x0e, 
....................     /* .....* */ 0x01, 
....................     /* ..**** */ 0x0f, 
....................     /* .*...* */ 0x11, 
....................     /* ..**** */ 0x0f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 135 0x87 '' */ 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .*.... */ 0x10, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ..**.. */ 0x0c, 
....................  
....................     /* 136 0x88 '' */ 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .****. */ 0x1e, 
....................     /* .*.... */ 0x10, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 137 0x89 '' */ 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .****. */ 0x1e, 
....................     /* .*.... */ 0x10, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 138 0x8a '' */ 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* .****. */ 0x1e, 
....................     /* .*.... */ 0x10, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 139 0x8b '' */ 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...**. */ 0x06, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 140 0x8c '' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...**. */ 0x06, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 141 0x8d '' */ 
....................     /* ..*... */ 0x08, 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...**. */ 0x06, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 142 0x8e '' */ 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ..*.*. */ 0x0a, 
....................     /* .*...* */ 0x11, 
....................     /* .***** */ 0x1f, 
....................     /* .*...* */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 143 0x8f '' */ 
....................     /* ..***. */ 0x0e, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ..***. */ 0x0e, 
....................     /* .**.** */ 0x1b, 
....................     /* .*...* */ 0x11, 
....................     /* .***** */ 0x1f, 
....................     /* .*...* */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 144 0x90 '' */ 
....................     /* ....** */ 0x03, 
....................     /* ...... */ 0x00, 
....................     /* .***** */ 0x1f, 
....................     /* .*.... */ 0x10, 
....................     /* .****. */ 0x1e, 
....................     /* .*.... */ 0x10, 
....................     /* .***** */ 0x1f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 145 0x91 '' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .****. */ 0x1e, 
....................     /* ...*.* */ 0x05, 
....................     /* .***** */ 0x1f, 
....................     /* .*.*.. */ 0x14, 
....................     /* ..**** */ 0x0f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 146 0x92 '' */ 
....................     /* ..**** */ 0x0f, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .***** */ 0x1f, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*** */ 0x17, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 147 0x93 '' */ 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................     /* ..**.. */ 0x0c, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 148 0x94 '' */ 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................     /* ..**.. */ 0x0c, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 149 0x95 '' */ 
....................     /* .**... */ 0x18, 
....................     /* ...... */ 0x00, 
....................     /* ..**.. */ 0x0c, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 150 0x96 '' */ 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*.**. */ 0x16, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 151 0x97 '' */ 
....................     /* .**... */ 0x18, 
....................     /* ...... */ 0x00, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*.**. */ 0x16, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 152 0x98 '' */ 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* .**... */ 0x18, 
....................  
....................     /* 153 0x99 '' */ 
....................     /* .*..*. */ 0x12, 
....................     /* ..**.. */ 0x0c, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 154 0x9a '' */ 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 155 0x9b '' */ 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 156 0x9c '' */ 
....................     /* ...**. */ 0x06, 
....................     /* ..*..* */ 0x09, 
....................     /* ..*... */ 0x08, 
....................     /* .****. */ 0x1e, 
....................     /* ..*... */ 0x08, 
....................     /* ..*..* */ 0x09, 
....................     /* .*.*** */ 0x17, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 157 0x9d '' */ 
....................     /* .*...* */ 0x11, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...*.. */ 0x04, 
....................     /* .***** */ 0x1f, 
....................     /* ...*.. */ 0x04, 
....................     /* .***** */ 0x1f, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 158 0x9e '' */ 
....................     /* .**... */ 0x18, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .**.*. */ 0x1a, 
....................     /* .*.*** */ 0x17, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 159 0x9f '' */ 
....................     /* ....*. */ 0x02, 
....................     /* ...*.* */ 0x05, 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* .*.*.. */ 0x14, 
....................     /* ..*... */ 0x08, 
....................  
....................     /* 160 0xa0 ' ' */ 
....................     /* ...**. */ 0x06, 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x0e, 
....................     /* .....* */ 0x01, 
....................     /* ..**** */ 0x0f, 
....................     /* .*...* */ 0x11, 
....................     /* ..**** */ 0x0f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 161 0xa1 'Ё' */ 
....................     /* ...**. */ 0x06, 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...**. */ 0x06, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 162 0xa2 'Ђ' */ 
....................     /* ...**. */ 0x06, 
....................     /* ...... */ 0x00, 
....................     /* ..**.. */ 0x0c, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 163 0xa3 'Ѓ' */ 
....................     /* ...**. */ 0x06, 
....................     /* ...... */ 0x00, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*.**. */ 0x16, 
....................     /* ..*.*. */ 0x0a, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 164 0xa4 'Є' */ 
....................     /* ..*.*. */ 0x0a, 
....................     /* .*.*.. */ 0x14, 
....................     /* ...... */ 0x00, 
....................     /* .***.. */ 0x1c, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 165 0xa5 'Ѕ' */ 
....................     /* ..*.*. */ 0x0a, 
....................     /* .*.*.. */ 0x14, 
....................     /* ...... */ 0x00, 
....................     /* .*..*. */ 0x12, 
....................     /* .**.*. */ 0x1a, 
....................     /* .*.**. */ 0x16, 
....................     /* .*..*. */ 0x12, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 166 0xa6 'І' */ 
....................     /* ..***. */ 0x0e, 
....................     /* .....* */ 0x01, 
....................     /* ..**** */ 0x0f, 
....................     /* .*...* */ 0x11, 
....................     /* ..**** */ 0x0f, 
....................     /* ...... */ 0x00, 
....................     /* ..**** */ 0x0f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 167 0xa7 'Ї' */ 
....................     /* ..**.. */ 0x0c, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* ..**.. */ 0x0c, 
....................     /* ...... */ 0x00, 
....................     /* .****. */ 0x1e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 168 0xa8 'Ј' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ..**.. */ 0x0c, 
....................     /* .*.... */ 0x10, 
....................     /* .*...* */ 0x11, 
....................     /* ..***. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 169 0xa9 'Љ' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .***** */ 0x1f, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* .*.... */ 0x10, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 170 0xaa 'Њ' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ****** */ 0x3f, 
....................     /* .....* */ 0x01, 
....................     /* .....* */ 0x01, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 171 0xab 'Ћ' */ 
....................     /* .*.... */ 0x10, 
....................     /* .*..*. */ 0x12, 
....................     /* .*.*.. */ 0x14, 
....................     /* ..***. */ 0x0e, 
....................     /* .*...* */ 0x11, 
....................     /* ....*. */ 0x02, 
....................     /* ...*** */ 0x07, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 172 0xac 'Ќ' */ 
....................     /* .*.... */ 0x10, 
....................     /* .*..*. */ 0x12, 
....................     /* .*.*.. */ 0x14, 
....................     /* ..*.** */ 0x0b, 
....................     /* .*.*.* */ 0x15, 
....................     /* ...*** */ 0x07, 
....................     /* .....* */ 0x01, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 173 0xad '­' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ..***. */ 0x0e, 
....................     /* ..***. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 174 0xae 'Ў' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..*..* */ 0x09, 
....................     /* .*..*. */ 0x12, 
....................     /* ..*..* */ 0x09, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 175 0xaf 'Џ' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .*..*. */ 0x12, 
....................     /* ..*..* */ 0x09, 
....................     /* .*..*. */ 0x12, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 176 0xb0 'А' */ 
....................     /* .*.*.* */ 0x15, 
....................     /* ...... */ 0x00, 
....................     /* *.*.*. */ 0x2a, 
....................     /* ...... */ 0x00, 
....................     /* .*.*.* */ 0x15, 
....................     /* ...... */ 0x00, 
....................     /* *.*.*. */ 0x2a, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 177 0xb1 'Б' */ 
....................     /* .*.*.* */ 0x15, 
....................     /* *.*.*. */ 0x2a, 
....................     /* .*.*.* */ 0x15, 
....................     /* *.*.*. */ 0x2a, 
....................     /* .*.*.* */ 0x15, 
....................     /* *.*.*. */ 0x2a, 
....................     /* .*.*.* */ 0x15, 
....................     /* *.*.*. */ 0x2a, 
....................  
....................     /* 178 0xb2 'В' */ 
....................     /* *.*.*. */ 0x2a, 
....................     /* ****** */ 0x3f, 
....................     /* .*.*.* */ 0x15, 
....................     /* ****** */ 0x3f, 
....................     /* *.*.*. */ 0x2a, 
....................     /* ****** */ 0x3f, 
....................     /* .*.*.* */ 0x15, 
....................     /* ****** */ 0x3f, 
....................  
....................     /* 179 0xb3 'Г' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................  
....................     /* 180 0xb4 'Д' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ****.. */ 0x3c, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................  
....................     /* 181 0xb5 'Е' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ****.. */ 0x3c, 
....................     /* ...*.. */ 0x04, 
....................     /* ****.. */ 0x3c, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................  
....................     /* 182 0xb6 'Ж' */ 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* **.*.. */ 0x34, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................  
....................     /* 183 0xb7 'З' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ****.. */ 0x3c, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................  
....................     /* 184 0xb8 'И' */ 
....................     /* ...... */ 0x00, 
....................     /* ****.. */ 0x3c, 
....................     /* ...*.. */ 0x04, 
....................     /* ****.. */ 0x3c, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................  
....................     /* 185 0xb9 'Й' */ 
....................     /* .*.*.. */ 0x14, 
....................     /* **.*.. */ 0x34, 
....................     /* ...*.. */ 0x04, 
....................     /* **.*.. */ 0x34, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................  
....................     /* 186 0xba 'К' */ 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................  
....................     /* 187 0xbb 'Л' */ 
....................     /* ...... */ 0x00, 
....................     /* ****.. */ 0x3c, 
....................     /* ...*.. */ 0x04, 
....................     /* **.*.. */ 0x34, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................  
....................     /* 188 0xbc 'М' */ 
....................     /* .*.*.. */ 0x14, 
....................     /* **.*.. */ 0x34, 
....................     /* ...*.. */ 0x04, 
....................     /* ****.. */ 0x3c, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 189 0xbd 'Н' */ 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* .*.*.. */ 0x14, 
....................     /* ****.. */ 0x3c, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 190 0xbe 'О' */ 
....................     /* ...*.. */ 0x04, 
....................     /* ****.. */ 0x3c, 
....................     /* ...*.. */ 0x04, 
....................     /* ****.. */ 0x3c, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 191 0xbf 'П' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ****.. */ 0x3c, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x04, 
.................... //russian section 
....................  
....................     /* 192 0xc0 'Р' */ 
....................     /* ...*.. */ 0x03, 
....................     /* ...*.. */ 0x05, 
....................     /* ...*.. */ 0x09, 
....................     /* ...*** */ 0x11, 
....................     /* ...... */ 0x1f, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 193 0xc1 'С' */ 
....................     /* ...*.. */ 0x1e, 
....................     /* ...*.. */ 0x10, 
....................     /* ...*.. */ 0x10, 
....................     /* ****** */ 0x1e, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x1e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 194 0xc2 'Т' */ 
....................     /* ...... */ 0x1e, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* ****** */ 0x1e, 
....................     /* ...*.. */ 0x11, 
....................     /* ...*.. */ 0x11, 
....................     /* ...*.. */ 0x1e, 
....................     /* ...*.. */ 0x00, 
....................  
....................     /* 195 0xc3 'У' */ 
....................     /* ...*.. */ 0x1f, 
....................     /* ...*.. */ 0x11, 
....................     /* ...*.. */ 0x10, 
....................     /* ...*** */ 0x10, 
....................     /* ...*.. */ 0x10, 
....................     /* ...*.. */ 0x10, 
....................     /* ...*.. */ 0x10, 
....................     /* ...*.. */ 0x00, 
....................  
....................     /* 196 0xc4 'Ф' */ 
....................     /* ...... */ 0x06, 
....................     /* ...... */ 0x0a, 
....................     /* ...... */ 0x0a, 
....................     /* ****** */ 0x0a, 
....................     /* ...... */ 0x0a, 
....................     /* ...... */ 0x1f, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 197 0xc5 'Х' */ 
....................     /* ...*.. */ 0x1f, 
....................     /* ...*.. */ 0x10, 
....................     /* ...*.. */ 0x10, 
....................     /* ****** */ 0x1c, 
....................     /* ...*.. */ 0x10, 
....................     /* ...*.. */ 0x10, 
....................     /* ...*.. */ 0x1f, 
....................     /* ...*.. */ 0x00, 
....................  
....................     /* 198 0xc6 'Ц' */ 
....................     /* ...*.. */ 0x15, 
....................     /* ...*** */ 0x15, 
....................     /* ...*.. */ 0x0e, 
....................     /* ...*** */ 0x04, 
....................     /* ...*.. */ 0x0e, 
....................     /* ...*.. */ 0x15, 
....................     /* ...*.. */ 0x15, 
....................     /* ...*.. */ 0x00, 
....................  
....................     /* 199 0xc7 'Ч' */ 
....................     /* .*.*.. */ 0x0e, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x01, 
....................     /* .*.*** */ 0x06, 
....................     /* .*.*.. */ 0x01, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x0e, 
....................     /* .*.*.. */ 0x00, 
....................  
....................     /* 200 0xc8 'Ш' */ 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*** */ 0x11, 
....................     /* .*.... */ 0x13, 
....................     /* .***** */ 0x15, 
....................     /* ...... */ 0x19, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 201 0xc9 'Щ' */ 
....................     /* ...... */ 0x15, 
....................     /* .***** */ 0x11, 
....................     /* .*.... */ 0x13, 
....................     /* .*.*** */ 0x15, 
....................     /* .*.*.. */ 0x19, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x00, 
....................  
....................     /* 202 0xca 'Ъ' */ 
....................     /* .*.*.. */ 0x11, 
....................     /* **.*** */ 0x12, 
....................     /* ...... */ 0x14, 
....................     /* ****** */ 0x18, 
....................     /* ...... */ 0x14, 
....................     /* ...... */ 0x12, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 203 0xcb 'Ы' */ 
....................     /* ...... */ 0x07, 
....................     /* ****** */ 0x09, 
....................     /* ...... */ 0x09, 
....................     /* **.*** */ 0x09, 
....................     /* .*.*.. */ 0x09, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x00, 
....................  
....................     /* 204 0xcc 'Ь' */ 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*** */ 0x1b, 
....................     /* .*.... */ 0x15, 
....................     /* .*.*** */ 0x15, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x00, 
....................  
....................     /* 205 0xcd 'Э' */ 
....................     /* ...... */ 0x11, 
....................     /* ****** */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* ****** */ 0x1f, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 206 0xce 'Ю' */ 
....................     /* .*.*.. */ 0x0e, 
....................     /* **.*** */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* **.*** */ 0x11, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x0e, 
....................     /* .*.*.. */ 0x00, 
....................  
....................     /* 207 0xcf 'Я' */ 
....................     /* ...*.. */ 0x1f, 
....................     /* ****** */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* ****** */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 208 0xd0 'а' */ 
....................     /* .*.*.. */ 0x1e, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x11, 
....................     /* ****** */ 0x1e, 
....................     /* ...... */ 0x10, 
....................     /* ...... */ 0x10, 
....................     /* ...... */ 0x10, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 209 0xd1 'б' */ 
....................     /* ...... */ 0x0e, 
....................     /* ****** */ 0x11, 
....................     /* ...... */ 0x10, 
....................     /* ****** */ 0x10, 
....................     /* ...*.. */ 0x10, 
....................     /* ...*.. */ 0x11, 
....................     /* ...*.. */ 0x0e, 
....................     /* ...*.. */ 0x00, 
....................  
....................     /* 210 0xd2 'в' */ 
....................     /* ...... */ 0x1f, 
....................     /* ...... */ 0x15, 
....................     /* ...... */ 0x04, 
....................     /* ****** */ 0x04, 
....................     /* .*.*.. */ 0x04, 
....................     /* .*.*.. */ 0x04, 
....................     /* .*.*.. */ 0x04, 
....................     /* .*.*.. */ 0x00, 
....................  
....................     /* 211 0xd3 'г' */ 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x11, 
....................     /* .***** */ 0x0f, 
....................     /* ...... */ 0x01, 
....................     /* ...... */ 0x01, 
....................     /* ...... */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 212 0xd4 'д' */ 
....................     /* ...*.. */ 0x0e, 
....................     /* ...*** */ 0x15, 
....................     /* ...*.. */ 0x15, 
....................     /* ...*** */ 0x15, 
....................     /* ...... */ 0x0e, 
....................     /* ...... */ 0x04, 
....................     /* ...... */ 0x04, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 213 0xd5 'е' */ 
....................     /* ...... */ 0x11, 
....................     /* ...*** */ 0x11, 
....................     /* ...*.. */ 0x0a, 
....................     /* ...*** */ 0x04, 
....................     /* ...*.. */ 0x0a, 
....................     /* ...*.. */ 0x11, 
....................     /* ...*.. */ 0x11, 
....................     /* ...*.. */ 0x00, 
....................  
....................     /* 214 0xd6 'ж' */ 
....................     /* ...... */ 0x12, 
....................     /* ...... */ 0x12, 
....................     /* ...... */ 0x12, 
....................     /* .***** */ 0x12, 
....................     /* .*.*.. */ 0x12, 
....................     /* .*.*.. */ 0x1f, 
....................     /* .*.*.. */ 0x01, 
....................     /* .*.*.. */ 0x00, 
....................  
....................     /* 215 0xd7 'з' */ 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x11, 
....................     /* .*.*.. */ 0x11, 
....................     /* **.*** */ 0x0f, 
....................     /* .*.*.. */ 0x01, 
....................     /* .*.*.. */ 0x01, 
....................     /* .*.*.. */ 0x01, 
....................     /* .*.*.. */ 0x00, 
....................  
....................     /* 216 0xd8 'и' */ 
....................     /* ...*.. */ 0x15, 
....................     /* ****** */ 0x15, 
....................     /* ...... */ 0x15, 
....................     /* ****** */ 0x15, 
....................     /* ...*.. */ 0x15, 
....................     /* ...*.. */ 0x15, 
....................     /* ...*.. */ 0x1f, 
....................     /* ...*.. */ 0x00, 
....................  
....................     /* 217 0xd9 'й' */ 
....................     /* ...*.. */ 0x15, 
....................     /* ...*.. */ 0x15, 
....................     /* ...*.. */ 0x15, 
....................     /* ****.. */ 0x15, 
....................     /* ...... */ 0x15, 
....................     /* ...... */ 0x1f, 
....................     /* ...... */ 0x01, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 218 0xda 'к' */ 
....................     /* ...... */ 0x18, 
....................     /* ...... */ 0x08, 
....................     /* ...... */ 0x08, 
....................     /* ...*** */ 0x0e, 
....................     /* ...*.. */ 0x09, 
....................     /* ...*.. */ 0x09, 
....................     /* ...*.. */ 0x0e, 
....................     /* ...*.. */ 0x00, 
....................  
....................     /* 219 0xdb 'л' */ 
....................     /* ****** */ 0x11, 
....................     /* ****** */ 0x11, 
....................     /* ****** */ 0x11, 
....................     /* ****** */ 0x19, 
....................     /* ****** */ 0x15, 
....................     /* ****** */ 0x15, 
....................     /* ****** */ 0x19, 
....................     /* ****** */ 0x00, 
....................  
....................     /* 220 0xdc 'м' */ 
....................     /* ...... */ 0x08, 
....................     /* ...... */ 0x08, 
....................     /* ...... */ 0x08, 
....................     /* ...... */ 0x0e, 
....................     /* ****** */ 0x09, 
....................     /* ****** */ 0x09, 
....................     /* ****** */ 0x0e, 
....................     /* ****** */ 0x00, 
....................  
....................     /* 221 0xdd 'н' */ 
....................     /* ***... */ 0x1e, 
....................     /* ***... */ 0x01, 
....................     /* ***... */ 0x01, 
....................     /* ***... */ 0x07, 
....................     /* ***... */ 0x01, 
....................     /* ***... */ 0x01, 
....................     /* ***... */ 0x1e, 
....................     /* ***... */ 0x00, 
....................  
....................     /* 222 0xde 'о' */ 
....................     /* ...*** */ 0x12, 
....................     /* ...*** */ 0x15, 
....................     /* ...*** */ 0x15, 
....................     /* ...*** */ 0x1d, 
....................     /* ...*** */ 0x15, 
....................     /* ...*** */ 0x15, 
....................     /* ...*** */ 0x12, 
....................     /* ...*** */ 0x00, 
....................  
....................     /* 223 0xdf 'п' */ 
....................     /* ****** */ 0x0f, 
....................     /* ****** */ 0x11, 
....................     /* ****** */ 0x11, 
....................     /* ****** */ 0x0f, 
....................     /* ...... */ 0x05, 
....................     /* ...... */ 0x09, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 224 0xe0 'р' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..**.* */ 0x0e, 
....................     /* .*..*. */ 0x01, 
....................     /* .*..*. */ 0x0f, 
....................     /* ..**.* */ 0x11, 
....................     /* ...... */ 0x0f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 225 0xe1 'с' */ 
....................     /* ...... */ 0x03, 
....................     /* .***.. */ 0x04, 
....................     /* .*..*. */ 0x02, 
....................     /* .***.. */ 0x0e, 
....................     /* .*..*. */ 0x11, 
....................     /* .*..*. */ 0x11, 
....................     /* .***.. */ 0x0e, 
....................     /* .*.... */ 0x00, 
....................  
....................     /* 226 0xe2 'т' */ 
....................     /* .****. */ 0x08, 
....................     /* .*..*. */ 0x14, 
....................     /* .*.... */ 0x18, 
....................     /* .*.... */ 0x1e, 
....................     /* .*.... */ 0x11, 
....................     /* .*.... */ 0x11, 
....................     /* .*.... */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 227 0xe3 'у' */ 
....................     /* ...... */ 0x00, 
....................     /* .***** */ 0x00, 
....................     /* ..*.*. */ 0x1e, 
....................     /* ..*.*. */ 0x01, 
....................     /* ..*.*. */ 0x0e, 
....................     /* ..*.*. */ 0x10, 
....................     /* ..*.*. */ 0x0f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 228 0xe4 'ф' */ 
....................     /* .****. */ 0x06, 
....................     /* .*..*. */ 0x09, 
....................     /* ..*... */ 0x01, 
....................     /* ...*.. */ 0x0f, 
....................     /* ..*... */ 0x11, 
....................     /* .*..*. */ 0x11, 
....................     /* .****. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 229 0xe5 'х' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..**** */ 0x0e, 
....................     /* .*..*. */ 0x11, 
....................     /* .*..*. */ 0x1f, 
....................     /* ..**.. */ 0x10, 
....................     /* ...... */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 230 0xe6 'ц' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .*..*. */ 0x15, 
....................     /* .*..*. */ 0x0e, 
....................     /* .*..*. */ 0x04, 
....................     /* .***.. */ 0x0e, 
....................     /* .*.... */ 0x15, 
....................     /* .*.... */ 0x00, 
....................  
....................     /* 231 0xe7 'ч' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..*.*. */ 0x0e, 
....................     /* .*.*.. */ 0x11, 
....................     /* ...*.. */ 0x06, 
....................     /* ...*.. */ 0x11, 
....................     /* ...*.. */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 232 0xe8 'ш' */ 
....................     /* ..***. */ 0x00, 
....................     /* ...*.. */ 0x00, 
....................     /* ..***. */ 0x12, 
....................     /* .*...* */ 0x12, 
....................     /* ..***. */ 0x12, 
....................     /* ...*.. */ 0x16, 
....................     /* ..***. */ 0x09, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 233 0xe9 'щ' */ 
....................     /* ..**.. */ 0x0c, 
....................     /* .*..*. */ 0x00, 
....................     /* .*..*. */ 0x12, 
....................     /* .****. */ 0x12, 
....................     /* .*..*. */ 0x12, 
....................     /* .*..*. */ 0x16, 
....................     /* ..**.. */ 0x09, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 234 0xea 'ъ' */ 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x00, 
....................     /* .*...* */ 0x13, 
....................     /* .*...* */ 0x14, 
....................     /* ..*.*. */ 0x18, 
....................     /* ..*.*. */ 0x14, 
....................     /* .**.** */ 0x13, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 235 0xeb 'ы' */ 
....................     /* ..**.. */ 0x00, 
....................     /* .*.... */ 0x00, 
....................     /* ..*... */ 0x07, 
....................     /* ...*.. */ 0x09, 
....................     /* ..***. */ 0x09, 
....................     /* .*..*. */ 0x11, 
....................     /* ..**.. */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 236 0xec 'ь' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ..*.*. */ 0x11, 
....................     /* .*.*.* */ 0x1b, 
....................     /* .*.*.* */ 0x15, 
....................     /* ..*.*. */ 0x15, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 237 0xed 'э' */ 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x00, 
....................     /* ..***. */ 0x11, 
....................     /* .*.*.* */ 0x11, 
....................     /* .*.*.* */ 0x1f, 
....................     /* ..***. */ 0x11, 
....................     /* ...*.. */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 238 0xee 'ю' */ 
....................     /* ...... */ 0x00, 
....................     /* ..***. */ 0x00, 
....................     /* .*.... */ 0x0e, 
....................     /* .****. */ 0x11, 
....................     /* .*.... */ 0x11, 
....................     /* ..***. */ 0x11, 
....................     /* ...... */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 239 0xef 'я' */ 
....................     /* ...... */ 0x00, 
....................     /* ..**.. */ 0x00, 
....................     /* .*..*. */ 0x16, 
....................     /* .*..*. */ 0x19, 
....................     /* .*..*. */ 0x11, 
....................     /* .*..*. */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 240 0xf0 '№' */ 
....................     /* ...... */ 0x00, 
....................     /* .****. */ 0x00, 
....................     /* ...... */ 0x1e, 
....................     /* .****. */ 0x11, 
....................     /* ...... */ 0x1e, 
....................     /* .****. */ 0x10, 
....................     /* ...... */ 0x10, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 241 0xf1 'ё' */ 
....................     /* ...... */ /* 0x00, */ 0x00, 
....................     /* ...*.. */ /* 0x04, */ 0x00, 
....................     /* ..***. */ /* 0x0e, */ 0x0e,  
....................     /* ...*.. */ /* 0x04, */ 0x11, 
....................     /* ...... */ /* 0x00, */ 0x10, 
....................     /* ..***. */ /* 0x0e, */ 0x11, 
....................     /* ...... */ /* 0x00, */ 0x0e, 
....................     /* ...... */ /* 0x00, */ 0x00, 
....................  
....................     /* 242 0xf2 'ђ' */ 
....................     /* .*.... */ /* 0x10, */ /* ****** */ 0x00, 
....................     /* ..**.. */ /* 0x0c, */ /* ...... */ 0x00, 
....................     /* ....*. */ /* 0x02, */ /* .*..*. */ 0x1f, 
....................     /* ..**.. */ /* 0x0c, */ /* .**.*. */ 0x04, 
....................     /* .*.... */ /* 0x10, */ /* .*.**. */ 0x04, 
....................     /* ...... */ /* 0x00, */ /* .*..*. */ 0x04, 
....................     /* .****. */ /* 0x1e, */ /* ...... */ 0x04, 
....................     /* ...... */ /* 0x00, */ /* ****** */ 0x00, 
....................  
....................     /* 243 0xf3 'ѓ' */ 
....................     /* ....*. */ /* 0x02, */ /* ****** */ 0x00, 
....................     /* ..**.. */ /* 0x0c, */ /* .....* */ 0x00, 
....................     /* .*.... */ /* 0x10, */ /* ***..* */ 0x11, 
....................     /* ..**.. */ /* 0x0c, */ /* *..*.* */ 0x11, 
....................     /* ....*. */ /* 0x02, */ /* *..*.* */ 0x0f, 
....................     /* ...... */ /* 0x00, */ /* ***..* */ 0x01, 
....................     /* .****. */ /* 0x1e, */ /* .....* */ 0x0e, 
....................     /* ...... */ /* 0x00, */ /* ****** */ 0x00, 
....................      
....................     /* 244 0xf4 'є' */ 
....................     /* ...... */ 0x00, 
....................     /* ....*. */ 0x00, 
....................     /* ...*.* */ 0x0e, 
....................     /* ...*.. */ 0x15, 
....................     /* ...*.. */ 0x15, 
....................     /* ...*.. */ 0x0e, 
....................     /* ...*.. */ 0x04, 
....................     /* ...*.. */ 0x00, 
....................  
....................     /* 245 0xf5 'ѕ' */ 
....................     /* ...*.. */ 0x00, 
....................     /* ...*.. */ 0x00, 
....................     /* ...*.. */ 0x11, 
....................     /* ...*.. */ 0x0a, 
....................     /* ...*.. */ 0x04, 
....................     /* .*.*.. */ 0x0a, 
....................     /* ..*... */ 0x11, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 246 0xf6 'і' */ 
....................     /* ...... */ 0x00, 
....................     /* ...*.. */ 0x00, 
....................     /* ...... */ 0x12, 
....................     /* .***** */ 0x12, 
....................     /* ...... */ 0x12, 
....................     /* ...*.. */ 0x0f, 
....................     /* ...... */ 0x01, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 247 0xf7 'ї' */ 
....................     /* ...... */ 0x00, 
....................     /* ..*.*. */ 0x00, 
....................     /* .*.*.. */ 0x11, 
....................     /* ...... */ 0x11, 
....................     /* ..*.*. */ 0x0f, 
....................     /* .*.*.. */ 0x01, 
....................     /* ...... */ 0x01, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 248 0xf8 'ј' */ 
....................     /* ..**.. */ 0x00, 
....................     /* .*..*. */ 0x00, 
....................     /* .*..*. */ 0x15, 
....................     /* ..**.. */ 0x15, 
....................     /* ...... */ 0x15, 
....................     /* ...... */ 0x15, 
....................     /* ...... */ 0x1f, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 249 0xf9 'љ' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x15, 
....................     /* ..**.. */ 0x15, 
....................     /* ..**.. */ 0x15, 
....................     /* ...... */ 0x1f, 
....................     /* ...... */ 0x01, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 250 0xfa 'њ' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x18, 
....................     /* ..*... */ 0x08, 
....................     /* ...... */ 0x0e, 
....................     /* ...... */ 0x09, 
....................     /* ...... */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 251 0xfb 'ћ' */ 
....................     /* ...... */ 0x00, 
....................     /* ...*** */ 0x00, 
....................     /* ...*.. */ 0x11, 
....................     /* ...*.. */ 0x11, 
....................     /* .*.*.. */ 0x19, 
....................     /* .*.*.. */ 0x15, 
....................     /* ..*... */ 0x19, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 252 0xfc 'ќ' */ 
....................     /* .*.*.. */ 0x00, 
....................     /* ..*.*. */ 0x00, 
....................     /* ..*.*. */ 0x08, 
....................     /* ..*.*. */ 0x08, 
....................     /* ...... */ 0x0e, 
....................     /* ...... */ 0x09, 
....................     /* ...... */ 0x0e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 253 0xfd '§' */ 
....................     /* .**... */ 0x00, 
....................     /* ...*.. */ 0x00, 
....................     /* ..*... */ 0x1e, 
....................     /* .***.. */ 0x01, 
....................     /* ...... */ 0x07, 
....................     /* ...... */ 0x01, 
....................     /* ...... */ 0x1e, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 254 0xfe 'ў' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .****. */ 0x12, 
....................     /* .****. */ 0x15, 
....................     /* .****. */ 0x1d, 
....................     /* .****. */ 0x15, 
....................     /* ...... */ 0x12, 
....................     /* ...... */ 0x00, 
....................  
....................     /* 255 0xff 'џ' */ 
....................     /* ...... */ 0x00, 
....................     /* ...... */ 0x00, 
....................     /* .****. */ 0x0f, 
....................     /* .****. */ 0x11, 
....................     /* .****. */ 0x0f, 
....................     /* .****. */ 0x05, 
....................     /* ...... */ 0x19, 
....................     /* ...... */ 0x00, 
....................  
....................  
.................... }; 
....................  
.................... // 
.................... // 
.................... char	string[256]; 
.................... // 
.................... //LCD definition 
.................... #define	CHARBASE	0x0000			//char generator base adress 
.................... #define	TEXTBASE	0x0800			//text home adress 
.................... #define	GRAPHBASE	0x0a00			//graph home adress 
.................... #define	COLS		0x14			//20 chars/row 
.................... #define	ROWS		0x10			//16 char/col 
.................... #define	GLCD_WIDTH	0xA0			//LCD width 
.................... //LCD Variables 
....................  
.................... //LCD routines 
.................... int8	k,l; 
.................... // 
.................... //Get LCD status 
.................... int8	GetStatusLCD(void){ 
.................... 	int8	i;				//temporary 
.................... 	 
.................... 	restart_wdt(); 
*
1E46:  CLRWDT
.................... 	set_tris_d(0xff);		//set port D as input 
1E48:  MOVLW  FF
1E4A:  MOVWF  F95
.................... 	output_high(C_D);		//command mode 
1E4C:  BCF    F92.3
1E4E:  BSF    F89.3
.................... 	output_high(_WR);		// 
1E50:  BCF    F92.0
1E52:  BSF    F89.0
.................... 	output_low(_RD);		//read mode 
1E54:  BCF    F92.1
1E56:  BCF    F89.1
.................... 	output_low(_CE);		//strobe 
1E58:  BCF    F92.2
1E5A:  BCF    F89.2
.................... //	delay_us(1); 
.................... 	i=input_d();			//read status 
1E5C:  MOVWF  F95
1E5E:  MOVFF  F83,367
.................... 	output_high(_CE); 
1E62:  BCF    F92.2
1E64:  BSF    F89.2
.................... 	output_high(_RD); 
1E66:  BCF    F92.1
1E68:  BSF    F89.1
.................... 	set_tris_d(0x00);		//set D as output 
1E6A:  MOVLW  00
1E6C:  MOVWF  F95
.................... 	restart_wdt(); 
1E6E:  CLRWDT
.................... 	return i; 
1E70:  MOVLB  3
1E72:  MOVFF  367,01
.................... } 
1E76:  MOVLB  0
1E78:  RETLW  00
.................... // 
.................... //wait LCD status 
.................... int8	WaitStatusLCD(void){ 
.................... 	int8	tmp; 
.................... 	 
.................... 	tmp=0;	//init timeout 
.................... 	 
.................... 	while (((GetStatusLCD()&0x03)!=0x03)){ 
.................... 		tmp++; 
.................... 	}; 
.................... 	//timeout detection 
.................... 	if (tmp==0x80){ 
.................... 		//set exit code 
.................... 		//reset timeout flag 
.................... 	} 
.................... 	else tmp=0;	//set exit code OK 
.................... 	return 0; 
.................... } 
.................... // 
.................... //set command 
.................... void	SetCommandLCD(int8 cmd){ 
.................... 	while ((GetStatusLCD()&0x03)!=0x03); 
1E7A:  RCALL  1E46
1E7C:  MOVF   01,W
1E7E:  ANDLW  03
1E80:  SUBLW  03
1E82:  BNZ   1E7A
.................... 		output_high(C_D);		//command mode 
1E84:  BCF    F92.3
1E86:  BSF    F89.3
.................... 		output_high(_RD); 
1E88:  BCF    F92.1
1E8A:  BSF    F89.1
.................... 		output_low(_WR);		//write mode 
1E8C:  BCF    F92.0
1E8E:  BCF    F89.0
.................... 		output_d(cmd);			//set command 
1E90:  CLRF   F95
1E92:  MOVFF  363,F8C
.................... //		delay_us(1); 
.................... 		output_low(_CE);		//strobe 
1E96:  BCF    F92.2
1E98:  BCF    F89.2
.................... //		delay_us(1); 
.................... 		output_high(_CE); 
1E9A:  BCF    F92.2
1E9C:  BSF    F89.2
.................... 		output_high(_WR); 
1E9E:  BCF    F92.0
1EA0:  BSF    F89.0
.................... } 
1EA2:  RETLW  00
.................... // 
.................... //set data 
.................... void	SetDataLCD(int8 data){ 
.................... 	while ((GetStatusLCD()&0x03)!=0x03); 
1EA4:  RCALL  1E46
1EA6:  MOVF   01,W
1EA8:  ANDLW  03
1EAA:  SUBLW  03
1EAC:  BNZ   1EA4
.................... 		output_low(C_D);		//set data mode 
1EAE:  BCF    F92.3
1EB0:  BCF    F89.3
.................... 		output_high(_RD); 
1EB2:  BCF    F92.1
1EB4:  BSF    F89.1
.................... 		output_low(_WR);		//write mode 
1EB6:  BCF    F92.0
1EB8:  BCF    F89.0
.................... 		output_d(data);			//set data 
1EBA:  CLRF   F95
1EBC:  MOVFF  364,F8C
.................... //		delay_us(1); 
.................... 		output_low(_CE);		//strobe 
1EC0:  BCF    F92.2
1EC2:  BCF    F89.2
.................... //		delay_us(1); 
.................... 		output_high(_CE); 
1EC4:  BCF    F92.2
1EC6:  BSF    F89.2
.................... 		output_high(_WR); 
1EC8:  BCF    F92.0
1ECA:  BSF    F89.0
.................... 		output_high(C_D); 
1ECC:  BCF    F92.3
1ECE:  BSF    F89.3
.................... } 
1ED0:  RETLW  00
.................... // 
.................... //set data word 
.................... void	SetData2LCD(int16 data){ 
*
2BB2:  CLRF   19
2BB4:  BTFSC  FF2.7
2BB6:  BSF    19.7
2BB8:  BCF    FF2.7
.................... 	while ((GetStatusLCD()&0x03)!=0x03); 
2BBA:  CALL   1E46
2BBE:  BTFSC  19.7
2BC0:  BSF    FF2.7
2BC2:  MOVF   01,W
2BC4:  ANDLW  03
2BC6:  SUBLW  03
2BC8:  BNZ   2BB2
.................... 		output_low(C_D);		//set data mode 
2BCA:  BCF    F92.3
2BCC:  BCF    F89.3
.................... 		output_high(_RD); 
2BCE:  BCF    F92.1
2BD0:  BSF    F89.1
.................... 		output_low(_WR);		//write mode 
2BD2:  BCF    F92.0
2BD4:  BCF    F89.0
.................... 		output_d(make8(data,0));			//set data low 
2BD6:  CLRF   F95
2BD8:  MOVFF  352,F8C
.................... 		delay_us(5); 
2BDC:  CLRWDT
2BDE:  MOVLW  0C
2BE0:  MOVWF  00
2BE2:  DECFSZ 00,F
2BE4:  BRA    2BE2
2BE6:  BRA    2BE8
.................... 		output_low(_CE);		//strobe 
2BE8:  BCF    F92.2
2BEA:  BCF    F89.2
.................... 		delay_us(5); 
2BEC:  CLRWDT
2BEE:  MOVLW  0C
2BF0:  MOVWF  00
2BF2:  DECFSZ 00,F
2BF4:  BRA    2BF2
2BF6:  BRA    2BF8
.................... 		output_high(_CE); 
2BF8:  BCF    F92.2
2BFA:  BSF    F89.2
.................... 		output_high(_WR); 
2BFC:  BCF    F92.0
2BFE:  BSF    F89.0
.................... 		output_high(C_D); 
2C00:  BCF    F92.3
2C02:  BSF    F89.3
2C04:  CLRF   19
2C06:  BTFSC  FF2.7
2C08:  BSF    19.7
2C0A:  BCF    FF2.7
.................... 		 
.................... 	while ((GetStatusLCD()&0x03)!=0x03); 
2C0C:  CALL   1E46
2C10:  BTFSC  19.7
2C12:  BSF    FF2.7
2C14:  MOVF   01,W
2C16:  ANDLW  03
2C18:  SUBLW  03
2C1A:  BNZ   2C04
.................... 			output_low(C_D);		//set data mode 
2C1C:  BCF    F92.3
2C1E:  BCF    F89.3
.................... 			output_high(_RD); 
2C20:  BCF    F92.1
2C22:  BSF    F89.1
.................... 			output_low(_WR);		//write mode 
2C24:  BCF    F92.0
2C26:  BCF    F89.0
.................... 			output_d(make8(data,1));			//set data high 
2C28:  CLRF   F95
2C2A:  MOVFF  353,F8C
.................... 			delay_us(5); 
2C2E:  CLRWDT
2C30:  MOVLW  0C
2C32:  MOVWF  00
2C34:  DECFSZ 00,F
2C36:  BRA    2C34
2C38:  BRA    2C3A
.................... 			output_low(_CE);		//strobe 
2C3A:  BCF    F92.2
2C3C:  BCF    F89.2
.................... 			delay_us(5); 
2C3E:  CLRWDT
2C40:  MOVLW  0C
2C42:  MOVWF  00
2C44:  DECFSZ 00,F
2C46:  BRA    2C44
2C48:  BRA    2C4A
.................... 			output_high(_CE); 
2C4A:  BCF    F92.2
2C4C:  BSF    F89.2
.................... 			output_high(_WR); 
2C4E:  BCF    F92.0
2C50:  BSF    F89.0
.................... 			output_high(C_D);	 
2C52:  BCF    F92.3
2C54:  BSF    F89.3
.................... } 
2C56:  RETLW  00
.................... // 
.................... //set adress LCD 
.................... void	SetAddrLCD(int16 address){ 
.................... 	//low byte 
.................... 	while ((GetStatusLCD()&0x03)!=0x03); 
*
203C:  RCALL  1E46
203E:  MOVF   01,W
2040:  ANDLW  03
2042:  SUBLW  03
2044:  BNZ   203C
.................... 		output_low(C_D);		//set data mode 
2046:  BCF    F92.3
2048:  BCF    F89.3
.................... 		output_high(_RD); 
204A:  BCF    F92.1
204C:  BSF    F89.1
.................... 		output_low(_WR);		//write mode 
204E:  BCF    F92.0
2050:  BCF    F89.0
.................... 		output_d(make8(address,0));			//set data low 
2052:  CLRF   F95
2054:  MOVFF  365,F8C
.................... 		delay_us(5); 
2058:  CLRWDT
205A:  MOVLW  0C
205C:  MOVWF  00
205E:  DECFSZ 00,F
2060:  BRA    205E
2062:  BRA    2064
.................... 		output_low(_CE);		//strobe 
2064:  BCF    F92.2
2066:  BCF    F89.2
.................... 		delay_us(5); 
2068:  CLRWDT
206A:  MOVLW  0C
206C:  MOVWF  00
206E:  DECFSZ 00,F
2070:  BRA    206E
2072:  BRA    2074
.................... 		output_high(_CE); 
2074:  BCF    F92.2
2076:  BSF    F89.2
.................... 		output_high(_WR); 
2078:  BCF    F92.0
207A:  BSF    F89.0
.................... 		output_high(C_D); 
207C:  BCF    F92.3
207E:  BSF    F89.3
.................... 		//high byte 
.................... 	while ((GetStatusLCD()&0x03)!=0x03); 
2080:  RCALL  1E46
2082:  MOVF   01,W
2084:  ANDLW  03
2086:  SUBLW  03
2088:  BNZ   2080
.................... 			output_low(C_D);		//set data mode 
208A:  BCF    F92.3
208C:  BCF    F89.3
.................... 			output_high(_RD); 
208E:  BCF    F92.1
2090:  BSF    F89.1
.................... 			output_low(_WR);		//write mode 
2092:  BCF    F92.0
2094:  BCF    F89.0
.................... 			output_d(make8(address,1));			//set data high 
2096:  CLRF   F95
2098:  MOVFF  366,F8C
.................... 			delay_us(5); 
209C:  CLRWDT
209E:  MOVLW  0C
20A0:  MOVWF  00
20A2:  DECFSZ 00,F
20A4:  BRA    20A2
20A6:  BRA    20A8
.................... 			output_low(_CE);		//strobe 
20A8:  BCF    F92.2
20AA:  BCF    F89.2
.................... 			delay_us(5); 
20AC:  CLRWDT
20AE:  MOVLW  0C
20B0:  MOVWF  00
20B2:  DECFSZ 00,F
20B4:  BRA    20B2
20B6:  BRA    20B8
.................... 			output_high(_CE); 
20B8:  BCF    F92.2
20BA:  BSF    F89.2
.................... 			output_high(_WR); 
20BC:  BCF    F92.0
20BE:  BSF    F89.0
.................... 			output_high(C_D);	 
20C0:  BCF    F92.3
20C2:  BSF    F89.3
.................... 			//command 
.................... 	while ((GetStatusLCD()&0x03)!=0x03); 
20C4:  RCALL  1E46
20C6:  MOVF   01,W
20C8:  ANDLW  03
20CA:  SUBLW  03
20CC:  BNZ   20C4
.................... 				output_high(C_D);		//command mode 
20CE:  BCF    F92.3
20D0:  BSF    F89.3
.................... 				output_high(_RD); 
20D2:  BCF    F92.1
20D4:  BSF    F89.1
.................... 				output_low(_WR);		//write mode 
20D6:  BCF    F92.0
20D8:  BCF    F89.0
.................... 				output_d(0x24);			//set command 
20DA:  CLRF   F95
20DC:  MOVLW  24
20DE:  MOVWF  F8C
.................... 				delay_us(5); 
20E0:  CLRWDT
20E2:  MOVLW  0C
20E4:  MOVWF  00
20E6:  DECFSZ 00,F
20E8:  BRA    20E6
20EA:  BRA    20EC
.................... 				output_low(_CE);		//strobe 
20EC:  BCF    F92.2
20EE:  BCF    F89.2
.................... 				delay_us(5); 
20F0:  CLRWDT
20F2:  MOVLW  0C
20F4:  MOVWF  00
20F6:  DECFSZ 00,F
20F8:  BRA    20F6
20FA:  BRA    20FC
.................... 				output_high(_CE); 
20FC:  BCF    F92.2
20FE:  BSF    F89.2
.................... 				output_high(_WR); 
2100:  BCF    F92.0
2102:  BSF    F89.0
.................... } 
2104:  RETLW  00
.................... // 
.................... //pixel 
.................... void	glcd_pixel(int8 x, int8 y, int1 color){ 
.................... 	int8	yr; 
.................... 	yr=8*ROWS-Y-1; 
.................... 	SetAddrLCD(GRAPHBASE+(int16)X/8+(int16)yr*COLS);//set adress 
.................... 	//Draw pixel 
.................... 	if (color)  
.................... 	SetCommandLCD((0xf8|(7-(X-(X/8)*8))));  
.................... 	else  
.................... 	SetCommandLCD((0xf0|(7-(X-(X/8)*8))));  
.................... } 
.................... // 
.................... //define graphics functions 
.................... #include "graph_lcd.h" 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                          graphics.c                             //// 
.................... ////                                                                 //// 
.................... ////   This file contains functions to draw lines, rectangles, bars, //// 
.................... ////   circles and text to a display. A function which draws a       //// 
.................... ////   single pixel must be defined before calling the functions in  //// 
.................... ////   this file. Call it glcd_pixel(x, y, color) where x is the     //// 
.................... ////   horizontal coordinate, y is the vertical coordinate, and      //// 
.................... ////   color is 1 bit to turn the pixel on or off.                   //// 
.................... ////                                                                 //// 
.................... ////   * Note: (0, 0) is treated as the upper left corner            //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////                                                                 //// 
.................... ////  glcd_line(x1, y1, x2, y2, color)                               //// 
.................... ////     * Draws a line from the first point to the second point     //// 
.................... ////       with the given color                                      //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_rect(x1, y1, x2, y2, fill, color)                         //// 
.................... ////     * Draws a rectangle with one corner at point (x1,y1) and    //// 
.................... ////       the other corner at point (x2,y2)                         //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_bar(x1, y1, x2, y2, width, color)                         //// 
.................... ////     * Draws a bar (wide line) from the first point to the       //// 
.................... ////       second point                                              //// 
.................... ////       - width is the number of pixels wide                      //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////                                                                 //// 
.................... ////  glcd_circle(x, y, radius, fill, color)                         //// 
.................... ////     * Draws a circle with center at (x,y)                       //// 
.................... ////       - fill can be YES or NO                                   //// 
.................... ////       - color can be ON or OFF                                  //// 
.................... ////                                                                 //// 
.................... ////  glcd_text57(x, y, textptr, size, color)                        //// 
.................... ////     * Write the null terminated text pointed to by textptr with //// 
.................... ////       the upper left coordinate of the first character at (x,y) //// 
.................... ////       Characters are 5 pixels wide and 7 pixels tall            //// 
.................... ////       - size is an integer that scales the size of the text     //// 
.................... ////       - color is ON or OFF                                      //// 
.................... ////     * Note - This function wraps characters to the next line    //// 
.................... ////              use #define GLCD_WIDTH to specify a display width  //// 
.................... ////                                                                 //// 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2004 Custom Computer Services        //// 
.................... //// This source code may only be used by licensed users of the CCS  //// 
.................... //// C compiler.  This source code may only be distributed to other  //// 
.................... //// licensed users of the CCS C compiler.  No other use,            //// 
.................... //// reproduction or distribution is permitted without written       //// 
.................... //// permission.  Derivative programs created using this software    //// 
.................... //// in object code form are not restricted in any way.              //// 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... //// Defines a 5x7 font 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... const int8 FONT[51][5] ={0x00, 0x00, 0x00, 0x00, 0x00, // SPACE 
....................                          0x00, 0x00, 0x5F, 0x00, 0x00, // ! 
....................                          0x00, 0x03, 0x00, 0x03, 0x00, // " 
....................                          0x14, 0x3E, 0x14, 0x3E, 0x14, // # 
....................                          0x24, 0x2A, 0x7F, 0x2A, 0x12, // $ 
....................                          0x43, 0x33, 0x08, 0x66, 0x61, // % 
....................                          0x36, 0x49, 0x55, 0x22, 0x50, // & 
....................                          0x00, 0x05, 0x03, 0x00, 0x00, // ' 
....................                          0x00, 0x1C, 0x22, 0x41, 0x00, // ( 
....................                          0x00, 0x41, 0x22, 0x1C, 0x00, // ) 
....................                          0x14, 0x08, 0x3E, 0x08, 0x14, // * 
....................                          0x08, 0x08, 0x3E, 0x08, 0x08, // + 
....................                          0x00, 0x50, 0x30, 0x00, 0x00, // , 
....................                          0x08, 0x08, 0x08, 0x08, 0x08, // - 
....................                          0x00, 0x60, 0x60, 0x00, 0x00, // . 
....................                          0x20, 0x10, 0x08, 0x04, 0x02, // / 
....................                          0x3E, 0x51, 0x49, 0x45, 0x3E, // 0 
....................                          0x00, 0x04, 0x02, 0x7F, 0x00, // 1 
....................                          0x42, 0x61, 0x51, 0x49, 0x46, // 2 
....................                          0x22, 0x41, 0x49, 0x49, 0x36, // 3 
....................                          0x18, 0x14, 0x12, 0x7F, 0x10, // 4 
....................                          0x27, 0x45, 0x45, 0x45, 0x39, // 5 
....................                          0x3E, 0x49, 0x49, 0x49, 0x32, // 6 
....................                          0x01, 0x01, 0x71, 0x09, 0x07, // 7 
....................                          0x36, 0x49, 0x49, 0x49, 0x36, // 8 
....................                          0x26, 0x49, 0x49, 0x49, 0x3E, // 9 
....................                          0x00, 0x36, 0x36, 0x00, 0x00, // : 
....................                          0x00, 0x56, 0x36, 0x00, 0x00, // ; 
....................                          0x08, 0x14, 0x22, 0x41, 0x00, // < 
....................                          0x14, 0x14, 0x14, 0x14, 0x14, // = 
....................                          0x00, 0x41, 0x22, 0x14, 0x08, // > 
....................                          0x02, 0x01, 0x51, 0x09, 0x06, // ? 
....................                          0x3E, 0x41, 0x59, 0x55, 0x5E, // @ 
....................                          0x7E, 0x09, 0x09, 0x09, 0x7E, // A 
....................                          0x7F, 0x49, 0x49, 0x49, 0x36, // B 
....................                          0x3E, 0x41, 0x41, 0x41, 0x22, // C 
....................                          0x7F, 0x41, 0x41, 0x41, 0x3E, // D 
....................                          0x7F, 0x49, 0x49, 0x49, 0x41, // E 
....................                          0x7F, 0x09, 0x09, 0x09, 0x01, // F 
....................                          0x3E, 0x41, 0x41, 0x49, 0x3A, // G 
....................                          0x7F, 0x08, 0x08, 0x08, 0x7F, // H 
....................                          0x00, 0x41, 0x7F, 0x41, 0x00, // I 
....................                          0x30, 0x40, 0x40, 0x40, 0x3F, // J 
....................                          0x7F, 0x08, 0x14, 0x22, 0x41, // K 
....................                          0x7F, 0x40, 0x40, 0x40, 0x40, // L 
....................                          0x7F, 0x02, 0x0C, 0x02, 0x7F, // M 
....................                          0x7F, 0x02, 0x04, 0x08, 0x7F, // N 
....................                          0x3E, 0x41, 0x41, 0x41, 0x3E, // O 
....................                          0x7F, 0x09, 0x09, 0x09, 0x06, // P 
....................                          0x1E, 0x21, 0x21, 0x21, 0x5E, // Q 
....................                          0x7F, 0x09, 0x09, 0x09, 0x76};// R 
....................  
.................... const int8 FONT2[44][5]={0x26, 0x49, 0x49, 0x49, 0x32, // S 
....................                          0x01, 0x01, 0x7F, 0x01, 0x01, // T 
....................                          0x3F, 0x40, 0x40, 0x40, 0x3F, // U 
....................                          0x1F, 0x20, 0x40, 0x20, 0x1F, // V 
....................                          0x7F, 0x20, 0x10, 0x20, 0x7F, // W 
....................                          0x41, 0x22, 0x1C, 0x22, 0x41, // X 
....................                          0x07, 0x08, 0x70, 0x08, 0x07, // Y 
....................                          0x61, 0x51, 0x49, 0x45, 0x43, // Z 
....................                          0x00, 0x7F, 0x41, 0x00, 0x00, // [ 
....................                          0x02, 0x04, 0x08, 0x10, 0x20, // \ 
....................                          0x00, 0x00, 0x41, 0x7F, 0x00, // ] 
....................                          0x04, 0x02, 0x01, 0x02, 0x04, // ^ 
....................                          0x40, 0x40, 0x40, 0x40, 0x40, // _ 
....................                          0x00, 0x01, 0x02, 0x04, 0x00, // ` 
....................                          0x20, 0x54, 0x54, 0x54, 0x78, // a 
....................                          0x7F, 0x44, 0x44, 0x44, 0x38, // b 
....................                          0x38, 0x44, 0x44, 0x44, 0x44, // c 
....................                          0x38, 0x44, 0x44, 0x44, 0x7F, // d 
....................                          0x38, 0x54, 0x54, 0x54, 0x18, // e 
....................                          0x04, 0x04, 0x7E, 0x05, 0x05, // f 
....................                          0x08, 0x54, 0x54, 0x54, 0x3C, // g 
....................                          0x7F, 0x08, 0x04, 0x04, 0x78, // h 
....................                          0x00, 0x44, 0x7D, 0x40, 0x00, // i 
....................                          0x20, 0x40, 0x44, 0x3D, 0x00, // j 
....................                          0x7F, 0x10, 0x28, 0x44, 0x00, // k 
....................                          0x00, 0x41, 0x7F, 0x40, 0x00, // l 
....................                          0x7C, 0x04, 0x78, 0x04, 0x78, // m 
....................                          0x7C, 0x08, 0x04, 0x04, 0x78, // n 
....................                          0x38, 0x44, 0x44, 0x44, 0x38, // o 
....................                          0x7C, 0x14, 0x14, 0x14, 0x08, // p 
....................                          0x08, 0x14, 0x14, 0x14, 0x7C, // q 
....................                          0x00, 0x7C, 0x08, 0x04, 0x04, // r 
....................                          0x48, 0x54, 0x54, 0x54, 0x20, // s 
....................                          0x04, 0x04, 0x3F, 0x44, 0x44, // t 
....................                          0x3C, 0x40, 0x40, 0x20, 0x7C, // u 
....................                          0x1C, 0x20, 0x40, 0x20, 0x1C, // v 
....................                          0x3C, 0x40, 0x30, 0x40, 0x3C, // w 
....................                          0x44, 0x28, 0x10, 0x28, 0x44, // x 
....................                          0x0C, 0x50, 0x50, 0x50, 0x3C, // y 
....................                          0x44, 0x64, 0x54, 0x4C, 0x44, // z 
....................                          0x00, 0x08, 0x36, 0x41, 0x41, // { 
....................                          0x00, 0x00, 0x7F, 0x00, 0x00, // | 
....................                          0x41, 0x41, 0x36, 0x08, 0x00, // } 
....................                          0x02, 0x01, 0x02, 0x04, 0x02};// ~ 
.................... ///////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a line on a graphic LCD using Bresenham's 
.................... //                line drawing algorithm 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_line(int8 x1, int8 y1, int8 x2, int8 y2, int1 color) 
.................... { 
....................    int16        dy, dx; 
....................    signed int8  addx=1, addy=1; 
....................    signed int16 P, diff; 
....................  
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................  
....................    if(x1 > x2) 
....................       addx = -1; 
....................    if(y1 > y2) 
....................       addy = -1; 
....................  
....................    if(dx >= dy) 
....................    { 
....................       dy *= 2; 
....................       P = dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(; i<=dx; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       dx *= 2; 
....................       P = dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(; i<=dy; ++i) 
....................       { 
....................          glcd_pixel(x1, y1, color); 
....................  
....................          if(P < 0) 
....................          { 
....................             P  += dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a rectangle on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                fill  - YES or NO 
.................... //                color - ON or OFF 
.................... // Dependencies:  glcd_pixel(), glcd_line() 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_rect(int8 x1, int8 y1, int8 x2, int8 y2, int1 fill, int1 color) 
.................... { 
....................    if(fill) 
....................    { 
....................       int8  i, xmin, xmax, ymin, ymax; 
....................  
....................       if(x1 < x2)                            //  Find x min and max 
....................       { 
....................          xmin = x1; 
....................          xmax = x2; 
....................       } 
....................       else 
....................       { 
....................          xmin = x2; 
....................          xmax = x1; 
....................       } 
....................  
....................       if(y1 < y2)                            // Find the y min and max 
....................       { 
....................          ymin = y1; 
....................          ymax = y2; 
....................       } 
....................       else 
....................       { 
....................          ymin = y2; 
....................          ymax = y1; 
....................       } 
....................  
....................       for(; xmin <= xmax; ++xmin) 
....................       { 
....................          for(i=ymin; i<=ymax; ++i) 
....................          { 
....................             glcd_pixel(xmin, i, color); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       glcd_line(x1, y1, x2, y1, color);      // Draw the 4 sides 
....................       glcd_line(x1, y2, x2, y2, color); 
....................       glcd_line(x1, y1, x1, y2, color); 
....................       glcd_line(x2, y1, x2, y2, color); 
....................    } 
.................... } 
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a bar (wide line) on a graphic LCD 
.................... // Inputs:        (x1, y1) - the start coordinate 
.................... //                (x2, y2) - the end coordinate 
.................... //                width  - The number of pixels wide 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_bar(int8 x1, int8 y1, int8 x2, int8 y2, int8 width, int1 color) 
.................... { 
....................    int8         half_width; 
....................    signed int16 dy, dx; 
....................    signed int8  addx=1, addy=1, j; 
....................    signed int16 P, diff, c1, c2; 
....................  
....................    int8 i=0; 
....................    dx = abs((signed int8)(x2 - x1)); 
....................    dy = abs((signed int8)(y2 - y1)); 
....................  
....................    half_width = width/2; 
....................    c1 = -(dx*x1 + dy*y1); 
....................    c2 = -(dx*x2 + dy*y2); 
....................  
....................    if(x1 > x2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addx = -1; 
....................    } 
....................    if(y1 > y2) 
....................    { 
....................       signed int16 temp; 
....................       temp = c1; 
....................       c1 = c2; 
....................       c2 = temp; 
....................       addy = -1; 
....................    } 
....................  
....................    if(dx >= dy) 
....................    { 
....................       P = 2*dy - dx; 
....................       diff = P - dx; 
....................  
....................       for(i=0; i<=dx; ++i) 
....................       { 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             int8 temp; 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1, y1+j, color); 
....................          } 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dy; 
....................             x1 += addx; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       P = 2*dx - dy; 
....................       diff = P - dy; 
....................  
....................       for(i=0; i<=dy; ++i) 
....................       { 
....................          if(P < 0) 
....................          { 
....................             P  += 2*dx; 
....................             y1 += addy; 
....................          } 
....................          else 
....................          { 
....................             P  += diff; 
....................             x1 += addx; 
....................             y1 += addy; 
....................          } 
....................          for(j=-half_width; j<half_width+width%2; ++j) 
....................          { 
....................             #ifdef LARGE_LCD 
....................             int16 temp; 
....................             #else 
....................             int8 temp; 
....................             #endif 
....................  
....................             temp = dx*x1+dy*(y1+j);    // Use more RAM to increase speed 
....................             if(temp+c1 >= 0 && temp+c2 <=0) 
....................                glcd_pixel(x1+j, y1, color); 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Draw a circle on a graphic LCD 
.................... // Inputs:        (x,y) - the center of the circle 
.................... //                radius - the radius of the circle 
.................... //                fill - YES or NO 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_circle(int8 x, int8 y, int8 radius, int1 fill, int1 color) 
.................... { 
....................    signed int8  a, b, P; 
....................  
....................    a = 0; 
....................    b = radius; 
....................    P = 1 - radius; 
....................  
....................    do 
....................    { 
....................       if(fill) 
....................       { 
....................          glcd_line(x-a, y+b, x+a, y+b, color); 
....................          glcd_line(x-a, y-b, x+a, y-b, color); 
....................          glcd_line(x-b, y+a, x+b, y+a, color); 
....................          glcd_line(x-b, y-a, x+b, y-a, color); 
....................       } 
....................       else 
....................       { 
....................          glcd_pixel(a+x, b+y, color); 
....................          glcd_pixel(b+x, a+y, color); 
....................          glcd_pixel(x-a, b+y, color); 
....................          glcd_pixel(x-b, a+y, color); 
....................          glcd_pixel(b+x, y-a, color); 
....................          glcd_pixel(a+x, y-b, color); 
....................          glcd_pixel(x-a, y-b, color); 
....................          glcd_pixel(x-b, y-a, color); 
....................       } 
....................  
....................       if(P < 0) 
....................          P += 3 + 2 * a++; 
....................       else 
....................          P += 5 + 2 * (a++ - b--); 
....................     } while(a <= b); 
.................... } 
....................  
....................  
.................... ///////////////////////////////////////////////////////////////////////// 
.................... // Purpose:       Write text on a graphic LCD 
.................... // Inputs:        (x,y) - The upper left coordinate of the first letter 
.................... //                textptr - A pointer to an array of text to display 
.................... //                size - The size of the text: 1 = 5x7, 2 = 10x14, ... 
.................... //                color - ON or OFF 
.................... ///////////////////////////////////////////////////////////////////////// 
.................... void glcd_text57(int8 x, int8 y, char* textptr, int8 size, int1 color) 
.................... { 
....................    int8 j, k, l, m;                       // Loop counters 
....................    int8 pixelData[5];                     // Stores character data 
....................  
....................    for(; *textptr != '\0'; ++textptr, ++x)// Loop through the passed string 
....................    { 
....................       if(*textptr < 'S') // Checks if the letter is in the first font array 
....................          memcpy(pixelData, FONT[*textptr - ' '], 5); 
....................       else if(*textptr <= '~') // Check if the letter is in the second font array 
....................          memcpy(pixelData, FONT2[*textptr - 'S'], 5); 
....................       else 
....................          memcpy(pixelData, FONT[0], 5);   // Default to space 
....................  
....................       // Handles newline and carriage returns 
....................       switch(*textptr) 
....................       { 
....................          case '\n': 
....................             y += 7*size + 1; 
....................             continue; 
....................          case '\r': 
....................             x = 0; 
....................             continue; 
....................       } 
....................  
....................       if(x+5*size >= GLCD_WIDTH)          // Performs character wrapping 
....................       { 
....................          x = 0;                           // Set x at far left position 
....................          y += 7*size + 1;                 // Set y at next position down 
....................       } 
....................       for(j=0; j<5; ++j, x+=size)         // Loop through character byte data 
....................       { 
....................          for(k=0; k < 7; ++k)             // Loop through the vertical pixels 
....................          { 
....................             if(bit_test(pixelData[j], k)) // Check if the pixel should be set 
....................             { 
....................                for(l=0; l < size; ++l)    // These two loops change the 
....................                {                          // character's size 
....................                   for(m=0; m < size; ++m) 
....................                   { 
....................                      glcd_pixel(x+m, y+k*size+l, color); // Draws the pixel 
....................                   } 
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
....................  
.................... // 
.................... //Chartable load 
.................... void	CharTableLoad(void){ 
.................... 	int16 i; 
.................... 	SetData2LCD(CHARBASE);	//set adres pointer to chargen area 
*
2C58:  MOVLB  3
2C5A:  CLRF   x53
2C5C:  CLRF   x52
2C5E:  MOVLB  0
2C60:  RCALL  2BB2
2C62:  CLRF   19
2C64:  BTFSC  FF2.7
2C66:  BSF    19.7
2C68:  BCF    FF2.7
.................... 	SetCommandLCD(0x24);	// 
2C6A:  MOVLW  24
2C6C:  MOVLB  3
2C6E:  MOVWF  x63
2C70:  MOVLB  0
2C72:  CALL   1E7A
2C76:  BTFSC  19.7
2C78:  BSF    FF2.7
2C7A:  CLRF   19
2C7C:  BTFSC  FF2.7
2C7E:  BSF    19.7
2C80:  BCF    FF2.7
.................... 	// 
.................... 	SetCommandLCD(0xb0);	//set automode start 
2C82:  MOVLW  B0
2C84:  MOVLB  3
2C86:  MOVWF  x63
2C88:  MOVLB  0
2C8A:  CALL   1E7A
2C8E:  BTFSC  19.7
2C90:  BSF    FF2.7
.................... 	// 
....................     for (i=0;i<FONTDATAMAX; ++i) { 
2C92:  MOVLB  3
2C94:  CLRF   x51
2C96:  CLRF   x50
2C98:  MOVF   x51,W
2C9A:  SUBLW  07
2C9C:  BNC   2CD0
....................      	SetDataLCD(fontdata_6x8[i]); 
2C9E:  MOVFF  351,03
2CA2:  MOVF   x50,W
2CA4:  MOVFF  351,FF7
2CA8:  MOVLB  0
2CAA:  CALL   00BA
2CAE:  MOVLB  3
2CB0:  MOVWF  x52
2CB2:  CLRF   19
2CB4:  BTFSC  FF2.7
2CB6:  BSF    19.7
2CB8:  BCF    FF2.7
2CBA:  MOVWF  x64
2CBC:  MOVLB  0
2CBE:  CALL   1EA4
2CC2:  BTFSC  19.7
2CC4:  BSF    FF2.7
....................     	}; 
2CC6:  MOVLB  3
2CC8:  INCF   x50,F
2CCA:  BTFSC  FD8.2
2CCC:  INCF   x51,F
2CCE:  BRA    2C98
2CD0:  CLRF   19
2CD2:  BTFSC  FF2.7
2CD4:  BSF    19.7
2CD6:  BCF    FF2.7
.................... 	// 
.................... 	SetCommandLCD(0xb2);	//stop automode 
2CD8:  MOVLW  B2
2CDA:  MOVWF  x63
2CDC:  MOVLB  0
2CDE:  CALL   1E7A
2CE2:  BTFSC  19.7
2CE4:  BSF    FF2.7
.................... } 
2CE6:  GOTO   34B6 (RETURN)
.................... // 
.................... //print string 
.................... void	PrintXY(int8 X, int8 Y, char *s){ 
.................... 	SetAddrLCD(TEXTBASE+(int16)X+(int16)Y*COLS);  
*
2166:  CLRF   03
2168:  MOVLB  3
216A:  MOVFF  35F,363
216E:  MOVLW  08
2170:  ADDWF  03,W
2172:  MOVWF  x64
2174:  CLRF   x66
2176:  MOVFF  360,365
217A:  MOVFF  366,368
217E:  MOVFF  360,367
2182:  CLRF   x6A
2184:  MOVLW  14
2186:  MOVWF  x69
2188:  MOVLB  0
218A:  RCALL  2144
218C:  MOVFF  02,03
2190:  MOVF   01,W
2192:  MOVLB  3
2194:  ADDWF  x63,F
2196:  MOVF   02,W
2198:  ADDWFC x64,F
219A:  MOVFF  364,366
219E:  MOVFF  363,365
21A2:  MOVLB  0
21A4:  RCALL  203C
.................... 	SetCommandLCD(0xb0);	//set automode start 
21A6:  MOVLW  B0
21A8:  MOVLB  3
21AA:  MOVWF  x63
21AC:  MOVLB  0
21AE:  RCALL  1E7A
.................... 	while(*s){ 
21B0:  MOVFF  362,03
21B4:  MOVLB  3
21B6:  MOVFF  361,FE9
21BA:  MOVFF  362,FEA
21BE:  MOVF   FEF,F
21C0:  BZ    21E4
.................... 		SetDataLCD(*s++); 
21C2:  MOVFF  362,03
21C6:  MOVF   x61,W
21C8:  INCF   x61,F
21CA:  BTFSC  FD8.2
21CC:  INCF   x62,F
21CE:  MOVWF  FE9
21D0:  MOVFF  03,FEA
21D4:  MOVFF  FEF,363
21D8:  MOVFF  363,364
21DC:  MOVLB  0
21DE:  RCALL  1EA4
.................... 		}; 
21E0:  BRA    21B0
21E2:  MOVLB  3
.................... 	SetCommandLCD(0xb2);	//stop automode 
21E4:  MOVLW  B2
21E6:  MOVWF  x63
21E8:  MOVLB  0
21EA:  RCALL  1E7A
.................... } 
21EC:  RETLW  00
.................... // 
.................... //clear text screen 
.................... void	ClrTxt(void){ 
.................... 	int16 i; 
.................... 	SetAddrLCD(TEXTBASE);  
*
2106:  MOVLW  08
2108:  MOVLB  3
210A:  MOVWF  x66
210C:  CLRF   x65
210E:  MOVLB  0
2110:  RCALL  203C
.................... 	SetCommandLCD(0xb0);	//set automode start 
2112:  MOVLW  B0
2114:  MOVLB  3
2116:  MOVWF  x63
2118:  MOVLB  0
211A:  RCALL  1E7A
.................... 	for(i=1; i<GRAPHBASE; i++){ 
211C:  MOVLB  3
211E:  CLRF   x60
2120:  MOVLW  01
2122:  MOVWF  x5F
2124:  MOVF   x60,W
2126:  SUBLW  09
2128:  BNC   213A
.................... 		SetDataLCD(0x00); 
212A:  CLRF   x64
212C:  MOVLB  0
212E:  RCALL  1EA4
.................... 		}; 
2130:  MOVLB  3
2132:  INCF   x5F,F
2134:  BTFSC  FD8.2
2136:  INCF   x60,F
2138:  BRA    2124
.................... 	SetCommandLCD(0xb2);	//stop automode 
213A:  MOVLW  B2
213C:  MOVWF  x63
213E:  MOVLB  0
2140:  RCALL  1E7A
.................... } 
2142:  RETLW  00
.................... // 
.................... //clear graph screen 
.................... void	ClrGrph(void){ 
*
2CEA:  CLRF   19
2CEC:  BTFSC  FF2.7
2CEE:  BSF    19.7
2CF0:  BCF    FF2.7
.................... 	int16 i; 
.................... 	SetAddrLCD(GRAPHBASE);  
2CF2:  MOVLW  0A
2CF4:  MOVLB  3
2CF6:  MOVWF  x66
2CF8:  CLRF   x65
2CFA:  MOVLB  0
2CFC:  CALL   203C
2D00:  BTFSC  19.7
2D02:  BSF    FF2.7
2D04:  CLRF   19
2D06:  BTFSC  FF2.7
2D08:  BSF    19.7
2D0A:  BCF    FF2.7
.................... 	SetCommandLCD(0xb0);	//set automode start 
2D0C:  MOVLW  B0
2D0E:  MOVLB  3
2D10:  MOVWF  x63
2D12:  MOVLB  0
2D14:  CALL   1E7A
2D18:  BTFSC  19.7
2D1A:  BSF    FF2.7
.................... 	for(i=1; i<(GRAPHBASE+8*ROWS*COLS); i++){ 
2D1C:  MOVLB  3
2D1E:  CLRF   x51
2D20:  MOVLW  01
2D22:  MOVWF  x50
2D24:  MOVF   x51,W
2D26:  SUBLW  13
2D28:  BNC   2D48
2D2A:  CLRF   19
2D2C:  BTFSC  FF2.7
2D2E:  BSF    19.7
2D30:  BCF    FF2.7
.................... 		SetDataLCD(0x00); 
2D32:  CLRF   x64
2D34:  MOVLB  0
2D36:  CALL   1EA4
2D3A:  BTFSC  19.7
2D3C:  BSF    FF2.7
.................... 		}; 
2D3E:  MOVLB  3
2D40:  INCF   x50,F
2D42:  BTFSC  FD8.2
2D44:  INCF   x51,F
2D46:  BRA    2D24
2D48:  CLRF   19
2D4A:  BTFSC  FF2.7
2D4C:  BSF    19.7
2D4E:  BCF    FF2.7
.................... 	SetCommandLCD(0xb2);	//stop automode 
2D50:  MOVLW  B2
2D52:  MOVWF  x63
2D54:  MOVLB  0
2D56:  CALL   1E7A
2D5A:  BTFSC  19.7
2D5C:  BSF    FF2.7
.................... } 
2D5E:  GOTO   35AA (RETURN)
.................... // 
.................... // 
....................  
....................  
.................... //Global variables 
.................... static	int16	Speed;		//host speed 
.................... static	int16	Addr;		//host address 
.................... static	int16	ValPot0;	//output range value 
.................... static	int16	ValPot1;	//output range value 
.................... static	int16	ValOut0;	//output value 
.................... static	int16	ValOut1;	//output value 
.................... //keyboard 
.................... static	int16	ScanCode;	//keyboard scan code 
.................... static	int16	Relay;		//relay state 
.................... //Relay 
.................... void	SetRelay(int16 rel){ 
.................... 	//out0 
.................... 	if(rel&0x0001){ 
*
1876:  MOVLB  3
1878:  MOVF   x60,W
187A:  ANDLW  01
187C:  MOVWF  00
187E:  CLRF   03
1880:  MOVF   00,W
1882:  IORWF  03,W
1884:  BZ    188C
.................... 		output_high(OUT0); 
1886:  BCF    F96.0
1888:  BSF    F8D.0
.................... 	}else	output_low(OUT0); 
188A:  BRA    1890
188C:  BCF    F96.0
188E:  BCF    F8D.0
.................... 	//out1 
.................... 	if(rel&0x0002){ 
1890:  MOVF   x60,W
1892:  ANDLW  02
1894:  MOVWF  00
1896:  CLRF   03
1898:  MOVF   00,W
189A:  IORWF  03,W
189C:  BZ    18A4
.................... 		output_high(OUT1); 
189E:  BCF    F96.1
18A0:  BSF    F8D.1
.................... 	}else	output_low(OUT1); 
18A2:  BRA    18A8
18A4:  BCF    F96.1
18A6:  BCF    F8D.1
.................... 	//out2 
.................... 	if(rel&0x0004){ 
18A8:  MOVF   x60,W
18AA:  ANDLW  04
18AC:  MOVWF  00
18AE:  CLRF   03
18B0:  MOVF   00,W
18B2:  IORWF  03,W
18B4:  BZ    18BC
.................... 		output_high(OUT2); 
18B6:  BCF    F94.0
18B8:  BSF    F8B.0
.................... 	}else	output_low(OUT2); 
18BA:  BRA    18C0
18BC:  BCF    F94.0
18BE:  BCF    F8B.0
.................... } 
18C0:  MOVLB  0
18C2:  GOTO   1D0A (RETURN)
.................... // 
.................... //Peripherals setup 
.................... void	InitMcu(void){		//initialization of MCU 
.................... 	 
....................    //oscillator configuration 
....................    setup_oscillator(OSC_32MHZ|OSC_NORMAL|OSC_31250); 
*
2A28:  MOVLW  70
2A2A:  MOVWF  FD3
2A2C:  MOVLW  C0
2A2E:  MOVWF  F9B
2A30:  MOVF   FD3,W
....................    //disable PSP 
....................    setup_psp(PSP_DISABLED); 
2A32:  BCF    F96.4
....................    //WDT config 
....................    setup_wdt(WDT_ON); 
2A34:  BSF    FD1.0
....................    //disable comparators 
....................    setup_comparator(NC_NC_NC_NC); 
2A36:  MOVLW  07
2A38:  MOVWF  FB4
2A3A:  MOVF   F92,W
2A3C:  MOVWF  F92
2A3E:  CLRWDT
2A40:  MOVLW  1A
2A42:  MOVWF  00
2A44:  DECFSZ 00,F
2A46:  BRA    2A44
2A48:  MOVF   FB4,W
2A4A:  BCF    FA1.6
....................    setup_vref(FALSE); 
2A4C:  CLRF   FB5
....................    //config ADC module 
....................    setup_adc_ports(NO_ANALOGS); 
2A4E:  MOVF   FC1,W
2A50:  ANDLW  C0
2A52:  IORLW  0F
2A54:  MOVWF  FC1
....................    setup_adc(ADC_OFF); 
2A56:  BCF    FC2.0
....................     
....................    //port configuration 
....................    port_b_pullups(true); 
2A58:  BCF    FF1.7
....................    set_tris_b(0xff); 
2A5A:  MOVLW  FF
2A5C:  MOVWF  F93
....................    //set high all selectors 
....................    output_high(DAC0); 
2A5E:  BCF    F92.4
2A60:  BSF    F89.4
....................    output_high(DAC1); 
2A62:  BCF    F92.5
2A64:  BSF    F89.5
....................    output_high(POT0); 
2A66:  BCF    F92.6
2A68:  BSF    F89.6
....................    output_high(POT1); 
2A6A:  BCF    F92.7
2A6C:  BSF    F89.7
....................    output_high(STAT); 
2A6E:  BCF    F94.1
2A70:  BSF    F8B.1
....................    output_low(TR_DIR);	//receive mode 
2A72:  BCF    F94.2
2A74:  BCF    F8B.2
....................    output_high(LCD_BL); 
2A76:  BCF    F96.2
2A78:  BSF    F8D.2
....................    output_high(_WR); 
2A7A:  BCF    F92.0
2A7C:  BSF    F89.0
....................    output_high(_RD); 
2A7E:  BCF    F92.1
2A80:  BSF    F89.1
....................    output_high(_CE); 
2A82:  BCF    F92.2
2A84:  BSF    F89.2
....................    output_high(C_D); 
2A86:  BCF    F92.3
2A88:  BSF    F89.3
....................     
....................    output_low(OUT0); 
2A8A:  BCF    F96.0
2A8C:  BCF    F8D.0
....................    output_low(OUT1); 
2A8E:  BCF    F96.1
2A90:  BCF    F8D.1
....................    output_low(OUT2); 
2A92:  BCF    F94.0
2A94:  BCF    F8B.0
....................     
....................     
....................    //timers configuration 
....................    setup_timer_0(RTCC_INTERNAL | RTCC_DIV_64 | RTCC_8_BIT); 
2A96:  MOVLW  C5
2A98:  MOVWF  FD5
....................     
....................    setup_timer_1(T1_INTERNAL | T1_DIV_BY_8);	//setup 1uS increment period 
2A9A:  MOVLW  B5
2A9C:  MOVWF  FCD
....................     
....................    setup_timer_2(T2_DISABLED,0,1); 
2A9E:  MOVLW  00
2AA0:  MOVWF  FCA
2AA2:  MOVLW  00
2AA4:  MOVWF  FCB
....................     
....................    setup_timer_3(T3_DISABLED|T3_DIV_BY_1); 
2AA6:  CLRF   FB1
....................    //setup communications 
....................    //setup usart 
....................    output_low(TR_DIR);	//enable receiving 
2AA8:  BCF    F94.2
2AAA:  BCF    F8B.2
....................    //SPI configuration 
....................    setup_spi(SPI_MASTER|SPI_CLK_DIV_4|SPI_H_TO_L); 
2AAC:  BCF    FC6.5
2AAE:  BCF    F94.5
2AB0:  BSF    F94.4
2AB2:  BCF    F94.3
2AB4:  MOVLW  30
2AB6:  MOVWF  FC6
2AB8:  MOVLW  40
2ABA:  MOVWF  FC7
.................... } 
2ABC:  GOTO   3426 (RETURN)
.................... // 
.................... //read registers from EE 
.................... void	BURead(void){	//back up read 
.................... 	//reading 
.................... 	Speed=make16(read_eeprom(EE_Speed+1),read_eeprom(EE_Speed)); // 
2AC0:  MOVFF  FF2,350
2AC4:  BCF    FF2.7
2AC6:  MOVLW  01
2AC8:  MOVWF  FA9
2ACA:  BCF    FA6.6
2ACC:  BCF    FA6.7
2ACE:  BSF    FA6.0
2AD0:  MOVF   FA8,W
2AD2:  MOVLB  3
2AD4:  BTFSC  x50.7
2AD6:  BSF    FF2.7
2AD8:  MOVWF  x51
2ADA:  MOVFF  FF2,352
2ADE:  BCF    FF2.7
2AE0:  CLRF   FA9
2AE2:  BCF    FA6.6
2AE4:  BCF    FA6.7
2AE6:  BSF    FA6.0
2AE8:  MOVF   FA8,W
2AEA:  BTFSC  x52.7
2AEC:  BSF    FF2.7
2AEE:  MOVWF  x53
2AF0:  MOVFF  351,125
2AF4:  MOVFF  353,124
.................... 	Addr=make16(read_eeprom(EE_Host+1),read_eeprom(EE_Host)); // 
2AF8:  MOVFF  FF2,350
2AFC:  BCF    FF2.7
2AFE:  MOVLW  03
2B00:  MOVWF  FA9
2B02:  BCF    FA6.6
2B04:  BCF    FA6.7
2B06:  BSF    FA6.0
2B08:  MOVF   FA8,W
2B0A:  BTFSC  x50.7
2B0C:  BSF    FF2.7
2B0E:  MOVWF  x51
2B10:  MOVFF  FF2,352
2B14:  BCF    FF2.7
2B16:  MOVLW  02
2B18:  MOVWF  FA9
2B1A:  BCF    FA6.6
2B1C:  BCF    FA6.7
2B1E:  BSF    FA6.0
2B20:  MOVF   FA8,W
2B22:  BTFSC  x52.7
2B24:  BSF    FF2.7
2B26:  MOVWF  x53
2B28:  MOVFF  351,127
2B2C:  MOVFF  353,126
.................... 	ValPot0=make16(read_eeprom(EE_POT0+1),read_eeprom(EE_POT0)); // 
2B30:  MOVFF  FF2,350
2B34:  BCF    FF2.7
2B36:  MOVLW  05
2B38:  MOVWF  FA9
2B3A:  BCF    FA6.6
2B3C:  BCF    FA6.7
2B3E:  BSF    FA6.0
2B40:  MOVF   FA8,W
2B42:  BTFSC  x50.7
2B44:  BSF    FF2.7
2B46:  MOVWF  x51
2B48:  MOVFF  FF2,352
2B4C:  BCF    FF2.7
2B4E:  MOVLW  04
2B50:  MOVWF  FA9
2B52:  BCF    FA6.6
2B54:  BCF    FA6.7
2B56:  BSF    FA6.0
2B58:  MOVF   FA8,W
2B5A:  BTFSC  x52.7
2B5C:  BSF    FF2.7
2B5E:  MOVWF  x53
2B60:  MOVFF  351,129
2B64:  MOVFF  353,128
.................... 	ValPot1=make16(read_eeprom(EE_POT1+1),read_eeprom(EE_POT1)); // 
2B68:  MOVFF  FF2,350
2B6C:  BCF    FF2.7
2B6E:  MOVLW  07
2B70:  MOVWF  FA9
2B72:  BCF    FA6.6
2B74:  BCF    FA6.7
2B76:  BSF    FA6.0
2B78:  MOVF   FA8,W
2B7A:  BTFSC  x50.7
2B7C:  BSF    FF2.7
2B7E:  MOVWF  x51
2B80:  MOVFF  FF2,352
2B84:  BCF    FF2.7
2B86:  MOVLW  06
2B88:  MOVWF  FA9
2B8A:  BCF    FA6.6
2B8C:  BCF    FA6.7
2B8E:  BSF    FA6.0
2B90:  MOVF   FA8,W
2B92:  BTFSC  x52.7
2B94:  BSF    FF2.7
2B96:  MOVWF  x53
2B98:  MOVFF  351,12B
2B9C:  MOVFF  353,12A
.................... } 
2BA0:  MOVLB  0
2BA2:  GOTO   342A (RETURN)
.................... // 
.................... //write registers to EE 
.................... void	BUWrite(void){	//back up write 
.................... 	setup_wdt(WDT_OFF); 
*
1ED2:  BCF    FD1.0
.................... 	//writing 
.................... 	//int16 
.................... 	write_eeprom(EE_Speed,make8(Speed,0));		write_eeprom(EE_Speed+1,make8(Speed,1)); 
1ED4:  MOVFF  124,35F
1ED8:  CLRF   FA9
1EDA:  MOVFF  35F,FA8
1EDE:  BCF    FA6.6
1EE0:  BCF    FA6.7
1EE2:  BSF    FA6.2
1EE4:  MOVF   FF2,W
1EE6:  MOVWF  00
1EE8:  BCF    FF2.7
1EEA:  MOVLB  F
1EEC:  MOVLW  55
1EEE:  MOVWF  FA7
1EF0:  MOVLW  AA
1EF2:  MOVWF  FA7
1EF4:  BSF    FA6.1
1EF6:  BTFSC  FA6.1
1EF8:  BRA    1EF6
1EFA:  BCF    FA6.2
1EFC:  MOVF   00,W
1EFE:  IORWF  FF2,F
1F00:  MOVFF  125,35F
1F04:  MOVLW  01
1F06:  MOVWF  FA9
1F08:  MOVFF  35F,FA8
1F0C:  BCF    FA6.6
1F0E:  BCF    FA6.7
1F10:  BSF    FA6.2
1F12:  MOVF   FF2,W
1F14:  MOVWF  00
1F16:  BCF    FF2.7
1F18:  MOVLW  55
1F1A:  MOVWF  FA7
1F1C:  MOVLW  AA
1F1E:  MOVWF  FA7
1F20:  BSF    FA6.1
1F22:  BTFSC  FA6.1
1F24:  BRA    1F22
1F26:  BCF    FA6.2
1F28:  MOVF   00,W
1F2A:  IORWF  FF2,F
.................... 	write_eeprom(EE_Host,make8(Addr,0));		write_eeprom(EE_Host+1,make8(Addr,1)); 
1F2C:  MOVFF  126,35F
1F30:  MOVLW  02
1F32:  MOVWF  FA9
1F34:  MOVFF  126,FA8
1F38:  BCF    FA6.6
1F3A:  BCF    FA6.7
1F3C:  BSF    FA6.2
1F3E:  MOVFF  FF2,00
1F42:  BCF    FF2.7
1F44:  MOVLW  55
1F46:  MOVWF  FA7
1F48:  MOVLW  AA
1F4A:  MOVWF  FA7
1F4C:  BSF    FA6.1
1F4E:  BTFSC  FA6.1
1F50:  BRA    1F4E
1F52:  BCF    FA6.2
1F54:  MOVF   00,W
1F56:  IORWF  FF2,F
1F58:  MOVFF  127,35F
1F5C:  MOVLW  03
1F5E:  MOVWF  FA9
1F60:  MOVFF  127,FA8
1F64:  BCF    FA6.6
1F66:  BCF    FA6.7
1F68:  BSF    FA6.2
1F6A:  MOVFF  FF2,00
1F6E:  BCF    FF2.7
1F70:  MOVLW  55
1F72:  MOVWF  FA7
1F74:  MOVLW  AA
1F76:  MOVWF  FA7
1F78:  BSF    FA6.1
1F7A:  BTFSC  FA6.1
1F7C:  BRA    1F7A
1F7E:  BCF    FA6.2
1F80:  MOVF   00,W
1F82:  IORWF  FF2,F
.................... 	write_eeprom(EE_POT0,make8(ValPot0,0));		write_eeprom(EE_POT0+1,make8(ValPot0,1)); 
1F84:  MOVFF  128,35F
1F88:  MOVLW  04
1F8A:  MOVWF  FA9
1F8C:  MOVFF  128,FA8
1F90:  BCF    FA6.6
1F92:  BCF    FA6.7
1F94:  BSF    FA6.2
1F96:  MOVFF  FF2,00
1F9A:  BCF    FF2.7
1F9C:  MOVLW  55
1F9E:  MOVWF  FA7
1FA0:  MOVLW  AA
1FA2:  MOVWF  FA7
1FA4:  BSF    FA6.1
1FA6:  BTFSC  FA6.1
1FA8:  BRA    1FA6
1FAA:  BCF    FA6.2
1FAC:  MOVF   00,W
1FAE:  IORWF  FF2,F
1FB0:  MOVFF  129,35F
1FB4:  MOVLW  05
1FB6:  MOVWF  FA9
1FB8:  MOVFF  129,FA8
1FBC:  BCF    FA6.6
1FBE:  BCF    FA6.7
1FC0:  BSF    FA6.2
1FC2:  MOVFF  FF2,00
1FC6:  BCF    FF2.7
1FC8:  MOVLW  55
1FCA:  MOVWF  FA7
1FCC:  MOVLW  AA
1FCE:  MOVWF  FA7
1FD0:  BSF    FA6.1
1FD2:  BTFSC  FA6.1
1FD4:  BRA    1FD2
1FD6:  BCF    FA6.2
1FD8:  MOVF   00,W
1FDA:  IORWF  FF2,F
.................... 	write_eeprom(EE_POT1,make8(ValPot1,0));		write_eeprom(EE_POT1+1,make8(ValPot1,1)); 
1FDC:  MOVFF  12A,35F
1FE0:  MOVLW  06
1FE2:  MOVWF  FA9
1FE4:  MOVFF  12A,FA8
1FE8:  BCF    FA6.6
1FEA:  BCF    FA6.7
1FEC:  BSF    FA6.2
1FEE:  MOVFF  FF2,00
1FF2:  BCF    FF2.7
1FF4:  MOVLW  55
1FF6:  MOVWF  FA7
1FF8:  MOVLW  AA
1FFA:  MOVWF  FA7
1FFC:  BSF    FA6.1
1FFE:  BTFSC  FA6.1
2000:  BRA    1FFE
2002:  BCF    FA6.2
2004:  MOVF   00,W
2006:  IORWF  FF2,F
2008:  MOVFF  12B,35F
200C:  MOVLW  07
200E:  MOVWF  FA9
2010:  MOVFF  12B,FA8
2014:  BCF    FA6.6
2016:  BCF    FA6.7
2018:  BSF    FA6.2
201A:  MOVFF  FF2,00
201E:  BCF    FF2.7
2020:  MOVLW  55
2022:  MOVWF  FA7
2024:  MOVLW  AA
2026:  MOVWF  FA7
2028:  BSF    FA6.1
202A:  BTFSC  FA6.1
202C:  BRA    202A
202E:  BCF    FA6.2
2030:  MOVF   00,W
2032:  IORWF  FF2,F
.................... 	 
.................... 	setup_wdt(WDT_ON); 
2034:  BSF    FD1.0
.................... } 
2036:  MOVLB  0
2038:  GOTO   2518 (RETURN)
.................... // 
.................... //Setup analog channel 0 
.................... //Range 
.................... void	SetAoutRange0(int16 value){ 
.................... 	output_low(POT0);	//select chip 
*
1952:  BCF    F92.6
1954:  BCF    F89.6
.................... 	delay_us(5); 
1956:  CLRWDT
1958:  MOVLW  0C
195A:  MOVWF  00
195C:  DECFSZ 00,F
195E:  BRA    195C
1960:  BRA    1962
.................... 	spi_write(0x11);	//send command 
1962:  MOVF   FC9,W
1964:  MOVLW  11
1966:  MOVWF  FC9
1968:  RRCF   FC7,W
196A:  BNC   1968
.................... 	restart_wdt(); 
196C:  CLRWDT
.................... 	spi_write(make8(value,0));	//send LSB of value 
196E:  MOVFF  360,362
1972:  MOVF   FC9,W
1974:  MOVFF  360,FC9
1978:  RRCF   FC7,W
197A:  BNC   1978
.................... 	delay_us(5); 
197C:  CLRWDT
197E:  MOVLW  0C
1980:  MOVWF  00
1982:  DECFSZ 00,F
1984:  BRA    1982
1986:  BRA    1988
.................... 	output_high(POT0); 
1988:  BCF    F92.6
198A:  BSF    F89.6
.................... } 
198C:  RETLW  00
.................... void	SetAoutRange1(int16 value){ 
.................... 	output_low(POT1);	//select chip 
198E:  BCF    F92.7
1990:  BCF    F89.7
.................... 	delay_us(5); 
1992:  CLRWDT
1994:  MOVLW  0C
1996:  MOVWF  00
1998:  DECFSZ 00,F
199A:  BRA    1998
199C:  BRA    199E
.................... 	spi_write(0x11);	//send command 
199E:  MOVF   FC9,W
19A0:  MOVLW  11
19A2:  MOVWF  FC9
19A4:  RRCF   FC7,W
19A6:  BNC   19A4
.................... 	restart_wdt(); 
19A8:  CLRWDT
.................... 	spi_write(make8(value,0));	//send LSB of value 
19AA:  MOVFF  360,362
19AE:  MOVF   FC9,W
19B0:  MOVFF  360,FC9
19B4:  RRCF   FC7,W
19B6:  BNC   19B4
.................... 	delay_us(5); 
19B8:  CLRWDT
19BA:  MOVLW  0C
19BC:  MOVWF  00
19BE:  DECFSZ 00,F
19C0:  BRA    19BE
19C2:  BRA    19C4
.................... 	output_high(POT1); 
19C4:  BCF    F92.7
19C6:  BSF    F89.7
.................... } 
19C8:  RETLW  00
.................... //level 
.................... void	SetOutDac0(int16 value){ 
.................... 	output_low(DAC0);	//select chip 
*
18C6:  BCF    F92.4
18C8:  BCF    F89.4
.................... 	delay_us(5); 
18CA:  CLRWDT
18CC:  MOVLW  0C
18CE:  MOVWF  00
18D0:  DECFSZ 00,F
18D2:  BRA    18D0
18D4:  BRA    18D6
.................... 	spi_write((make8(value,1)&0x0f)|0x10);	//send high part 
18D6:  MOVLB  3
18D8:  MOVF   x61,W
18DA:  ANDLW  0F
18DC:  IORLW  10
18DE:  MOVWF  x62
18E0:  MOVF   FC9,W
18E2:  MOVFF  362,FC9
18E6:  RRCF   FC7,W
18E8:  BNC   18E6
.................... 	spi_write(make8(value,0));				//send low part 
18EA:  MOVFF  360,362
18EE:  MOVF   FC9,W
18F0:  MOVFF  360,FC9
18F4:  RRCF   FC7,W
18F6:  BNC   18F4
.................... 	delay_us(5); 
18F8:  CLRWDT
18FA:  MOVLW  0C
18FC:  MOVWF  00
18FE:  DECFSZ 00,F
1900:  BRA    18FE
1902:  BRA    1904
.................... 	output_high(DAC0); 
1904:  BCF    F92.4
1906:  BSF    F89.4
.................... } 
1908:  MOVLB  0
190A:  RETLW  00
.................... void	SetOutDac1(int16 value){ 
.................... 	output_low(DAC1);	//select chip 
190C:  BCF    F92.5
190E:  BCF    F89.5
.................... 	delay_us(5); 
1910:  CLRWDT
1912:  MOVLW  0C
1914:  MOVWF  00
1916:  DECFSZ 00,F
1918:  BRA    1916
191A:  BRA    191C
.................... 	spi_write((make8(value,1)&0x0f)|0x10);	//send high part 
191C:  MOVLB  3
191E:  MOVF   x61,W
1920:  ANDLW  0F
1922:  IORLW  10
1924:  MOVWF  x62
1926:  MOVF   FC9,W
1928:  MOVFF  362,FC9
192C:  RRCF   FC7,W
192E:  BNC   192C
.................... 	spi_write(make8(value,0));				//send low part 
1930:  MOVFF  360,362
1934:  MOVF   FC9,W
1936:  MOVFF  360,FC9
193A:  RRCF   FC7,W
193C:  BNC   193A
.................... 	delay_us(5); 
193E:  CLRWDT
1940:  MOVLW  0C
1942:  MOVWF  00
1944:  DECFSZ 00,F
1946:  BRA    1944
1948:  BRA    194A
.................... 	output_high(DAC1); 
194A:  BCF    F92.5
194C:  BSF    F89.5
.................... } 
194E:  MOVLB  0
1950:  RETLW  00
.................... // 
.................... static	int16	keyPort=0xffff;	//current keys state 
.................... static	int16	keyPrev=0xffff;	//previous state of keys 
.................... static	int8	debTimer=0;	//debounce timer 
.................... static	int8	keyRows[4];		 
....................  
.................... #use fast_io(B) 
.................... //keyboard scanning 
.................... void	KeyScan(void){ 
.................... 	int8	i; 
.................... 	output_b(0);	//clear latch of B 
*
2EA6:  CLRF   F8A
.................... 	//read keys 
.................... 	for(i=0;i<4;i++){ 
2EA8:  MOVLB  3
2EAA:  CLRF   x50
2EAC:  MOVF   x50,W
2EAE:  SUBLW  03
2EB0:  BNC   2EEE
.................... 		restart_wdt(); 
2EB2:  CLRWDT
.................... 		set_tris_b(0xff^(0x01<<i));	//select row 
2EB4:  MOVLW  01
2EB6:  MOVWF  00
2EB8:  MOVF   x50,W
2EBA:  MOVWF  01
2EBC:  BZ    2EC6
2EBE:  BCF    FD8.0
2EC0:  RLCF   00,F
2EC2:  DECFSZ 01,F
2EC4:  BRA    2EBE
2EC6:  MOVF   00,W
2EC8:  XORLW  FF
2ECA:  MOVWF  F93
.................... 		delay_us(10);	//wait 
2ECC:  CLRWDT
2ECE:  MOVLW  1A
2ED0:  MOVWF  00
2ED2:  DECFSZ 00,F
2ED4:  BRA    2ED2
.................... 		keyRows[i]=input_b()&0xf0;			//read port 
2ED6:  CLRF   03
2ED8:  MOVF   x50,W
2EDA:  ADDLW  39
2EDC:  MOVWF  FE9
2EDE:  MOVLW  01
2EE0:  ADDWFC 03,W
2EE2:  MOVWF  FEA
2EE4:  MOVF   F81,W
2EE6:  ANDLW  F0
2EE8:  MOVWF  FEF
.................... 	}; 
2EEA:  INCF   x50,F
2EEC:  BRA    2EAC
.................... 	set_tris_b(0xff); 
2EEE:  MOVLW  FF
2EF0:  MOVWF  F93
.................... 	//combine 
.................... 	keyPort=make16((keyRows[0]|swap(keyRows[1])),(keyRows[2]|swap(keyRows[3]))); 
2EF2:  MOVLB  1
2EF4:  SWAPF  x3A,F
2EF6:  MOVF   x39,W
2EF8:  IORWF  x3A,W
2EFA:  MOVLB  3
2EFC:  MOVWF  x51
2EFE:  MOVLB  1
2F00:  SWAPF  x3C,F
2F02:  MOVF   x3B,W
2F04:  IORWF  x3C,W
2F06:  MOVLB  3
2F08:  MOVFF  351,135
2F0C:  MOVFF  FE8,134
.................... 	//debounce 
.................... 	if(keyPort^keyPrev){	 
2F10:  MOVLB  1
2F12:  MOVF   x34,W
2F14:  XORWF  x36,W
2F16:  MOVWF  00
2F18:  MOVF   x35,W
2F1A:  XORWF  x37,W
2F1C:  MOVWF  03
2F1E:  MOVF   00,W
2F20:  IORWF  03,W
2F22:  BZ    2F2A
.................... 		debTimer=0;	//if state change -reset timer 
2F24:  CLRF   x38
.................... 		ScanCode=0;	//reset scancode 
2F26:  CLRF   x31
2F28:  CLRF   x30
.................... 		}; 
.................... 	if(debTimer>19){		//if debounced 
2F2A:  MOVF   x38,W
2F2C:  SUBLW  13
2F2E:  BC    2F5E
.................... 		if((keyPort^0xffff)!=0){ 
2F30:  MOVF   x34,W
2F32:  XORLW  FF
2F34:  MOVLB  3
2F36:  MOVWF  x51
2F38:  MOVLB  1
2F3A:  MOVF   x35,W
2F3C:  XORLW  FF
2F3E:  MOVLB  3
2F40:  MOVWF  x52
2F42:  MOVF   x51,F
2F44:  BNZ   2F4A
2F46:  MOVF   x52,F
2F48:  BZ    2F5A
.................... 			ScanCode=keyPort^0xffff; 
2F4A:  MOVLB  1
2F4C:  MOVF   x34,W
2F4E:  XORLW  FF
2F50:  MOVWF  x30
2F52:  MOVF   x35,W
2F54:  XORLW  FF
2F56:  MOVWF  x31
2F58:  MOVLB  3
.................... 			};			// if key pressed - store inversed 
.................... 		}else	debTimer++;	//else inc 
2F5A:  BRA    2F62
2F5C:  MOVLB  1
2F5E:  INCF   x38,F
2F60:  MOVLB  3
.................... 	keyPrev=keyPort;		//store state 
2F62:  MOVFF  135,137
2F66:  MOVFF  134,136
.................... 	restart_wdt(); 
2F6A:  CLRWDT
.................... } 
2F6C:  MOVLB  0
2F6E:  GOTO   380A (RETURN)
.................... // 
.................... //ISR 
.................... #include "modbus_isr.h" 
.................... //modbus realization 
.................... // 
.................... //values 
.................... enum modbus_exceptions{ 
.................... 	illegal_function=1, 
.................... 	illegal_data_address=2, 
.................... 	illegal_data_value=3, 
.................... 	slave_device_failure=4, 
.................... 	acknowledge=5, 
.................... 	slave_device_busy=6 
.................... }; 
.................... static 	int8	MB_Buffer[512];		//incoming buffer 
.................... static	int16	MB_Length;			//message length 
.................... static	int16	ValidReq;			//valid req count 
.................... static	int16	CRCReq;				//CRC error count 
.................... static	int16	ExcReq;				//ecxcept error count 
.................... // 
.................... //CRC table 
.................... /* Table of CRC values for highorder byte */ 
.................... const int8 modbus_auchCRCHi[] = { 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
....................    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 
....................    0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
....................    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 
....................    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
....................    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 
....................    0x40 
.................... }; 
....................  
.................... /* Table of CRC values for loworder byte */ 
.................... const int8 modbus_auchCRCLo[] = { 
....................    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 
....................    0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 
....................    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 
....................    0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
....................    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 
....................    0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 
....................    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 
....................    0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
....................    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 
....................    0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
....................    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 
....................    0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
....................    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 
....................    0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 
....................    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 
....................    0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
....................    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 
....................    0x40 
.................... }; 
.................... //procedures 
.................... // 
.................... // 
.................... //UART preset 
.................... #USE RS232(baud=19200, xmit=TX, rcv=RX, enable=TR_DIR, parity=N) 
*
2220:  BCF    F94.2
2222:  BSF    F8B.2
2224:  BTFSS  F9E.4
2226:  BRA    2224
2228:  MOVLB  3
222A:  MOVFF  360,FAD
222E:  NOP   
2230:  BCF    F94.2
2232:  BSF    F8B.2
2234:  BTFSS  FAC.1
2236:  BRA    2234
2238:  BCF    F94.2
223A:  BCF    F8B.2
223C:  MOVLB  0
223E:  GOTO   29AC (RETURN)
.................... void	RsInit(void){ 
.................... 	MB_Length=0;	//set clear buffer 
*
2BA6:  MOVLB  3
2BA8:  CLRF   x3E
2BAA:  CLRF   x3D
.................... 	//select rate 
.................... /*	switch(Speed){ 
.................... 		case	1200:	setup_uart(1200); 
.................... 						break; 
.................... 		case	1800:	setup_uart(1800); 
.................... 						break; 
.................... 		case	2400:	setup_uart(2400); 
.................... 						break; 
.................... 		case	4800:	setup_uart(4800); 
.................... 						break; 
.................... 		case	7200:	setup_uart(7200); 
.................... 						break; 
.................... 		case	9600:	setup_uart(9600); 
.................... 						break; 
.................... 		case	14400:	setup_uart(14400); 
.................... 						break; 
.................... 		case	19200:	setup_uart(19200); 
.................... 						break; 
.................... 		default:		setup_uart(9600); 
.................... 	};	*/ 
.................... } 
2BAC:  MOVLB  0
2BAE:  GOTO   342E (RETURN)
.................... // 
....................  
.................... //usart settings 
....................  
.................... //usart interrupt vector - packet interception 
.................... #INT_RDA 
.................... void	Incoming(void){ 
.................... 	MB_Buffer[MB_Length]=getc();	//read stream 
*
0B7E:  MOVLW  3D
0B80:  MOVLB  3
0B82:  ADDWF  x3D,W
0B84:  MOVWF  FE9
0B86:  MOVLW  01
0B88:  ADDWFC x3E,W
0B8A:  MOVWF  FEA
0B8C:  BTFSS  F9E.5
0B8E:  BRA    0B8C
0B90:  MOVFF  FAE,FEF
.................... 	MB_Length++;					//set new point 
0B94:  INCF   x3D,F
0B96:  BTFSC  FD8.2
0B98:  INCF   x3E,F
.................... 	output_toggle(STAT); 
0B9A:  BCF    F94.1
0B9C:  BTG    F8B.1
.................... 	set_timer1((int16)(0xffff-35000000/Speed));	//set wait time 
0B9E:  BCF    FD8.1
0BA0:  MOVLW  02
0BA2:  MOVWF  x60
0BA4:  MOVLW  16
0BA6:  MOVWF  x5F
0BA8:  MOVLW  0E
0BAA:  MOVWF  x5E
0BAC:  MOVLW  C0
0BAE:  MOVWF  x5D
0BB0:  CLRF   x64
0BB2:  CLRF   x63
0BB4:  MOVFF  125,362
0BB8:  MOVFF  124,361
0BBC:  MOVLB  0
0BBE:  BRA    0AE8
0BC0:  MOVLW  FF
0BC2:  BSF    FD8.0
0BC4:  SUBFWB 00,F
0BC6:  SUBFWB 01,F
0BC8:  MOVLW  00
0BCA:  SUBFWB 02,F
0BCC:  SUBFWB 03,F
0BCE:  MOVFF  01,FCF
0BD2:  MOVFF  00,FCE
.................... 	clear_interrupt(INT_TIMER1);		//clear timer 1 int 
0BD6:  BCF    F9E.0
.................... 	enable_interrupts(INT_TIMER1);	//enable timer 1 interrupt 
0BD8:  BSF    F9D.0
.................... //	clear_interrupt(int_rda);		//clear interrupt flag 
.................... } 
.................... // 
.................... //calculate CRC16 : 1st - buffer, 2d - length of data 
0BDA:  BCF    F9E.5
0BDC:  GOTO   006C
.................... int16	ModbusCRC(int8 * buf, int8 len){ 
0BE0:  MOVLW  FF
0BE2:  MOVLB  3
0BE4:  MOVWF  x66
0BE6:  MOVWF  x67
.................... 	int8	i,index; 
.................... 	int8	CRC_Low=0xff,CRC_High=0xff; 
.................... 	// 
.................... 	for(i=0; i<len; i++){ 
0BE8:  CLRF   x64
0BEA:  MOVF   x63,W
0BEC:  SUBWF  x64,W
0BEE:  BC    0C28
.................... 		index=CRC_High^buf[i]; 
0BF0:  CLRF   03
0BF2:  MOVF   x64,W
0BF4:  ADDWF  x61,W
0BF6:  MOVWF  FE9
0BF8:  MOVF   x62,W
0BFA:  ADDWFC 03,W
0BFC:  MOVWF  FEA
0BFE:  MOVF   FEF,W
0C00:  XORWF  x67,W
0C02:  MOVWF  x65
.................... 		CRC_High=CRC_Low^modbus_auchCRCHi[index]; 
0C04:  CLRF   03
0C06:  MOVF   x65,W
0C08:  MOVLB  0
0C0A:  RCALL  08C8
0C0C:  MOVWF  01
0C0E:  MOVLB  3
0C10:  MOVF   x66,W
0C12:  XORWF  01,W
0C14:  MOVWF  x67
.................... 		CRC_Low=modbus_auchCRCLo[index]; 
0C16:  CLRF   03
0C18:  MOVF   x65,W
0C1A:  MOVLB  0
0C1C:  RCALL  09D8
0C1E:  MOVFF  FE8,366
.................... 	} 
0C22:  MOVLB  3
0C24:  INCF   x64,F
0C26:  BRA    0BEA
.................... 	// 
.................... 	return	make16(CRC_High,CRC_Low); 
0C28:  MOVFF  367,03
0C2C:  MOVFF  366,01
0C30:  MOVFF  367,02
.................... } 
0C34:  MOVLB  0
0C36:  RETLW  00
.................... //read registers 
.................... static int16	CRCr,CRCc; 
.................... static int8	i,j; 
.................... // 
....................  
.................... //add register data 
.................... void	AddRegData(int8 reg){ 
.................... 			restart_wdt(); 
0C38:  CLRWDT
.................... 			switch(reg){ 
0C3A:  MOVLB  3
0C3C:  MOVF   x5F,W
0C3E:  XORLW  00
0C40:  MOVLB  0
0C42:  BTFSC  FD8.2
0C44:  BRA    0DA8
0C46:  XORLW  01
0C48:  BTFSC  FD8.2
0C4A:  BRA    0DDA
0C4C:  XORLW  03
0C4E:  BTFSC  FD8.2
0C50:  BRA    0E0C
0C52:  XORLW  01
0C54:  BTFSC  FD8.2
0C56:  BRA    0E3E
0C58:  XORLW  07
0C5A:  BTFSC  FD8.2
0C5C:  BRA    0E70
0C5E:  XORLW  01
0C60:  BTFSC  FD8.2
0C62:  BRA    0EA2
0C64:  XORLW  03
0C66:  BTFSC  FD8.2
0C68:  BRA    0ED4
0C6A:  XORLW  01
0C6C:  BTFSC  FD8.2
0C6E:  BRA    0F06
0C70:  XORLW  0F
0C72:  BTFSC  FD8.2
0C74:  BRA    0F38
0C76:  XORLW  01
0C78:  BTFSC  FD8.2
0C7A:  BRA    0F6A
0C7C:  XORLW  03
0C7E:  BTFSC  FD8.2
0C80:  BRA    0F9C
0C82:  XORLW  01
0C84:  BTFSC  FD8.2
0C86:  BRA    0FCE
0C88:  XORLW  07
0C8A:  BTFSC  FD8.2
0C8C:  BRA    1000
0C8E:  XORLW  01
0C90:  BTFSC  FD8.2
0C92:  BRA    1032
0C94:  XORLW  03
0C96:  BTFSC  FD8.2
0C98:  BRA    1064
0C9A:  XORLW  01
0C9C:  BTFSC  FD8.2
0C9E:  BRA    1096
0CA0:  XORLW  1F
0CA2:  BTFSC  FD8.2
0CA4:  BRA    10C6
0CA6:  XORLW  01
0CA8:  BTFSC  FD8.2
0CAA:  BRA    10F6
0CAC:  XORLW  03
0CAE:  BTFSC  FD8.2
0CB0:  BRA    1126
0CB2:  XORLW  01
0CB4:  BTFSC  FD8.2
0CB6:  BRA    1162
0CB8:  XORLW  07
0CBA:  BTFSC  FD8.2
0CBC:  BRA    119E
0CBE:  XORLW  01
0CC0:  BTFSC  FD8.2
0CC2:  BRA    11D2
0CC4:  XORLW  03
0CC6:  BTFSC  FD8.2
0CC8:  BRA    1206
0CCA:  XORLW  01
0CCC:  BTFSC  FD8.2
0CCE:  BRA    123A
0CD0:  XORLW  0F
0CD2:  BTFSC  FD8.2
0CD4:  BRA    126A
0CD6:  XORLW  01
0CD8:  BTFSC  FD8.2
0CDA:  BRA    129A
0CDC:  XORLW  03
0CDE:  BTFSC  FD8.2
0CE0:  BRA    12CA
0CE2:  XORLW  01
0CE4:  BTFSC  FD8.2
0CE6:  BRA    12FA
0CE8:  XORLW  07
0CEA:  BTFSC  FD8.2
0CEC:  BRA    132A
0CEE:  XORLW  01
0CF0:  BTFSC  FD8.2
0CF2:  BRA    135A
0CF4:  XORLW  03
0CF6:  BTFSC  FD8.2
0CF8:  BRA    138A
0CFA:  XORLW  01
0CFC:  BTFSC  FD8.2
0CFE:  BRA    13BA
0D00:  XORLW  3F
0D02:  BTFSC  FD8.2
0D04:  BRA    13EA
0D06:  XORLW  01
0D08:  BTFSC  FD8.2
0D0A:  BRA    141A
0D0C:  XORLW  03
0D0E:  BTFSC  FD8.2
0D10:  BRA    144A
0D12:  XORLW  01
0D14:  BTFSC  FD8.2
0D16:  BRA    147A
0D18:  XORLW  07
0D1A:  BTFSC  FD8.2
0D1C:  BRA    14AA
0D1E:  XORLW  01
0D20:  BTFSC  FD8.2
0D22:  BRA    14DA
0D24:  XORLW  03
0D26:  BTFSC  FD8.2
0D28:  GOTO   150A
0D2C:  XORLW  01
0D2E:  BTFSC  FD8.2
0D30:  GOTO   153A
0D34:  XORLW  0F
0D36:  BTFSC  FD8.2
0D38:  GOTO   156A
0D3C:  XORLW  01
0D3E:  BTFSC  FD8.2
0D40:  GOTO   159A
0D44:  XORLW  03
0D46:  BTFSC  FD8.2
0D48:  GOTO   15CA
0D4C:  XORLW  01
0D4E:  BTFSC  FD8.2
0D50:  GOTO   15FA
0D54:  XORLW  07
0D56:  BTFSC  FD8.2
0D58:  GOTO   162A
0D5C:  XORLW  01
0D5E:  BTFSC  FD8.2
0D60:  GOTO   165A
0D64:  XORLW  03
0D66:  BTFSC  FD8.2
0D68:  GOTO   168A
0D6C:  XORLW  01
0D6E:  BTFSC  FD8.2
0D70:  GOTO   16BA
0D74:  XORLW  1F
0D76:  BTFSC  FD8.2
0D78:  GOTO   16EA
0D7C:  XORLW  01
0D7E:  BTFSC  FD8.2
0D80:  GOTO   1726
0D84:  XORLW  03
0D86:  BTFSC  FD8.2
0D88:  GOTO   1762
0D8C:  XORLW  01
0D8E:  BTFSC  FD8.2
0D90:  GOTO   179E
0D94:  XORLW  07
0D96:  BTFSC  FD8.2
0D98:  GOTO   17DA
0D9C:  XORLW  01
0D9E:  BTFSC  FD8.2
0DA0:  GOTO   1816
0DA4:  GOTO   1852
.................... 				case 0x00:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
0DA8:  MOVLW  3D
0DAA:  MOVLB  3
0DAC:  ADDWF  x4A,W
0DAE:  MOVWF  FE9
0DB0:  MOVLW  01
0DB2:  MOVWF  FEA
0DB4:  BTFSC  FD8.0
0DB6:  INCF   FEA,F
0DB8:  CLRF   FEF
.................... 					j++; 
0DBA:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0DBC:  MOVLW  3D
0DBE:  ADDWF  x4A,W
0DC0:  MOVWF  FE9
0DC2:  MOVLW  01
0DC4:  MOVWF  FEA
0DC6:  BTFSC  FD8.0
0DC8:  INCF   FEA,F
0DCA:  CLRF   FEF
.................... 					j++; 
0DCC:  INCF   x4A,F
.................... 					MB_Length+=2; 
0DCE:  MOVLW  02
0DD0:  ADDWF  x3D,F
0DD2:  MOVLW  00
0DD4:  ADDWFC x3E,F
.................... 					break; 
0DD6:  GOTO   1870
.................... 				case 0x01:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
0DDA:  MOVLW  3D
0DDC:  MOVLB  3
0DDE:  ADDWF  x4A,W
0DE0:  MOVWF  FE9
0DE2:  MOVLW  01
0DE4:  MOVWF  FEA
0DE6:  BTFSC  FD8.0
0DE8:  INCF   FEA,F
0DEA:  CLRF   FEF
.................... 					j++; 
0DEC:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0DEE:  MOVLW  3D
0DF0:  ADDWF  x4A,W
0DF2:  MOVWF  FE9
0DF4:  MOVLW  01
0DF6:  MOVWF  FEA
0DF8:  BTFSC  FD8.0
0DFA:  INCF   FEA,F
0DFC:  CLRF   FEF
.................... 					j++; 
0DFE:  INCF   x4A,F
.................... 					MB_Length+=2; 
0E00:  MOVLW  02
0E02:  ADDWF  x3D,F
0E04:  MOVLW  00
0E06:  ADDWFC x3E,F
.................... 					break; 
0E08:  GOTO   1870
.................... 				case 0x02:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
0E0C:  MOVLW  3D
0E0E:  MOVLB  3
0E10:  ADDWF  x4A,W
0E12:  MOVWF  FE9
0E14:  MOVLW  01
0E16:  MOVWF  FEA
0E18:  BTFSC  FD8.0
0E1A:  INCF   FEA,F
0E1C:  CLRF   FEF
.................... 					j++; 
0E1E:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0E20:  MOVLW  3D
0E22:  ADDWF  x4A,W
0E24:  MOVWF  FE9
0E26:  MOVLW  01
0E28:  MOVWF  FEA
0E2A:  BTFSC  FD8.0
0E2C:  INCF   FEA,F
0E2E:  CLRF   FEF
.................... 					j++; 
0E30:  INCF   x4A,F
.................... 					MB_Length+=2; 
0E32:  MOVLW  02
0E34:  ADDWF  x3D,F
0E36:  MOVLW  00
0E38:  ADDWFC x3E,F
.................... 					break; 
0E3A:  GOTO   1870
.................... 				case 0x03:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
0E3E:  MOVLW  3D
0E40:  MOVLB  3
0E42:  ADDWF  x4A,W
0E44:  MOVWF  FE9
0E46:  MOVLW  01
0E48:  MOVWF  FEA
0E4A:  BTFSC  FD8.0
0E4C:  INCF   FEA,F
0E4E:  CLRF   FEF
.................... 					j++; 
0E50:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0E52:  MOVLW  3D
0E54:  ADDWF  x4A,W
0E56:  MOVWF  FE9
0E58:  MOVLW  01
0E5A:  MOVWF  FEA
0E5C:  BTFSC  FD8.0
0E5E:  INCF   FEA,F
0E60:  CLRF   FEF
.................... 					j++; 
0E62:  INCF   x4A,F
.................... 					MB_Length+=2; 
0E64:  MOVLW  02
0E66:  ADDWF  x3D,F
0E68:  MOVLW  00
0E6A:  ADDWFC x3E,F
.................... 					break; 
0E6C:  GOTO   1870
.................... 				case 0x04:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
0E70:  MOVLW  3D
0E72:  MOVLB  3
0E74:  ADDWF  x4A,W
0E76:  MOVWF  FE9
0E78:  MOVLW  01
0E7A:  MOVWF  FEA
0E7C:  BTFSC  FD8.0
0E7E:  INCF   FEA,F
0E80:  CLRF   FEF
.................... 					j++; 
0E82:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0E84:  MOVLW  3D
0E86:  ADDWF  x4A,W
0E88:  MOVWF  FE9
0E8A:  MOVLW  01
0E8C:  MOVWF  FEA
0E8E:  BTFSC  FD8.0
0E90:  INCF   FEA,F
0E92:  CLRF   FEF
.................... 					j++; 
0E94:  INCF   x4A,F
.................... 					MB_Length+=2; 
0E96:  MOVLW  02
0E98:  ADDWF  x3D,F
0E9A:  MOVLW  00
0E9C:  ADDWFC x3E,F
.................... 					break; 
0E9E:  GOTO   1870
.................... 				case 0x05:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
0EA2:  MOVLW  3D
0EA4:  MOVLB  3
0EA6:  ADDWF  x4A,W
0EA8:  MOVWF  FE9
0EAA:  MOVLW  01
0EAC:  MOVWF  FEA
0EAE:  BTFSC  FD8.0
0EB0:  INCF   FEA,F
0EB2:  CLRF   FEF
.................... 					j++; 
0EB4:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0EB6:  MOVLW  3D
0EB8:  ADDWF  x4A,W
0EBA:  MOVWF  FE9
0EBC:  MOVLW  01
0EBE:  MOVWF  FEA
0EC0:  BTFSC  FD8.0
0EC2:  INCF   FEA,F
0EC4:  CLRF   FEF
.................... 					j++; 
0EC6:  INCF   x4A,F
.................... 					MB_Length+=2; 
0EC8:  MOVLW  02
0ECA:  ADDWF  x3D,F
0ECC:  MOVLW  00
0ECE:  ADDWFC x3E,F
.................... 					break; 
0ED0:  GOTO   1870
.................... 				case 0x06:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
0ED4:  MOVLW  3D
0ED6:  MOVLB  3
0ED8:  ADDWF  x4A,W
0EDA:  MOVWF  FE9
0EDC:  MOVLW  01
0EDE:  MOVWF  FEA
0EE0:  BTFSC  FD8.0
0EE2:  INCF   FEA,F
0EE4:  CLRF   FEF
.................... 					j++; 
0EE6:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0EE8:  MOVLW  3D
0EEA:  ADDWF  x4A,W
0EEC:  MOVWF  FE9
0EEE:  MOVLW  01
0EF0:  MOVWF  FEA
0EF2:  BTFSC  FD8.0
0EF4:  INCF   FEA,F
0EF6:  CLRF   FEF
.................... 					j++; 
0EF8:  INCF   x4A,F
.................... 					MB_Length+=2; 
0EFA:  MOVLW  02
0EFC:  ADDWF  x3D,F
0EFE:  MOVLW  00
0F00:  ADDWFC x3E,F
.................... 					break; 
0F02:  GOTO   1870
.................... 				case 0x07:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
0F06:  MOVLW  3D
0F08:  MOVLB  3
0F0A:  ADDWF  x4A,W
0F0C:  MOVWF  FE9
0F0E:  MOVLW  01
0F10:  MOVWF  FEA
0F12:  BTFSC  FD8.0
0F14:  INCF   FEA,F
0F16:  CLRF   FEF
.................... 					j++; 
0F18:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0F1A:  MOVLW  3D
0F1C:  ADDWF  x4A,W
0F1E:  MOVWF  FE9
0F20:  MOVLW  01
0F22:  MOVWF  FEA
0F24:  BTFSC  FD8.0
0F26:  INCF   FEA,F
0F28:  CLRF   FEF
.................... 					j++; 
0F2A:  INCF   x4A,F
.................... 					MB_Length+=2; 
0F2C:  MOVLW  02
0F2E:  ADDWF  x3D,F
0F30:  MOVLW  00
0F32:  ADDWFC x3E,F
.................... 					break; 
0F34:  GOTO   1870
.................... 				case 0x08:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
0F38:  MOVLW  3D
0F3A:  MOVLB  3
0F3C:  ADDWF  x4A,W
0F3E:  MOVWF  FE9
0F40:  MOVLW  01
0F42:  MOVWF  FEA
0F44:  BTFSC  FD8.0
0F46:  INCF   FEA,F
0F48:  CLRF   FEF
.................... 					j++; 
0F4A:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0F4C:  MOVLW  3D
0F4E:  ADDWF  x4A,W
0F50:  MOVWF  FE9
0F52:  MOVLW  01
0F54:  MOVWF  FEA
0F56:  BTFSC  FD8.0
0F58:  INCF   FEA,F
0F5A:  CLRF   FEF
.................... 					j++; 
0F5C:  INCF   x4A,F
.................... 					MB_Length+=2; 
0F5E:  MOVLW  02
0F60:  ADDWF  x3D,F
0F62:  MOVLW  00
0F64:  ADDWFC x3E,F
.................... 					break; 
0F66:  GOTO   1870
.................... 				case 0x09:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
0F6A:  MOVLW  3D
0F6C:  MOVLB  3
0F6E:  ADDWF  x4A,W
0F70:  MOVWF  FE9
0F72:  MOVLW  01
0F74:  MOVWF  FEA
0F76:  BTFSC  FD8.0
0F78:  INCF   FEA,F
0F7A:  CLRF   FEF
.................... 					j++; 
0F7C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0F7E:  MOVLW  3D
0F80:  ADDWF  x4A,W
0F82:  MOVWF  FE9
0F84:  MOVLW  01
0F86:  MOVWF  FEA
0F88:  BTFSC  FD8.0
0F8A:  INCF   FEA,F
0F8C:  CLRF   FEF
.................... 					j++; 
0F8E:  INCF   x4A,F
.................... 					MB_Length+=2; 
0F90:  MOVLW  02
0F92:  ADDWF  x3D,F
0F94:  MOVLW  00
0F96:  ADDWFC x3E,F
.................... 					break; 
0F98:  GOTO   1870
.................... 				case 0x0A:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
0F9C:  MOVLW  3D
0F9E:  MOVLB  3
0FA0:  ADDWF  x4A,W
0FA2:  MOVWF  FE9
0FA4:  MOVLW  01
0FA6:  MOVWF  FEA
0FA8:  BTFSC  FD8.0
0FAA:  INCF   FEA,F
0FAC:  CLRF   FEF
.................... 					j++; 
0FAE:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0FB0:  MOVLW  3D
0FB2:  ADDWF  x4A,W
0FB4:  MOVWF  FE9
0FB6:  MOVLW  01
0FB8:  MOVWF  FEA
0FBA:  BTFSC  FD8.0
0FBC:  INCF   FEA,F
0FBE:  CLRF   FEF
.................... 					j++; 
0FC0:  INCF   x4A,F
.................... 					MB_Length+=2; 
0FC2:  MOVLW  02
0FC4:  ADDWF  x3D,F
0FC6:  MOVLW  00
0FC8:  ADDWFC x3E,F
.................... 					break; 
0FCA:  GOTO   1870
.................... 				case 0x0B:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
0FCE:  MOVLW  3D
0FD0:  MOVLB  3
0FD2:  ADDWF  x4A,W
0FD4:  MOVWF  FE9
0FD6:  MOVLW  01
0FD8:  MOVWF  FEA
0FDA:  BTFSC  FD8.0
0FDC:  INCF   FEA,F
0FDE:  CLRF   FEF
.................... 					j++; 
0FE0:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
0FE2:  MOVLW  3D
0FE4:  ADDWF  x4A,W
0FE6:  MOVWF  FE9
0FE8:  MOVLW  01
0FEA:  MOVWF  FEA
0FEC:  BTFSC  FD8.0
0FEE:  INCF   FEA,F
0FF0:  CLRF   FEF
.................... 					j++; 
0FF2:  INCF   x4A,F
.................... 					MB_Length+=2; 
0FF4:  MOVLW  02
0FF6:  ADDWF  x3D,F
0FF8:  MOVLW  00
0FFA:  ADDWFC x3E,F
.................... 					break; 
0FFC:  GOTO   1870
.................... 				case 0x0C:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
1000:  MOVLW  3D
1002:  MOVLB  3
1004:  ADDWF  x4A,W
1006:  MOVWF  FE9
1008:  MOVLW  01
100A:  MOVWF  FEA
100C:  BTFSC  FD8.0
100E:  INCF   FEA,F
1010:  CLRF   FEF
.................... 					j++; 
1012:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
1014:  MOVLW  3D
1016:  ADDWF  x4A,W
1018:  MOVWF  FE9
101A:  MOVLW  01
101C:  MOVWF  FEA
101E:  BTFSC  FD8.0
1020:  INCF   FEA,F
1022:  CLRF   FEF
.................... 					j++; 
1024:  INCF   x4A,F
.................... 					MB_Length+=2; 
1026:  MOVLW  02
1028:  ADDWF  x3D,F
102A:  MOVLW  00
102C:  ADDWFC x3E,F
.................... 					break; 
102E:  GOTO   1870
.................... 				case 0x0D:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
1032:  MOVLW  3D
1034:  MOVLB  3
1036:  ADDWF  x4A,W
1038:  MOVWF  FE9
103A:  MOVLW  01
103C:  MOVWF  FEA
103E:  BTFSC  FD8.0
1040:  INCF   FEA,F
1042:  CLRF   FEF
.................... 					j++; 
1044:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
1046:  MOVLW  3D
1048:  ADDWF  x4A,W
104A:  MOVWF  FE9
104C:  MOVLW  01
104E:  MOVWF  FEA
1050:  BTFSC  FD8.0
1052:  INCF   FEA,F
1054:  CLRF   FEF
.................... 					j++; 
1056:  INCF   x4A,F
.................... 					MB_Length+=2; 
1058:  MOVLW  02
105A:  ADDWF  x3D,F
105C:  MOVLW  00
105E:  ADDWFC x3E,F
.................... 					break; 
1060:  GOTO   1870
.................... 				case 0x0E:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
1064:  MOVLW  3D
1066:  MOVLB  3
1068:  ADDWF  x4A,W
106A:  MOVWF  FE9
106C:  MOVLW  01
106E:  MOVWF  FEA
1070:  BTFSC  FD8.0
1072:  INCF   FEA,F
1074:  CLRF   FEF
.................... 					j++; 
1076:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
1078:  MOVLW  3D
107A:  ADDWF  x4A,W
107C:  MOVWF  FE9
107E:  MOVLW  01
1080:  MOVWF  FEA
1082:  BTFSC  FD8.0
1084:  INCF   FEA,F
1086:  CLRF   FEF
.................... 					j++; 
1088:  INCF   x4A,F
.................... 					MB_Length+=2; 
108A:  MOVLW  02
108C:  ADDWF  x3D,F
108E:  MOVLW  00
1090:  ADDWFC x3E,F
.................... 					break; 
1092:  GOTO   1870
.................... 				case 0x0F:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
1096:  MOVLW  3D
1098:  MOVLB  3
109A:  ADDWF  x4A,W
109C:  MOVWF  FE9
109E:  MOVLW  01
10A0:  MOVWF  FEA
10A2:  BTFSC  FD8.0
10A4:  INCF   FEA,F
10A6:  CLRF   FEF
.................... 					j++; 
10A8:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
10AA:  MOVLW  3D
10AC:  ADDWF  x4A,W
10AE:  MOVWF  FE9
10B0:  MOVLW  01
10B2:  MOVWF  FEA
10B4:  BTFSC  FD8.0
10B6:  INCF   FEA,F
10B8:  CLRF   FEF
.................... 					j++; 
10BA:  INCF   x4A,F
.................... 					MB_Length+=2; 
10BC:  MOVLW  02
10BE:  ADDWF  x3D,F
10C0:  MOVLW  00
10C2:  ADDWFC x3E,F
.................... 					break; 
10C4:  BRA    1870
.................... 				case 0x10:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
10C6:  MOVLW  3D
10C8:  MOVLB  3
10CA:  ADDWF  x4A,W
10CC:  MOVWF  FE9
10CE:  MOVLW  01
10D0:  MOVWF  FEA
10D2:  BTFSC  FD8.0
10D4:  INCF   FEA,F
10D6:  CLRF   FEF
.................... 					j++; 
10D8:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
10DA:  MOVLW  3D
10DC:  ADDWF  x4A,W
10DE:  MOVWF  FE9
10E0:  MOVLW  01
10E2:  MOVWF  FEA
10E4:  BTFSC  FD8.0
10E6:  INCF   FEA,F
10E8:  CLRF   FEF
.................... 					j++; 
10EA:  INCF   x4A,F
.................... 					MB_Length+=2; 
10EC:  MOVLW  02
10EE:  ADDWF  x3D,F
10F0:  MOVLW  00
10F2:  ADDWFC x3E,F
.................... 					break; 
10F4:  BRA    1870
.................... 				case 0x11:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
10F6:  MOVLW  3D
10F8:  MOVLB  3
10FA:  ADDWF  x4A,W
10FC:  MOVWF  FE9
10FE:  MOVLW  01
1100:  MOVWF  FEA
1102:  BTFSC  FD8.0
1104:  INCF   FEA,F
1106:  CLRF   FEF
.................... 					j++; 
1108:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
110A:  MOVLW  3D
110C:  ADDWF  x4A,W
110E:  MOVWF  FE9
1110:  MOVLW  01
1112:  MOVWF  FEA
1114:  BTFSC  FD8.0
1116:  INCF   FEA,F
1118:  CLRF   FEF
.................... 					j++; 
111A:  INCF   x4A,F
.................... 					MB_Length+=2; 
111C:  MOVLW  02
111E:  ADDWF  x3D,F
1120:  MOVLW  00
1122:  ADDWFC x3E,F
.................... 					break; 
1124:  BRA    1870
.................... 				case 0x12:	//speed register 
.................... 					MB_Buffer[j]=make8(Speed,1);	//high part 
1126:  MOVLW  3D
1128:  MOVLB  3
112A:  ADDWF  x4A,W
112C:  MOVWF  FE9
112E:  MOVLW  01
1130:  MOVWF  FEA
1132:  BTFSC  FD8.0
1134:  INCF   FEA,F
1136:  MOVLB  1
1138:  MOVFF  125,FEF
.................... 					j++; 
113C:  MOVLB  3
113E:  INCF   x4A,F
.................... 					MB_Buffer[j]=make8(Speed,0);	//low part 
1140:  MOVLW  3D
1142:  ADDWF  x4A,W
1144:  MOVWF  FE9
1146:  MOVLW  01
1148:  MOVWF  FEA
114A:  BTFSC  FD8.0
114C:  INCF   FEA,F
114E:  MOVLB  1
1150:  MOVFF  124,FEF
.................... 					j++; 
1154:  MOVLB  3
1156:  INCF   x4A,F
.................... 					MB_Length+=2; 
1158:  MOVLW  02
115A:  ADDWF  x3D,F
115C:  MOVLW  00
115E:  ADDWFC x3E,F
.................... 					break; 
1160:  BRA    1870
.................... 				case 0x13:	//host address register 
.................... 					MB_Buffer[j]=make8(Addr,1);	//high part 
1162:  MOVLW  3D
1164:  MOVLB  3
1166:  ADDWF  x4A,W
1168:  MOVWF  FE9
116A:  MOVLW  01
116C:  MOVWF  FEA
116E:  BTFSC  FD8.0
1170:  INCF   FEA,F
1172:  MOVLB  1
1174:  MOVFF  127,FEF
.................... 					j++; 
1178:  MOVLB  3
117A:  INCF   x4A,F
.................... 					MB_Buffer[j]=make8(Addr,0);	//low part 
117C:  MOVLW  3D
117E:  ADDWF  x4A,W
1180:  MOVWF  FE9
1182:  MOVLW  01
1184:  MOVWF  FEA
1186:  BTFSC  FD8.0
1188:  INCF   FEA,F
118A:  MOVLB  1
118C:  MOVFF  126,FEF
.................... 					j++;								 
1190:  MOVLB  3
1192:  INCF   x4A,F
.................... 					MB_Length+=2; 
1194:  MOVLW  02
1196:  ADDWF  x3D,F
1198:  MOVLW  00
119A:  ADDWFC x3E,F
.................... 					break; 
119C:  BRA    1870
.................... 				case 0x14:	//Valid request register 
.................... 					MB_Buffer[j]=make8(ValidReq,1);	//high part 
119E:  MOVLW  3D
11A0:  MOVLB  3
11A2:  ADDWF  x4A,W
11A4:  MOVWF  FE9
11A6:  MOVLW  01
11A8:  MOVWF  FEA
11AA:  BTFSC  FD8.0
11AC:  INCF   FEA,F
11AE:  MOVFF  340,FEF
.................... 					j++; 
11B2:  INCF   x4A,F
.................... 					MB_Buffer[j]=make8(ValidReq,0);	//low part 
11B4:  MOVLW  3D
11B6:  ADDWF  x4A,W
11B8:  MOVWF  FE9
11BA:  MOVLW  01
11BC:  MOVWF  FEA
11BE:  BTFSC  FD8.0
11C0:  INCF   FEA,F
11C2:  MOVFF  33F,FEF
.................... 					j++;								 
11C6:  INCF   x4A,F
.................... 					MB_Length+=2; 
11C8:  MOVLW  02
11CA:  ADDWF  x3D,F
11CC:  MOVLW  00
11CE:  ADDWFC x3E,F
.................... 					break; 
11D0:  BRA    1870
.................... 				case 0x15:	//CRC error register 
.................... 					MB_Buffer[j]=make8(CRCReq,1);	//high part 
11D2:  MOVLW  3D
11D4:  MOVLB  3
11D6:  ADDWF  x4A,W
11D8:  MOVWF  FE9
11DA:  MOVLW  01
11DC:  MOVWF  FEA
11DE:  BTFSC  FD8.0
11E0:  INCF   FEA,F
11E2:  MOVFF  342,FEF
.................... 					j++; 
11E6:  INCF   x4A,F
.................... 					MB_Buffer[j]=make8(CRCReq,0);	//low part 
11E8:  MOVLW  3D
11EA:  ADDWF  x4A,W
11EC:  MOVWF  FE9
11EE:  MOVLW  01
11F0:  MOVWF  FEA
11F2:  BTFSC  FD8.0
11F4:  INCF   FEA,F
11F6:  MOVFF  341,FEF
.................... 					j++;								 
11FA:  INCF   x4A,F
.................... 					MB_Length+=2; 
11FC:  MOVLW  02
11FE:  ADDWF  x3D,F
1200:  MOVLW  00
1202:  ADDWFC x3E,F
.................... 					break; 
1204:  BRA    1870
.................... 				case 0x16:	//Exception register 
.................... 					MB_Buffer[j]=make8(ExcReq,1);	//high part 
1206:  MOVLW  3D
1208:  MOVLB  3
120A:  ADDWF  x4A,W
120C:  MOVWF  FE9
120E:  MOVLW  01
1210:  MOVWF  FEA
1212:  BTFSC  FD8.0
1214:  INCF   FEA,F
1216:  MOVFF  344,FEF
.................... 					j++; 
121A:  INCF   x4A,F
.................... 					MB_Buffer[j]=make8(ExcReq,0);	//low part 
121C:  MOVLW  3D
121E:  ADDWF  x4A,W
1220:  MOVWF  FE9
1222:  MOVLW  01
1224:  MOVWF  FEA
1226:  BTFSC  FD8.0
1228:  INCF   FEA,F
122A:  MOVFF  343,FEF
.................... 					j++;								 
122E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1230:  MOVLW  02
1232:  ADDWF  x3D,F
1234:  MOVLW  00
1236:  ADDWFC x3E,F
.................... 					break; 
1238:  BRA    1870
.................... 				case 0x17:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
123A:  MOVLW  3D
123C:  MOVLB  3
123E:  ADDWF  x4A,W
1240:  MOVWF  FE9
1242:  MOVLW  01
1244:  MOVWF  FEA
1246:  BTFSC  FD8.0
1248:  INCF   FEA,F
124A:  CLRF   FEF
.................... 					j++; 
124C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
124E:  MOVLW  3D
1250:  ADDWF  x4A,W
1252:  MOVWF  FE9
1254:  MOVLW  01
1256:  MOVWF  FEA
1258:  BTFSC  FD8.0
125A:  INCF   FEA,F
125C:  CLRF   FEF
.................... 					j++; 
125E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1260:  MOVLW  02
1262:  ADDWF  x3D,F
1264:  MOVLW  00
1266:  ADDWFC x3E,F
.................... 					break; 
1268:  BRA    1870
.................... 				case 0x18:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
126A:  MOVLW  3D
126C:  MOVLB  3
126E:  ADDWF  x4A,W
1270:  MOVWF  FE9
1272:  MOVLW  01
1274:  MOVWF  FEA
1276:  BTFSC  FD8.0
1278:  INCF   FEA,F
127A:  CLRF   FEF
.................... 					j++; 
127C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
127E:  MOVLW  3D
1280:  ADDWF  x4A,W
1282:  MOVWF  FE9
1284:  MOVLW  01
1286:  MOVWF  FEA
1288:  BTFSC  FD8.0
128A:  INCF   FEA,F
128C:  CLRF   FEF
.................... 					j++; 
128E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1290:  MOVLW  02
1292:  ADDWF  x3D,F
1294:  MOVLW  00
1296:  ADDWFC x3E,F
.................... 					break; 
1298:  BRA    1870
.................... 				case 0x19:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
129A:  MOVLW  3D
129C:  MOVLB  3
129E:  ADDWF  x4A,W
12A0:  MOVWF  FE9
12A2:  MOVLW  01
12A4:  MOVWF  FEA
12A6:  BTFSC  FD8.0
12A8:  INCF   FEA,F
12AA:  CLRF   FEF
.................... 					j++; 
12AC:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
12AE:  MOVLW  3D
12B0:  ADDWF  x4A,W
12B2:  MOVWF  FE9
12B4:  MOVLW  01
12B6:  MOVWF  FEA
12B8:  BTFSC  FD8.0
12BA:  INCF   FEA,F
12BC:  CLRF   FEF
.................... 					j++; 
12BE:  INCF   x4A,F
.................... 					MB_Length+=2; 
12C0:  MOVLW  02
12C2:  ADDWF  x3D,F
12C4:  MOVLW  00
12C6:  ADDWFC x3E,F
.................... 					break; 
12C8:  BRA    1870
.................... 				case 0x1A:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
12CA:  MOVLW  3D
12CC:  MOVLB  3
12CE:  ADDWF  x4A,W
12D0:  MOVWF  FE9
12D2:  MOVLW  01
12D4:  MOVWF  FEA
12D6:  BTFSC  FD8.0
12D8:  INCF   FEA,F
12DA:  CLRF   FEF
.................... 					j++; 
12DC:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
12DE:  MOVLW  3D
12E0:  ADDWF  x4A,W
12E2:  MOVWF  FE9
12E4:  MOVLW  01
12E6:  MOVWF  FEA
12E8:  BTFSC  FD8.0
12EA:  INCF   FEA,F
12EC:  CLRF   FEF
.................... 					j++; 
12EE:  INCF   x4A,F
.................... 					MB_Length+=2; 
12F0:  MOVLW  02
12F2:  ADDWF  x3D,F
12F4:  MOVLW  00
12F6:  ADDWFC x3E,F
.................... 					break; 
12F8:  BRA    1870
.................... 				case 0x1B:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
12FA:  MOVLW  3D
12FC:  MOVLB  3
12FE:  ADDWF  x4A,W
1300:  MOVWF  FE9
1302:  MOVLW  01
1304:  MOVWF  FEA
1306:  BTFSC  FD8.0
1308:  INCF   FEA,F
130A:  CLRF   FEF
.................... 					j++; 
130C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
130E:  MOVLW  3D
1310:  ADDWF  x4A,W
1312:  MOVWF  FE9
1314:  MOVLW  01
1316:  MOVWF  FEA
1318:  BTFSC  FD8.0
131A:  INCF   FEA,F
131C:  CLRF   FEF
.................... 					j++; 
131E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1320:  MOVLW  02
1322:  ADDWF  x3D,F
1324:  MOVLW  00
1326:  ADDWFC x3E,F
.................... 					break; 
1328:  BRA    1870
.................... 				case 0x1C:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
132A:  MOVLW  3D
132C:  MOVLB  3
132E:  ADDWF  x4A,W
1330:  MOVWF  FE9
1332:  MOVLW  01
1334:  MOVWF  FEA
1336:  BTFSC  FD8.0
1338:  INCF   FEA,F
133A:  CLRF   FEF
.................... 					j++; 
133C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
133E:  MOVLW  3D
1340:  ADDWF  x4A,W
1342:  MOVWF  FE9
1344:  MOVLW  01
1346:  MOVWF  FEA
1348:  BTFSC  FD8.0
134A:  INCF   FEA,F
134C:  CLRF   FEF
.................... 					j++; 
134E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1350:  MOVLW  02
1352:  ADDWF  x3D,F
1354:  MOVLW  00
1356:  ADDWFC x3E,F
.................... 					break; 
1358:  BRA    1870
.................... 				case 0x1D:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
135A:  MOVLW  3D
135C:  MOVLB  3
135E:  ADDWF  x4A,W
1360:  MOVWF  FE9
1362:  MOVLW  01
1364:  MOVWF  FEA
1366:  BTFSC  FD8.0
1368:  INCF   FEA,F
136A:  CLRF   FEF
.................... 					j++; 
136C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
136E:  MOVLW  3D
1370:  ADDWF  x4A,W
1372:  MOVWF  FE9
1374:  MOVLW  01
1376:  MOVWF  FEA
1378:  BTFSC  FD8.0
137A:  INCF   FEA,F
137C:  CLRF   FEF
.................... 					j++; 
137E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1380:  MOVLW  02
1382:  ADDWF  x3D,F
1384:  MOVLW  00
1386:  ADDWFC x3E,F
.................... 					break; 
1388:  BRA    1870
.................... 				case 0x1E:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
138A:  MOVLW  3D
138C:  MOVLB  3
138E:  ADDWF  x4A,W
1390:  MOVWF  FE9
1392:  MOVLW  01
1394:  MOVWF  FEA
1396:  BTFSC  FD8.0
1398:  INCF   FEA,F
139A:  CLRF   FEF
.................... 					j++; 
139C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
139E:  MOVLW  3D
13A0:  ADDWF  x4A,W
13A2:  MOVWF  FE9
13A4:  MOVLW  01
13A6:  MOVWF  FEA
13A8:  BTFSC  FD8.0
13AA:  INCF   FEA,F
13AC:  CLRF   FEF
.................... 					j++; 
13AE:  INCF   x4A,F
.................... 					MB_Length+=2; 
13B0:  MOVLW  02
13B2:  ADDWF  x3D,F
13B4:  MOVLW  00
13B6:  ADDWFC x3E,F
.................... 					break; 
13B8:  BRA    1870
.................... 				case 0x1F:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
13BA:  MOVLW  3D
13BC:  MOVLB  3
13BE:  ADDWF  x4A,W
13C0:  MOVWF  FE9
13C2:  MOVLW  01
13C4:  MOVWF  FEA
13C6:  BTFSC  FD8.0
13C8:  INCF   FEA,F
13CA:  CLRF   FEF
.................... 					j++; 
13CC:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
13CE:  MOVLW  3D
13D0:  ADDWF  x4A,W
13D2:  MOVWF  FE9
13D4:  MOVLW  01
13D6:  MOVWF  FEA
13D8:  BTFSC  FD8.0
13DA:  INCF   FEA,F
13DC:  CLRF   FEF
.................... 					j++; 
13DE:  INCF   x4A,F
.................... 					MB_Length+=2; 
13E0:  MOVLW  02
13E2:  ADDWF  x3D,F
13E4:  MOVLW  00
13E6:  ADDWFC x3E,F
.................... 					break; 
13E8:  BRA    1870
.................... 				case 0x20:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
13EA:  MOVLW  3D
13EC:  MOVLB  3
13EE:  ADDWF  x4A,W
13F0:  MOVWF  FE9
13F2:  MOVLW  01
13F4:  MOVWF  FEA
13F6:  BTFSC  FD8.0
13F8:  INCF   FEA,F
13FA:  CLRF   FEF
.................... 					j++; 
13FC:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
13FE:  MOVLW  3D
1400:  ADDWF  x4A,W
1402:  MOVWF  FE9
1404:  MOVLW  01
1406:  MOVWF  FEA
1408:  BTFSC  FD8.0
140A:  INCF   FEA,F
140C:  CLRF   FEF
.................... 					j++; 
140E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1410:  MOVLW  02
1412:  ADDWF  x3D,F
1414:  MOVLW  00
1416:  ADDWFC x3E,F
.................... 					break; 
1418:  BRA    1870
.................... 				case 0x21:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
141A:  MOVLW  3D
141C:  MOVLB  3
141E:  ADDWF  x4A,W
1420:  MOVWF  FE9
1422:  MOVLW  01
1424:  MOVWF  FEA
1426:  BTFSC  FD8.0
1428:  INCF   FEA,F
142A:  CLRF   FEF
.................... 					j++; 
142C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
142E:  MOVLW  3D
1430:  ADDWF  x4A,W
1432:  MOVWF  FE9
1434:  MOVLW  01
1436:  MOVWF  FEA
1438:  BTFSC  FD8.0
143A:  INCF   FEA,F
143C:  CLRF   FEF
.................... 					j++; 
143E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1440:  MOVLW  02
1442:  ADDWF  x3D,F
1444:  MOVLW  00
1446:  ADDWFC x3E,F
.................... 					break; 
1448:  BRA    1870
.................... 				case 0x22:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
144A:  MOVLW  3D
144C:  MOVLB  3
144E:  ADDWF  x4A,W
1450:  MOVWF  FE9
1452:  MOVLW  01
1454:  MOVWF  FEA
1456:  BTFSC  FD8.0
1458:  INCF   FEA,F
145A:  CLRF   FEF
.................... 					j++; 
145C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
145E:  MOVLW  3D
1460:  ADDWF  x4A,W
1462:  MOVWF  FE9
1464:  MOVLW  01
1466:  MOVWF  FEA
1468:  BTFSC  FD8.0
146A:  INCF   FEA,F
146C:  CLRF   FEF
.................... 					j++; 
146E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1470:  MOVLW  02
1472:  ADDWF  x3D,F
1474:  MOVLW  00
1476:  ADDWFC x3E,F
.................... 					break; 
1478:  BRA    1870
.................... 				case 0x23:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
147A:  MOVLW  3D
147C:  MOVLB  3
147E:  ADDWF  x4A,W
1480:  MOVWF  FE9
1482:  MOVLW  01
1484:  MOVWF  FEA
1486:  BTFSC  FD8.0
1488:  INCF   FEA,F
148A:  CLRF   FEF
.................... 					j++; 
148C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
148E:  MOVLW  3D
1490:  ADDWF  x4A,W
1492:  MOVWF  FE9
1494:  MOVLW  01
1496:  MOVWF  FEA
1498:  BTFSC  FD8.0
149A:  INCF   FEA,F
149C:  CLRF   FEF
.................... 					j++; 
149E:  INCF   x4A,F
.................... 					MB_Length+=2; 
14A0:  MOVLW  02
14A2:  ADDWF  x3D,F
14A4:  MOVLW  00
14A6:  ADDWFC x3E,F
.................... 					break; 
14A8:  BRA    1870
.................... 				case 0x24:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
14AA:  MOVLW  3D
14AC:  MOVLB  3
14AE:  ADDWF  x4A,W
14B0:  MOVWF  FE9
14B2:  MOVLW  01
14B4:  MOVWF  FEA
14B6:  BTFSC  FD8.0
14B8:  INCF   FEA,F
14BA:  CLRF   FEF
.................... 					j++; 
14BC:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
14BE:  MOVLW  3D
14C0:  ADDWF  x4A,W
14C2:  MOVWF  FE9
14C4:  MOVLW  01
14C6:  MOVWF  FEA
14C8:  BTFSC  FD8.0
14CA:  INCF   FEA,F
14CC:  CLRF   FEF
.................... 					j++; 
14CE:  INCF   x4A,F
.................... 					MB_Length+=2; 
14D0:  MOVLW  02
14D2:  ADDWF  x3D,F
14D4:  MOVLW  00
14D6:  ADDWFC x3E,F
.................... 					break; 
14D8:  BRA    1870
.................... 				case 0x25:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
14DA:  MOVLW  3D
14DC:  MOVLB  3
14DE:  ADDWF  x4A,W
14E0:  MOVWF  FE9
14E2:  MOVLW  01
14E4:  MOVWF  FEA
14E6:  BTFSC  FD8.0
14E8:  INCF   FEA,F
14EA:  CLRF   FEF
.................... 					j++; 
14EC:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
14EE:  MOVLW  3D
14F0:  ADDWF  x4A,W
14F2:  MOVWF  FE9
14F4:  MOVLW  01
14F6:  MOVWF  FEA
14F8:  BTFSC  FD8.0
14FA:  INCF   FEA,F
14FC:  CLRF   FEF
.................... 					j++; 
14FE:  INCF   x4A,F
.................... 					MB_Length+=2; 
1500:  MOVLW  02
1502:  ADDWF  x3D,F
1504:  MOVLW  00
1506:  ADDWFC x3E,F
.................... 					break; 
1508:  BRA    1870
.................... 				case 0x26:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
150A:  MOVLW  3D
150C:  MOVLB  3
150E:  ADDWF  x4A,W
1510:  MOVWF  FE9
1512:  MOVLW  01
1514:  MOVWF  FEA
1516:  BTFSC  FD8.0
1518:  INCF   FEA,F
151A:  CLRF   FEF
.................... 					j++; 
151C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
151E:  MOVLW  3D
1520:  ADDWF  x4A,W
1522:  MOVWF  FE9
1524:  MOVLW  01
1526:  MOVWF  FEA
1528:  BTFSC  FD8.0
152A:  INCF   FEA,F
152C:  CLRF   FEF
.................... 					j++; 
152E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1530:  MOVLW  02
1532:  ADDWF  x3D,F
1534:  MOVLW  00
1536:  ADDWFC x3E,F
.................... 					break; 
1538:  BRA    1870
.................... 				case 0x27:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
153A:  MOVLW  3D
153C:  MOVLB  3
153E:  ADDWF  x4A,W
1540:  MOVWF  FE9
1542:  MOVLW  01
1544:  MOVWF  FEA
1546:  BTFSC  FD8.0
1548:  INCF   FEA,F
154A:  CLRF   FEF
.................... 					j++; 
154C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
154E:  MOVLW  3D
1550:  ADDWF  x4A,W
1552:  MOVWF  FE9
1554:  MOVLW  01
1556:  MOVWF  FEA
1558:  BTFSC  FD8.0
155A:  INCF   FEA,F
155C:  CLRF   FEF
.................... 					j++; 
155E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1560:  MOVLW  02
1562:  ADDWF  x3D,F
1564:  MOVLW  00
1566:  ADDWFC x3E,F
.................... 					break; 
1568:  BRA    1870
.................... 				case 0x28:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
156A:  MOVLW  3D
156C:  MOVLB  3
156E:  ADDWF  x4A,W
1570:  MOVWF  FE9
1572:  MOVLW  01
1574:  MOVWF  FEA
1576:  BTFSC  FD8.0
1578:  INCF   FEA,F
157A:  CLRF   FEF
.................... 					j++; 
157C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
157E:  MOVLW  3D
1580:  ADDWF  x4A,W
1582:  MOVWF  FE9
1584:  MOVLW  01
1586:  MOVWF  FEA
1588:  BTFSC  FD8.0
158A:  INCF   FEA,F
158C:  CLRF   FEF
.................... 					j++; 
158E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1590:  MOVLW  02
1592:  ADDWF  x3D,F
1594:  MOVLW  00
1596:  ADDWFC x3E,F
.................... 					break; 
1598:  BRA    1870
.................... 				case 0x29:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
159A:  MOVLW  3D
159C:  MOVLB  3
159E:  ADDWF  x4A,W
15A0:  MOVWF  FE9
15A2:  MOVLW  01
15A4:  MOVWF  FEA
15A6:  BTFSC  FD8.0
15A8:  INCF   FEA,F
15AA:  CLRF   FEF
.................... 					j++; 
15AC:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
15AE:  MOVLW  3D
15B0:  ADDWF  x4A,W
15B2:  MOVWF  FE9
15B4:  MOVLW  01
15B6:  MOVWF  FEA
15B8:  BTFSC  FD8.0
15BA:  INCF   FEA,F
15BC:  CLRF   FEF
.................... 					j++; 
15BE:  INCF   x4A,F
.................... 					MB_Length+=2; 
15C0:  MOVLW  02
15C2:  ADDWF  x3D,F
15C4:  MOVLW  00
15C6:  ADDWFC x3E,F
.................... 					break; 
15C8:  BRA    1870
.................... 				case 0x2A:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
15CA:  MOVLW  3D
15CC:  MOVLB  3
15CE:  ADDWF  x4A,W
15D0:  MOVWF  FE9
15D2:  MOVLW  01
15D4:  MOVWF  FEA
15D6:  BTFSC  FD8.0
15D8:  INCF   FEA,F
15DA:  CLRF   FEF
.................... 					j++; 
15DC:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
15DE:  MOVLW  3D
15E0:  ADDWF  x4A,W
15E2:  MOVWF  FE9
15E4:  MOVLW  01
15E6:  MOVWF  FEA
15E8:  BTFSC  FD8.0
15EA:  INCF   FEA,F
15EC:  CLRF   FEF
.................... 					j++; 
15EE:  INCF   x4A,F
.................... 					MB_Length+=2; 
15F0:  MOVLW  02
15F2:  ADDWF  x3D,F
15F4:  MOVLW  00
15F6:  ADDWFC x3E,F
.................... 					break; 
15F8:  BRA    1870
.................... 				case 0x2B:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
15FA:  MOVLW  3D
15FC:  MOVLB  3
15FE:  ADDWF  x4A,W
1600:  MOVWF  FE9
1602:  MOVLW  01
1604:  MOVWF  FEA
1606:  BTFSC  FD8.0
1608:  INCF   FEA,F
160A:  CLRF   FEF
.................... 					j++; 
160C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
160E:  MOVLW  3D
1610:  ADDWF  x4A,W
1612:  MOVWF  FE9
1614:  MOVLW  01
1616:  MOVWF  FEA
1618:  BTFSC  FD8.0
161A:  INCF   FEA,F
161C:  CLRF   FEF
.................... 					j++; 
161E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1620:  MOVLW  02
1622:  ADDWF  x3D,F
1624:  MOVLW  00
1626:  ADDWFC x3E,F
.................... 					break; 
1628:  BRA    1870
.................... 				case 0x2C:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
162A:  MOVLW  3D
162C:  MOVLB  3
162E:  ADDWF  x4A,W
1630:  MOVWF  FE9
1632:  MOVLW  01
1634:  MOVWF  FEA
1636:  BTFSC  FD8.0
1638:  INCF   FEA,F
163A:  CLRF   FEF
.................... 					j++; 
163C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
163E:  MOVLW  3D
1640:  ADDWF  x4A,W
1642:  MOVWF  FE9
1644:  MOVLW  01
1646:  MOVWF  FEA
1648:  BTFSC  FD8.0
164A:  INCF   FEA,F
164C:  CLRF   FEF
.................... 					j++; 
164E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1650:  MOVLW  02
1652:  ADDWF  x3D,F
1654:  MOVLW  00
1656:  ADDWFC x3E,F
.................... 					break; 
1658:  BRA    1870
.................... 				case 0x2D:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
165A:  MOVLW  3D
165C:  MOVLB  3
165E:  ADDWF  x4A,W
1660:  MOVWF  FE9
1662:  MOVLW  01
1664:  MOVWF  FEA
1666:  BTFSC  FD8.0
1668:  INCF   FEA,F
166A:  CLRF   FEF
.................... 					j++; 
166C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
166E:  MOVLW  3D
1670:  ADDWF  x4A,W
1672:  MOVWF  FE9
1674:  MOVLW  01
1676:  MOVWF  FEA
1678:  BTFSC  FD8.0
167A:  INCF   FEA,F
167C:  CLRF   FEF
.................... 					j++; 
167E:  INCF   x4A,F
.................... 					MB_Length+=2; 
1680:  MOVLW  02
1682:  ADDWF  x3D,F
1684:  MOVLW  00
1686:  ADDWFC x3E,F
.................... 					break; 
1688:  BRA    1870
.................... 				case 0x2E:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
168A:  MOVLW  3D
168C:  MOVLB  3
168E:  ADDWF  x4A,W
1690:  MOVWF  FE9
1692:  MOVLW  01
1694:  MOVWF  FEA
1696:  BTFSC  FD8.0
1698:  INCF   FEA,F
169A:  CLRF   FEF
.................... 					j++; 
169C:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
169E:  MOVLW  3D
16A0:  ADDWF  x4A,W
16A2:  MOVWF  FE9
16A4:  MOVLW  01
16A6:  MOVWF  FEA
16A8:  BTFSC  FD8.0
16AA:  INCF   FEA,F
16AC:  CLRF   FEF
.................... 					j++; 
16AE:  INCF   x4A,F
.................... 					MB_Length+=2; 
16B0:  MOVLW  02
16B2:  ADDWF  x3D,F
16B4:  MOVLW  00
16B6:  ADDWFC x3E,F
.................... 					break; 
16B8:  BRA    1870
.................... 				case 0x2F:	//dummy command					 
.................... 					MB_Buffer[j]=0x00;	//high part 
16BA:  MOVLW  3D
16BC:  MOVLB  3
16BE:  ADDWF  x4A,W
16C0:  MOVWF  FE9
16C2:  MOVLW  01
16C4:  MOVWF  FEA
16C6:  BTFSC  FD8.0
16C8:  INCF   FEA,F
16CA:  CLRF   FEF
.................... 					j++; 
16CC:  INCF   x4A,F
.................... 					MB_Buffer[j]=0x00;	//low part 
16CE:  MOVLW  3D
16D0:  ADDWF  x4A,W
16D2:  MOVWF  FE9
16D4:  MOVLW  01
16D6:  MOVWF  FEA
16D8:  BTFSC  FD8.0
16DA:  INCF   FEA,F
16DC:  CLRF   FEF
.................... 					j++; 
16DE:  INCF   x4A,F
.................... 					MB_Length+=2; 
16E0:  MOVLW  02
16E2:  ADDWF  x3D,F
16E4:  MOVLW  00
16E6:  ADDWFC x3E,F
.................... 					break; 
16E8:  BRA    1870
.................... 				case 0x30:	//Scan code register 
.................... 					MB_Buffer[j]=make8(ScanCode,1);	//high part 
16EA:  MOVLW  3D
16EC:  MOVLB  3
16EE:  ADDWF  x4A,W
16F0:  MOVWF  FE9
16F2:  MOVLW  01
16F4:  MOVWF  FEA
16F6:  BTFSC  FD8.0
16F8:  INCF   FEA,F
16FA:  MOVLB  1
16FC:  MOVFF  131,FEF
.................... 					j++; 
1700:  MOVLB  3
1702:  INCF   x4A,F
.................... 					MB_Buffer[j]=make8(ScanCode,0);	//low part 
1704:  MOVLW  3D
1706:  ADDWF  x4A,W
1708:  MOVWF  FE9
170A:  MOVLW  01
170C:  MOVWF  FEA
170E:  BTFSC  FD8.0
1710:  INCF   FEA,F
1712:  MOVLB  1
1714:  MOVFF  130,FEF
.................... 					j++; 
1718:  MOVLB  3
171A:  INCF   x4A,F
.................... 					//ScanCode=0;	//reset scan code after read 
.................... 					MB_Length+=2; 
171C:  MOVLW  02
171E:  ADDWF  x3D,F
1720:  MOVLW  00
1722:  ADDWFC x3E,F
.................... 					break; 
1724:  BRA    1870
.................... 				case 0x31:	//relay register 
.................... 					MB_Buffer[j]=make8(Relay,1);	//high part 
1726:  MOVLW  3D
1728:  MOVLB  3
172A:  ADDWF  x4A,W
172C:  MOVWF  FE9
172E:  MOVLW  01
1730:  MOVWF  FEA
1732:  BTFSC  FD8.0
1734:  INCF   FEA,F
1736:  MOVLB  1
1738:  MOVFF  133,FEF
.................... 					j++; 
173C:  MOVLB  3
173E:  INCF   x4A,F
.................... 					MB_Buffer[j]=make8(Relay,0);	//low part 
1740:  MOVLW  3D
1742:  ADDWF  x4A,W
1744:  MOVWF  FE9
1746:  MOVLW  01
1748:  MOVWF  FEA
174A:  BTFSC  FD8.0
174C:  INCF   FEA,F
174E:  MOVLB  1
1750:  MOVFF  132,FEF
.................... 					j++;								 
1754:  MOVLB  3
1756:  INCF   x4A,F
.................... 					MB_Length+=2; 
1758:  MOVLW  02
175A:  ADDWF  x3D,F
175C:  MOVLW  00
175E:  ADDWFC x3E,F
.................... 					break; 
1760:  BRA    1870
.................... 				case 0x32:	//output value 0 register 
.................... 					MB_Buffer[j]=make8(ValOut0,1);	//high part 
1762:  MOVLW  3D
1764:  MOVLB  3
1766:  ADDWF  x4A,W
1768:  MOVWF  FE9
176A:  MOVLW  01
176C:  MOVWF  FEA
176E:  BTFSC  FD8.0
1770:  INCF   FEA,F
1772:  MOVLB  1
1774:  MOVFF  12D,FEF
.................... 					j++; 
1778:  MOVLB  3
177A:  INCF   x4A,F
.................... 					MB_Buffer[j]=make8(ValOut0,0);	//low part 
177C:  MOVLW  3D
177E:  ADDWF  x4A,W
1780:  MOVWF  FE9
1782:  MOVLW  01
1784:  MOVWF  FEA
1786:  BTFSC  FD8.0
1788:  INCF   FEA,F
178A:  MOVLB  1
178C:  MOVFF  12C,FEF
.................... 					j++;								 
1790:  MOVLB  3
1792:  INCF   x4A,F
.................... 					MB_Length+=2; 
1794:  MOVLW  02
1796:  ADDWF  x3D,F
1798:  MOVLW  00
179A:  ADDWFC x3E,F
.................... 					break; 
179C:  BRA    1870
.................... 				case 0x33:	//output value 1 register 
.................... 					MB_Buffer[j]=make8(ValOut1,1);	//high part 
179E:  MOVLW  3D
17A0:  MOVLB  3
17A2:  ADDWF  x4A,W
17A4:  MOVWF  FE9
17A6:  MOVLW  01
17A8:  MOVWF  FEA
17AA:  BTFSC  FD8.0
17AC:  INCF   FEA,F
17AE:  MOVLB  1
17B0:  MOVFF  12F,FEF
.................... 					j++; 
17B4:  MOVLB  3
17B6:  INCF   x4A,F
.................... 					MB_Buffer[j]=make8(ValOut1,0);	//low part 
17B8:  MOVLW  3D
17BA:  ADDWF  x4A,W
17BC:  MOVWF  FE9
17BE:  MOVLW  01
17C0:  MOVWF  FEA
17C2:  BTFSC  FD8.0
17C4:  INCF   FEA,F
17C6:  MOVLB  1
17C8:  MOVFF  12E,FEF
.................... 					j++;								 
17CC:  MOVLB  3
17CE:  INCF   x4A,F
.................... 					MB_Length+=2; 
17D0:  MOVLW  02
17D2:  ADDWF  x3D,F
17D4:  MOVLW  00
17D6:  ADDWFC x3E,F
.................... 					break; 
17D8:  BRA    1870
.................... 				case 0x34:	//Out range 0 register 
.................... 					MB_Buffer[j]=make8(ValPot0,1);	//high part 
17DA:  MOVLW  3D
17DC:  MOVLB  3
17DE:  ADDWF  x4A,W
17E0:  MOVWF  FE9
17E2:  MOVLW  01
17E4:  MOVWF  FEA
17E6:  BTFSC  FD8.0
17E8:  INCF   FEA,F
17EA:  MOVLB  1
17EC:  MOVFF  129,FEF
.................... 					j++; 
17F0:  MOVLB  3
17F2:  INCF   x4A,F
.................... 					MB_Buffer[j]=make8(ValPot0,0);	//low part 
17F4:  MOVLW  3D
17F6:  ADDWF  x4A,W
17F8:  MOVWF  FE9
17FA:  MOVLW  01
17FC:  MOVWF  FEA
17FE:  BTFSC  FD8.0
1800:  INCF   FEA,F
1802:  MOVLB  1
1804:  MOVFF  128,FEF
.................... 					j++;								 
1808:  MOVLB  3
180A:  INCF   x4A,F
.................... 					MB_Length+=2; 
180C:  MOVLW  02
180E:  ADDWF  x3D,F
1810:  MOVLW  00
1812:  ADDWFC x3E,F
.................... 					break; 
1814:  BRA    1870
.................... 				case 0x35:	//Out range 1 register 
.................... 					MB_Buffer[j]=make8(ValPot1,1);	//high part 
1816:  MOVLW  3D
1818:  MOVLB  3
181A:  ADDWF  x4A,W
181C:  MOVWF  FE9
181E:  MOVLW  01
1820:  MOVWF  FEA
1822:  BTFSC  FD8.0
1824:  INCF   FEA,F
1826:  MOVLB  1
1828:  MOVFF  12B,FEF
.................... 					j++; 
182C:  MOVLB  3
182E:  INCF   x4A,F
.................... 					MB_Buffer[j]=make8(ValPot1,0);	//low part 
1830:  MOVLW  3D
1832:  ADDWF  x4A,W
1834:  MOVWF  FE9
1836:  MOVLW  01
1838:  MOVWF  FEA
183A:  BTFSC  FD8.0
183C:  INCF   FEA,F
183E:  MOVLB  1
1840:  MOVFF  12A,FEF
.................... 					j++;								 
1844:  MOVLB  3
1846:  INCF   x4A,F
.................... 					MB_Length+=2; 
1848:  MOVLW  02
184A:  ADDWF  x3D,F
184C:  MOVLW  00
184E:  ADDWFC x3E,F
.................... 					break; 
1850:  BRA    1870
.................... 				default:	//no valid registers							 
.................... 					MB_Buffer[1]|=0x80; 
1852:  MOVLB  1
1854:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_value; 
1856:  MOVLW  03
1858:  MOVWF  x3F
.................... 					MB_Length=5; 
185A:  MOVLB  3
185C:  CLRF   x3E
185E:  MOVLW  05
1860:  MOVWF  x3D
.................... 					ExcReq++; 
1862:  INCF   x43,F
1864:  BTFSC  FD8.2
1866:  INCF   x44,F
.................... 					ValidReq--; 
1868:  MOVF   x3F,W
186A:  BTFSC  FD8.2
186C:  DECF   x40,F
186E:  DECF   x3F,F
.................... 			};	 
.................... } 
1870:  MOVLB  0
1872:  GOTO   23C2 (RETURN)
.................... // 
.................... //write registers 
.................... void	SetRegData(int8 reg){ 
.................... 			restart_wdt(); 
*
19CA:  CLRWDT
.................... 			switch(reg){ 
19CC:  MOVLB  3
19CE:  MOVF   x5F,W
19D0:  XORLW  00
19D2:  MOVLB  0
19D4:  BTFSC  FD8.2
19D6:  BRA    1B18
19D8:  XORLW  01
19DA:  BTFSC  FD8.2
19DC:  BRA    1B20
19DE:  XORLW  03
19E0:  BTFSC  FD8.2
19E2:  BRA    1B28
19E4:  XORLW  01
19E6:  BTFSC  FD8.2
19E8:  BRA    1B30
19EA:  XORLW  07
19EC:  BTFSC  FD8.2
19EE:  BRA    1B38
19F0:  XORLW  01
19F2:  BTFSC  FD8.2
19F4:  BRA    1B40
19F6:  XORLW  03
19F8:  BTFSC  FD8.2
19FA:  BRA    1B48
19FC:  XORLW  01
19FE:  BTFSC  FD8.2
1A00:  BRA    1B50
1A02:  XORLW  0F
1A04:  BTFSC  FD8.2
1A06:  BRA    1B58
1A08:  XORLW  01
1A0A:  BTFSC  FD8.2
1A0C:  BRA    1B60
1A0E:  XORLW  03
1A10:  BTFSC  FD8.2
1A12:  BRA    1B68
1A14:  XORLW  01
1A16:  BTFSC  FD8.2
1A18:  BRA    1B70
1A1A:  XORLW  07
1A1C:  BTFSC  FD8.2
1A1E:  BRA    1B78
1A20:  XORLW  01
1A22:  BTFSC  FD8.2
1A24:  BRA    1B80
1A26:  XORLW  03
1A28:  BTFSC  FD8.2
1A2A:  BRA    1B88
1A2C:  XORLW  01
1A2E:  BTFSC  FD8.2
1A30:  BRA    1B90
1A32:  XORLW  1F
1A34:  BTFSC  FD8.2
1A36:  BRA    1B98
1A38:  XORLW  01
1A3A:  BTFSC  FD8.2
1A3C:  BRA    1BA0
1A3E:  XORLW  03
1A40:  BTFSC  FD8.2
1A42:  BRA    1BA8
1A44:  XORLW  01
1A46:  BTFSC  FD8.2
1A48:  BRA    1BB0
1A4A:  XORLW  07
1A4C:  BTFSC  FD8.2
1A4E:  BRA    1BE6
1A50:  XORLW  01
1A52:  BTFSC  FD8.2
1A54:  BRA    1BEE
1A56:  XORLW  03
1A58:  BTFSC  FD8.2
1A5A:  BRA    1BF6
1A5C:  XORLW  01
1A5E:  BTFSC  FD8.2
1A60:  BRA    1BFE
1A62:  XORLW  0F
1A64:  BTFSC  FD8.2
1A66:  BRA    1C06
1A68:  XORLW  01
1A6A:  BTFSC  FD8.2
1A6C:  BRA    1C0E
1A6E:  XORLW  03
1A70:  BTFSC  FD8.2
1A72:  BRA    1C16
1A74:  XORLW  01
1A76:  BTFSC  FD8.2
1A78:  BRA    1C1E
1A7A:  XORLW  07
1A7C:  BTFSC  FD8.2
1A7E:  BRA    1C26
1A80:  XORLW  01
1A82:  BTFSC  FD8.2
1A84:  BRA    1C2E
1A86:  XORLW  03
1A88:  BTFSC  FD8.2
1A8A:  BRA    1C36
1A8C:  XORLW  01
1A8E:  BTFSC  FD8.2
1A90:  BRA    1C3E
1A92:  XORLW  3F
1A94:  BTFSC  FD8.2
1A96:  BRA    1C46
1A98:  XORLW  01
1A9A:  BTFSC  FD8.2
1A9C:  BRA    1C4E
1A9E:  XORLW  03
1AA0:  BTFSC  FD8.2
1AA2:  BRA    1C56
1AA4:  XORLW  01
1AA6:  BTFSC  FD8.2
1AA8:  BRA    1C5E
1AAA:  XORLW  07
1AAC:  BTFSC  FD8.2
1AAE:  BRA    1C66
1AB0:  XORLW  01
1AB2:  BTFSC  FD8.2
1AB4:  BRA    1C6E
1AB6:  XORLW  03
1AB8:  BTFSC  FD8.2
1ABA:  BRA    1C76
1ABC:  XORLW  01
1ABE:  BTFSC  FD8.2
1AC0:  BRA    1C7E
1AC2:  XORLW  0F
1AC4:  BTFSC  FD8.2
1AC6:  BRA    1C86
1AC8:  XORLW  01
1ACA:  BTFSC  FD8.2
1ACC:  BRA    1C8E
1ACE:  XORLW  03
1AD0:  BTFSC  FD8.2
1AD2:  BRA    1C96
1AD4:  XORLW  01
1AD6:  BTFSC  FD8.2
1AD8:  BRA    1C9E
1ADA:  XORLW  07
1ADC:  BTFSC  FD8.2
1ADE:  BRA    1CA6
1AE0:  XORLW  01
1AE2:  BTFSC  FD8.2
1AE4:  BRA    1CAE
1AE6:  XORLW  03
1AE8:  BTFSC  FD8.2
1AEA:  BRA    1CB6
1AEC:  XORLW  01
1AEE:  BTFSC  FD8.2
1AF0:  BRA    1CBE
1AF2:  XORLW  1F
1AF4:  BTFSC  FD8.2
1AF6:  BRA    1CC6
1AF8:  XORLW  01
1AFA:  BTFSC  FD8.2
1AFC:  BRA    1CCE
1AFE:  XORLW  03
1B00:  BTFSC  FD8.2
1B02:  BRA    1D12
1B04:  XORLW  01
1B06:  BTFSC  FD8.2
1B08:  BRA    1D56
1B0A:  XORLW  07
1B0C:  BTFSC  FD8.2
1B0E:  BRA    1D9A
1B10:  XORLW  01
1B12:  BTFSC  FD8.2
1B14:  BRA    1DDE
1B16:  BRA    1E22
.................... 				case 0x00:	//dummy command					 
.................... 					j+=2;	//set next data 
1B18:  MOVLW  02
1B1A:  MOVLB  3
1B1C:  ADDWF  x4A,F
.................... 					break; 
1B1E:  BRA    1E40
.................... 				case 0x01:	//dummy command					 
.................... 					j+=2;	//set next data 
1B20:  MOVLW  02
1B22:  MOVLB  3
1B24:  ADDWF  x4A,F
.................... 					break; 
1B26:  BRA    1E40
.................... 				case 0x02:	//dummy command					 
.................... 					j+=2;	//set next data 
1B28:  MOVLW  02
1B2A:  MOVLB  3
1B2C:  ADDWF  x4A,F
.................... 					break; 
1B2E:  BRA    1E40
.................... 				case 0x03:	//dummy command					 
.................... 					j+=2;	//set next data 
1B30:  MOVLW  02
1B32:  MOVLB  3
1B34:  ADDWF  x4A,F
.................... 					break; 
1B36:  BRA    1E40
.................... 				case 0x04:	//dummy command					 
.................... 					j+=2;	//set next data 
1B38:  MOVLW  02
1B3A:  MOVLB  3
1B3C:  ADDWF  x4A,F
.................... 					break; 
1B3E:  BRA    1E40
.................... 				case 0x05:	//dummy command					 
.................... 					j+=2;	//set next data 
1B40:  MOVLW  02
1B42:  MOVLB  3
1B44:  ADDWF  x4A,F
.................... 					break; 
1B46:  BRA    1E40
.................... 				case 0x06:	//dummy command					 
.................... 					j+=2;	//set next data 
1B48:  MOVLW  02
1B4A:  MOVLB  3
1B4C:  ADDWF  x4A,F
.................... 					break; 
1B4E:  BRA    1E40
.................... 				case 0x07:	//dummy command					 
.................... 					j+=2;	//set next data 
1B50:  MOVLW  02
1B52:  MOVLB  3
1B54:  ADDWF  x4A,F
.................... 					break; 
1B56:  BRA    1E40
.................... 				case 0x08:	//dummy command					 
.................... 					j+=2;	//set next data 
1B58:  MOVLW  02
1B5A:  MOVLB  3
1B5C:  ADDWF  x4A,F
.................... 					break; 
1B5E:  BRA    1E40
.................... 				case 0x09:	//dummy command					 
.................... 					j+=2;	//set next data 
1B60:  MOVLW  02
1B62:  MOVLB  3
1B64:  ADDWF  x4A,F
.................... 					break; 
1B66:  BRA    1E40
.................... 				case 0x0A:	//dummy command					 
.................... 					j+=2;	//set next data 
1B68:  MOVLW  02
1B6A:  MOVLB  3
1B6C:  ADDWF  x4A,F
.................... 					break; 
1B6E:  BRA    1E40
.................... 				case 0x0B:	//dummy command					 
.................... 					j+=2;	//set next data 
1B70:  MOVLW  02
1B72:  MOVLB  3
1B74:  ADDWF  x4A,F
.................... 					break; 
1B76:  BRA    1E40
.................... 				case 0x0C:	//dummy command					 
.................... 					j+=2;	//set next data 
1B78:  MOVLW  02
1B7A:  MOVLB  3
1B7C:  ADDWF  x4A,F
.................... 					break; 
1B7E:  BRA    1E40
.................... 				case 0x0D:	//dummy command					 
.................... 					j+=2;	//set next data 
1B80:  MOVLW  02
1B82:  MOVLB  3
1B84:  ADDWF  x4A,F
.................... 					break; 
1B86:  BRA    1E40
.................... 				case 0x0E:	//dummy command					 
.................... 					j+=2;	//set next data 
1B88:  MOVLW  02
1B8A:  MOVLB  3
1B8C:  ADDWF  x4A,F
.................... 					break; 
1B8E:  BRA    1E40
.................... 				case 0x0F:	//dummy command					 
.................... 					j+=2;	//set next data 
1B90:  MOVLW  02
1B92:  MOVLB  3
1B94:  ADDWF  x4A,F
.................... 					break; 
1B96:  BRA    1E40
.................... 				case 0x10:	//dummy command					 
.................... 					j+=2;	//set next data 
1B98:  MOVLW  02
1B9A:  MOVLB  3
1B9C:  ADDWF  x4A,F
.................... 					break; 
1B9E:  BRA    1E40
.................... 				case 0x11:	//dummy command					 
.................... 					j+=2;	//set next data 
1BA0:  MOVLW  02
1BA2:  MOVLB  3
1BA4:  ADDWF  x4A,F
.................... 					break; 
1BA6:  BRA    1E40
.................... 				case 0x12:	//set speed register 
.................... 					j+=2;	//set next data 
1BA8:  MOVLW  02
1BAA:  MOVLB  3
1BAC:  ADDWF  x4A,F
.................... 					break; 
1BAE:  BRA    1E40
.................... 				case 0x13:	//host address register - no action 
.................... 					//read data from buffer 
.................... 					Addr=make16(MB_Buffer[j],MB_Buffer[j+1]); 
1BB0:  MOVLW  3D
1BB2:  MOVLB  3
1BB4:  ADDWF  x4A,W
1BB6:  MOVWF  FE9
1BB8:  MOVLW  01
1BBA:  MOVWF  FEA
1BBC:  BTFSC  FD8.0
1BBE:  INCF   FEA,F
1BC0:  MOVFF  FEF,360
1BC4:  MOVLW  01
1BC6:  ADDWF  x4A,W
1BC8:  ADDLW  3D
1BCA:  MOVWF  FE9
1BCC:  MOVLW  01
1BCE:  MOVWF  FEA
1BD0:  BTFSC  FD8.0
1BD2:  INCF   FEA,F
1BD4:  MOVFF  FEF,361
1BD8:  MOVFF  360,127
1BDC:  MOVFF  361,126
.................... 					j+=2;	//set next data 
1BE0:  MOVLW  02
1BE2:  ADDWF  x4A,F
.................... 					break; 
1BE4:  BRA    1E40
.................... 				case 0x14:	//Valid request register	- no acton 
.................... 					j+=2;	//set next data 
1BE6:  MOVLW  02
1BE8:  MOVLB  3
1BEA:  ADDWF  x4A,F
.................... 					break; 
1BEC:  BRA    1E40
.................... 				case 0x15:	//CRC error register - no action 
.................... 					j+=2;	//set next data 
1BEE:  MOVLW  02
1BF0:  MOVLB  3
1BF2:  ADDWF  x4A,F
.................... 					break; 
1BF4:  BRA    1E40
.................... 				case 0x16:	//Exception register - no action 
.................... 					j+=2;	//set next data 
1BF6:  MOVLW  02
1BF8:  MOVLB  3
1BFA:  ADDWF  x4A,F
.................... 					break; 
1BFC:  BRA    1E40
.................... 				case 0x17:	//dummy command					 
.................... 					j+=2;	//set next data 
1BFE:  MOVLW  02
1C00:  MOVLB  3
1C02:  ADDWF  x4A,F
.................... 					break; 
1C04:  BRA    1E40
.................... 				case 0x18:	//dummy command					 
.................... 					j+=2;	//set next data 
1C06:  MOVLW  02
1C08:  MOVLB  3
1C0A:  ADDWF  x4A,F
.................... 					break; 
1C0C:  BRA    1E40
.................... 				case 0x19:	//dummy command					 
.................... 					j+=2;	//set next data 
1C0E:  MOVLW  02
1C10:  MOVLB  3
1C12:  ADDWF  x4A,F
.................... 					break; 
1C14:  BRA    1E40
.................... 				case 0x1A:	//dummy command					 
.................... 					j+=2;	//set next data 
1C16:  MOVLW  02
1C18:  MOVLB  3
1C1A:  ADDWF  x4A,F
.................... 					break; 
1C1C:  BRA    1E40
.................... 				case 0x1B:	//dummy command					 
.................... 					j+=2;	//set next data 
1C1E:  MOVLW  02
1C20:  MOVLB  3
1C22:  ADDWF  x4A,F
.................... 					break; 
1C24:  BRA    1E40
.................... 				case 0x1C:	//dummy command					 
.................... 					j+=2;	//set next data 
1C26:  MOVLW  02
1C28:  MOVLB  3
1C2A:  ADDWF  x4A,F
.................... 					break; 
1C2C:  BRA    1E40
.................... 				case 0x1D:	//dummy command					 
.................... 					j+=2;	//set next data 
1C2E:  MOVLW  02
1C30:  MOVLB  3
1C32:  ADDWF  x4A,F
.................... 					break; 
1C34:  BRA    1E40
.................... 				case 0x1E:	//dummy command					 
.................... 					j+=2;	//set next data 
1C36:  MOVLW  02
1C38:  MOVLB  3
1C3A:  ADDWF  x4A,F
.................... 					break; 
1C3C:  BRA    1E40
.................... 				case 0x1F:	//dummy command					 
.................... 					j+=2;	//set next data 
1C3E:  MOVLW  02
1C40:  MOVLB  3
1C42:  ADDWF  x4A,F
.................... 					break; 
1C44:  BRA    1E40
.................... 				case 0x20:	//dummy command					 
.................... 					j+=2;	//set next data 
1C46:  MOVLW  02
1C48:  MOVLB  3
1C4A:  ADDWF  x4A,F
.................... 					break; 
1C4C:  BRA    1E40
.................... 				case 0x21:	//dummy command					 
.................... 					j+=2;	//set next data 
1C4E:  MOVLW  02
1C50:  MOVLB  3
1C52:  ADDWF  x4A,F
.................... 					break; 
1C54:  BRA    1E40
.................... 				case 0x22:	//dummy command					 
.................... 					j+=2;	//set next data 
1C56:  MOVLW  02
1C58:  MOVLB  3
1C5A:  ADDWF  x4A,F
.................... 					break; 
1C5C:  BRA    1E40
.................... 				case 0x23:	//dummy command					 
.................... 					j+=2;	//set next data 
1C5E:  MOVLW  02
1C60:  MOVLB  3
1C62:  ADDWF  x4A,F
.................... 					break; 
1C64:  BRA    1E40
.................... 				case 0x24:	//dummy command					 
.................... 					j+=2;	//set next data 
1C66:  MOVLW  02
1C68:  MOVLB  3
1C6A:  ADDWF  x4A,F
.................... 					break; 
1C6C:  BRA    1E40
.................... 				case 0x25:	//dummy command					 
.................... 					j+=2;	//set next data 
1C6E:  MOVLW  02
1C70:  MOVLB  3
1C72:  ADDWF  x4A,F
.................... 					break; 
1C74:  BRA    1E40
.................... 				case 0x26:	//dummy command					 
.................... 					j+=2;	//set next data 
1C76:  MOVLW  02
1C78:  MOVLB  3
1C7A:  ADDWF  x4A,F
.................... 					break; 
1C7C:  BRA    1E40
.................... 				case 0x27:	//dummy command					 
.................... 					j+=2;	//set next data 
1C7E:  MOVLW  02
1C80:  MOVLB  3
1C82:  ADDWF  x4A,F
.................... 					break; 
1C84:  BRA    1E40
.................... 				case 0x28:	//dummy command					 
.................... 					j+=2;	//set next data 
1C86:  MOVLW  02
1C88:  MOVLB  3
1C8A:  ADDWF  x4A,F
.................... 					break; 
1C8C:  BRA    1E40
.................... 				case 0x29:	//dummy command					 
.................... 					j+=2;	//set next data 
1C8E:  MOVLW  02
1C90:  MOVLB  3
1C92:  ADDWF  x4A,F
.................... 					break; 
1C94:  BRA    1E40
.................... 				case 0x2A:	//dummy command					 
.................... 					j+=2;	//set next data 
1C96:  MOVLW  02
1C98:  MOVLB  3
1C9A:  ADDWF  x4A,F
.................... 					break; 
1C9C:  BRA    1E40
.................... 				case 0x2B:	//dummy command					 
.................... 					j+=2;	//set next data 
1C9E:  MOVLW  02
1CA0:  MOVLB  3
1CA2:  ADDWF  x4A,F
.................... 					break; 
1CA4:  BRA    1E40
.................... 				case 0x2C:	//dummy command					 
.................... 					j+=2;	//set next data 
1CA6:  MOVLW  02
1CA8:  MOVLB  3
1CAA:  ADDWF  x4A,F
.................... 					break; 
1CAC:  BRA    1E40
.................... 				case 0x2D:	//dummy command					 
.................... 					j+=2;	//set next data 
1CAE:  MOVLW  02
1CB0:  MOVLB  3
1CB2:  ADDWF  x4A,F
.................... 					break; 
1CB4:  BRA    1E40
.................... 				case 0x2E:	//dummy command					 
.................... 					j+=2;	//set next data 
1CB6:  MOVLW  02
1CB8:  MOVLB  3
1CBA:  ADDWF  x4A,F
.................... 					break; 
1CBC:  BRA    1E40
.................... 				case 0x2F:	//dummy command					 
.................... 					j+=2;	//set next data 
1CBE:  MOVLW  02
1CC0:  MOVLB  3
1CC2:  ADDWF  x4A,F
.................... 					break; 
1CC4:  BRA    1E40
.................... 				case 0x30:	//Scan code register -  no action 
.................... 					j+=2;	//set next data 
1CC6:  MOVLW  02
1CC8:  MOVLB  3
1CCA:  ADDWF  x4A,F
.................... 					break; 
1CCC:  BRA    1E40
.................... 				case 0x31:	//relay register 
.................... 					Relay=make16(MB_Buffer[j],MB_Buffer[j+1]); 
1CCE:  MOVLW  3D
1CD0:  MOVLB  3
1CD2:  ADDWF  x4A,W
1CD4:  MOVWF  FE9
1CD6:  MOVLW  01
1CD8:  MOVWF  FEA
1CDA:  BTFSC  FD8.0
1CDC:  INCF   FEA,F
1CDE:  MOVFF  FEF,360
1CE2:  MOVLW  01
1CE4:  ADDWF  x4A,W
1CE6:  ADDLW  3D
1CE8:  MOVWF  FE9
1CEA:  MOVLW  01
1CEC:  MOVWF  FEA
1CEE:  BTFSC  FD8.0
1CF0:  INCF   FEA,F
1CF2:  MOVFF  FEF,361
1CF6:  MOVFF  360,133
1CFA:  MOVFF  361,132
.................... 					SetRelay(Relay);	//set discrete outs 
1CFE:  MOVFF  133,361
1D02:  MOVFF  132,360
1D06:  MOVLB  0
1D08:  BRA    1876
.................... 					j+=2;	//set next data 
1D0A:  MOVLW  02
1D0C:  MOVLB  3
1D0E:  ADDWF  x4A,F
.................... 					break; 
1D10:  BRA    1E40
.................... 				case 0x32:	//output value 0 register				 
.................... 					ValOut0=make16(MB_Buffer[j],MB_Buffer[j+1]); 
1D12:  MOVLW  3D
1D14:  MOVLB  3
1D16:  ADDWF  x4A,W
1D18:  MOVWF  FE9
1D1A:  MOVLW  01
1D1C:  MOVWF  FEA
1D1E:  BTFSC  FD8.0
1D20:  INCF   FEA,F
1D22:  MOVFF  FEF,360
1D26:  MOVLW  01
1D28:  ADDWF  x4A,W
1D2A:  ADDLW  3D
1D2C:  MOVWF  FE9
1D2E:  MOVLW  01
1D30:  MOVWF  FEA
1D32:  BTFSC  FD8.0
1D34:  INCF   FEA,F
1D36:  MOVFF  FEF,361
1D3A:  MOVFF  360,12D
1D3E:  MOVFF  361,12C
.................... 					SetOutDac0(ValOut0);	//set dac 
1D42:  MOVFF  12D,361
1D46:  MOVFF  12C,360
1D4A:  MOVLB  0
1D4C:  RCALL  18C6
.................... 					j+=2;	//set next data 
1D4E:  MOVLW  02
1D50:  MOVLB  3
1D52:  ADDWF  x4A,F
.................... 					break; 
1D54:  BRA    1E40
.................... 				case 0x33:	//output value 1 register 
.................... 					ValOut1=make16(MB_Buffer[j],MB_Buffer[j+1]); 
1D56:  MOVLW  3D
1D58:  MOVLB  3
1D5A:  ADDWF  x4A,W
1D5C:  MOVWF  FE9
1D5E:  MOVLW  01
1D60:  MOVWF  FEA
1D62:  BTFSC  FD8.0
1D64:  INCF   FEA,F
1D66:  MOVFF  FEF,360
1D6A:  MOVLW  01
1D6C:  ADDWF  x4A,W
1D6E:  ADDLW  3D
1D70:  MOVWF  FE9
1D72:  MOVLW  01
1D74:  MOVWF  FEA
1D76:  BTFSC  FD8.0
1D78:  INCF   FEA,F
1D7A:  MOVFF  FEF,361
1D7E:  MOVFF  360,12F
1D82:  MOVFF  361,12E
.................... 					SetOutDac1(ValOut1);	//set dac 
1D86:  MOVFF  12F,361
1D8A:  MOVFF  12E,360
1D8E:  MOVLB  0
1D90:  RCALL  190C
.................... 					j+=2;	//set next data 
1D92:  MOVLW  02
1D94:  MOVLB  3
1D96:  ADDWF  x4A,F
.................... 					break; 
1D98:  BRA    1E40
.................... 				case 0x34:	//Out range 0 register 
.................... 					ValPot0=make16(MB_Buffer[j],MB_Buffer[j+1]); 
1D9A:  MOVLW  3D
1D9C:  MOVLB  3
1D9E:  ADDWF  x4A,W
1DA0:  MOVWF  FE9
1DA2:  MOVLW  01
1DA4:  MOVWF  FEA
1DA6:  BTFSC  FD8.0
1DA8:  INCF   FEA,F
1DAA:  MOVFF  FEF,360
1DAE:  MOVLW  01
1DB0:  ADDWF  x4A,W
1DB2:  ADDLW  3D
1DB4:  MOVWF  FE9
1DB6:  MOVLW  01
1DB8:  MOVWF  FEA
1DBA:  BTFSC  FD8.0
1DBC:  INCF   FEA,F
1DBE:  MOVFF  FEF,361
1DC2:  MOVFF  360,129
1DC6:  MOVFF  361,128
.................... 					SetAoutRange0(ValPot0);	//set pot 
1DCA:  MOVFF  129,361
1DCE:  MOVFF  128,360
1DD2:  MOVLB  0
1DD4:  RCALL  1952
.................... 					j+=2;	//set next data 
1DD6:  MOVLW  02
1DD8:  MOVLB  3
1DDA:  ADDWF  x4A,F
.................... 					break; 
1DDC:  BRA    1E40
.................... 				case 0x35:	//Out range 1 register 
.................... 					ValPot1=make16(MB_Buffer[j],MB_Buffer[j+1]); 
1DDE:  MOVLW  3D
1DE0:  MOVLB  3
1DE2:  ADDWF  x4A,W
1DE4:  MOVWF  FE9
1DE6:  MOVLW  01
1DE8:  MOVWF  FEA
1DEA:  BTFSC  FD8.0
1DEC:  INCF   FEA,F
1DEE:  MOVFF  FEF,360
1DF2:  MOVLW  01
1DF4:  ADDWF  x4A,W
1DF6:  ADDLW  3D
1DF8:  MOVWF  FE9
1DFA:  MOVLW  01
1DFC:  MOVWF  FEA
1DFE:  BTFSC  FD8.0
1E00:  INCF   FEA,F
1E02:  MOVFF  FEF,361
1E06:  MOVFF  360,12B
1E0A:  MOVFF  361,12A
.................... 					SetAoutRange1(ValPot1);	//set pot 
1E0E:  MOVFF  12B,361
1E12:  MOVFF  12A,360
1E16:  MOVLB  0
1E18:  RCALL  198E
.................... 					j+=2;	//set next data 
1E1A:  MOVLW  02
1E1C:  MOVLB  3
1E1E:  ADDWF  x4A,F
.................... 					break; 
1E20:  BRA    1E40
.................... 				default:	//no valid registers							 
.................... 					MB_Buffer[1]|=0x80; 
1E22:  MOVLB  1
1E24:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_value; 
1E26:  MOVLW  03
1E28:  MOVWF  x3F
.................... 					MB_Length=5; 
1E2A:  MOVLB  3
1E2C:  CLRF   x3E
1E2E:  MOVLW  05
1E30:  MOVWF  x3D
.................... 					ExcReq++; 
1E32:  INCF   x43,F
1E34:  BTFSC  FD8.2
1E36:  INCF   x44,F
.................... 					ValidReq--; 
1E38:  MOVF   x3F,W
1E3A:  BTFSC  FD8.2
1E3C:  DECF   x40,F
1E3E:  DECF   x3F,F
.................... 			};	 
.................... } 
1E40:  MOVLB  0
1E42:  GOTO   242C (RETURN)
.................... // 
.................... //timer 2 interrupt vector - packet recognition 
.................... #INT_TIMER1 
.................... void	Reaction(void){ 
.................... 	int8	StAddr,EnAddr;	 
.................... 	//end of tramsmittion process 
.................... 	disable_interrupts(INT_RDA); 
*
2242:  BCF    F9D.5
.................... //	output_low(STAT);	//on led 
.................... 	// 
.................... 	if (MB_Length<4)	goto exit;	//exit if to small 
2244:  MOVLB  3
2246:  MOVF   x3E,F
2248:  BNZ   2254
224A:  MOVF   x3D,W
224C:  SUBLW  03
224E:  BNC   2254
2250:  GOTO   29B4
.................... 	//detect adress 
.................... 	if(MB_Buffer[0]!=make8(Addr,0))	if (MB_Buffer[0]!=0)	goto exit;	//if not broadcast & not qwn address - then exit 
2254:  MOVLB  1
2256:  MOVF   x26,W
2258:  SUBWF  x3D,W
225A:  BZ    2266
225C:  MOVF   x3D,F
225E:  BZ    2266
2260:  MOVLB  3
2262:  GOTO   29B4
.................... 	//calculate CRC 
.................... 	CRCc=ModbusCRC(MB_Buffer,MB_Length-2); 
2266:  MOVLW  02
2268:  MOVLB  3
226A:  SUBWF  x3D,W
226C:  MOVWF  x5F
226E:  MOVLW  00
2270:  SUBWFB x3E,W
2272:  MOVWF  x60
2274:  MOVLW  01
2276:  MOVWF  x62
2278:  MOVLW  3D
227A:  MOVWF  x61
227C:  MOVFF  35F,363
2280:  MOVLB  0
2282:  CALL   0BE0
2286:  MOVFF  02,348
228A:  MOVFF  01,347
.................... 	CRCr=make16(MB_Buffer[MB_Length-2],MB_Buffer[MB_Length-1]); 
228E:  MOVLW  02
2290:  MOVLB  3
2292:  SUBWF  x3D,W
2294:  MOVWF  x5F
2296:  MOVLW  00
2298:  SUBWFB x3E,W
229A:  MOVWF  x60
229C:  MOVLW  3D
229E:  ADDWF  x5F,W
22A0:  MOVWF  FE9
22A2:  MOVLW  01
22A4:  ADDWFC x60,W
22A6:  MOVWF  FEA
22A8:  MOVFF  FEF,35F
22AC:  MOVLW  01
22AE:  SUBWF  x3D,W
22B0:  MOVWF  x60
22B2:  MOVLW  00
22B4:  SUBWFB x3E,W
22B6:  MOVWF  x61
22B8:  MOVLW  3D
22BA:  ADDWF  x60,W
22BC:  MOVWF  FE9
22BE:  MOVLW  01
22C0:  ADDWFC x61,W
22C2:  MOVWF  FEA
22C4:  MOVFF  FEF,360
22C8:  MOVFF  35F,346
22CC:  MOVFF  360,345
.................... 	// 
.................... 	if(CRCc!=CRCr){				//if error CRC then exit 
22D0:  MOVF   x45,W
22D2:  SUBWF  x47,W
22D4:  BNZ   22DC
22D6:  MOVF   x46,W
22D8:  SUBWF  x48,W
22DA:  BZ    22E6
.................... 		CRCReq++;	 
22DC:  INCF   x41,F
22DE:  BTFSC  FD8.2
22E0:  INCF   x42,F
.................... 		goto exit; 
22E2:  GOTO   29B4
.................... 	}; 
.................... 	//proceed command 
.................... 	//analizing function code 
.................... 	switch(MB_Buffer[1]){ 
22E6:  MOVLB  1
22E8:  MOVF   x3E,W
22EA:  XORLW  42
22EC:  MOVLB  0
22EE:  BZ    2338
22F0:  XORLW  06
22F2:  BZ    2384
22F4:  XORLW  01
22F6:  BTFSC  FD8.2
22F8:  BRA    23E4
22FA:  XORLW  03
22FC:  BTFSC  FD8.2
22FE:  BRA    244E
2300:  XORLW  01
2302:  BTFSC  FD8.2
2304:  BRA    248C
2306:  XORLW  0F
2308:  BTFSC  FD8.2
230A:  BRA    24CA
230C:  XORLW  2D
230E:  BTFSC  FD8.2
2310:  BRA    2508
2312:  XORLW  03
2314:  BTFSC  FD8.2
2316:  BRA    2542
2318:  XORLW  01
231A:  BTFSC  FD8.2
231C:  BRA    257C
231E:  XORLW  0F
2320:  BTFSC  FD8.2
2322:  BRA    2602
2324:  XORLW  01
2326:  BTFSC  FD8.2
2328:  BRA    26B2
232A:  XORLW  03
232C:  BTFSC  FD8.2
232E:  BRA    27A8
2330:  XORLW  01
2332:  BTFSC  FD8.2
2334:  BRA    289E
2336:  BRA    2908
.................... 		//CMODE 
.................... 		case	0x42: 
.................... 				if(MB_Length==5){ 
2338:  MOVLB  3
233A:  MOVF   x3D,W
233C:  SUBLW  05
233E:  BNZ   236A
2340:  MOVF   x3E,F
2342:  BNZ   236A
.................... 					if(MB_Buffer[2]==2){ 
2344:  MOVLB  1
2346:  MOVF   x3F,W
2348:  SUBLW  02
234A:  BNZ   2350
.................... 						reset_cpu(); 
234C:  RESET
.................... 						}else{ 
234E:  BRA    2366
.................... 						MB_Buffer[1]|=0x80; 
2350:  BSF    x3E.7
.................... 						MB_Buffer[2]=illegal_data_value; 
2352:  MOVLW  03
2354:  MOVWF  x3F
.................... 						ExcReq++; 
2356:  MOVLB  3
2358:  INCF   x43,F
235A:  BTFSC  FD8.2
235C:  INCF   x44,F
.................... 						MB_Length=5; 
235E:  CLRF   x3E
2360:  MOVLW  05
2362:  MOVWF  x3D
2364:  MOVLB  1
.................... 						}; 
.................... 					}else{ 
2366:  BRA    2382
2368:  MOVLB  3
.................... 					MB_Buffer[1]|=0x80; 
236A:  MOVLB  1
236C:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
236E:  MOVLW  02
2370:  MOVWF  x3F
.................... 					MB_Length=5; 
2372:  MOVLB  3
2374:  CLRF   x3E
2376:  MOVLW  05
2378:  MOVWF  x3D
.................... 					ExcReq++; 
237A:  INCF   x43,F
237C:  BTFSC  FD8.2
237E:  INCF   x44,F
2380:  MOVLB  1
.................... 					}; 
.................... 				break; 
2382:  BRA    2920
.................... 		//get registers 
.................... 		case	0x44: 
.................... 				if(MB_Length==7){ 
2384:  MOVLB  3
2386:  MOVF   x3D,W
2388:  SUBLW  07
238A:  BNZ   23CA
238C:  MOVF   x3E,F
238E:  BNZ   23CA
.................... 					//valig req propose 
.................... 					MB_Length=4; 
2390:  CLRF   x3E
2392:  MOVLW  04
2394:  MOVWF  x3D
.................... 					ValidReq++; 
2396:  INCF   x3F,F
2398:  BTFSC  FD8.2
239A:  INCF   x40,F
.................... 					//action 
.................... 					//forming answer 
.................... 					j=2;	//set start answer pointer 
239C:  MOVLW  02
239E:  MOVWF  x4A
.................... 					StAddr=MB_Buffer[3]; 
23A0:  MOVFF  140,35D
.................... 					EnAddr=(MB_Buffer[3]+MB_Buffer[4]); 
23A4:  MOVLB  1
23A6:  MOVF   x41,W
23A8:  ADDWF  x40,W
23AA:  MOVLB  3
23AC:  MOVWF  x5E
.................... 					for(i=StAddr; i<EnAddr; i++){ 
23AE:  MOVFF  35D,349
23B2:  MOVF   x5E,W
23B4:  SUBWF  x49,W
23B6:  BC    23C8
.................... 						AddRegData(i);		//get registers 
23B8:  MOVFF  349,35F
23BC:  MOVLB  0
23BE:  GOTO   0C38
.................... 					}; 
23C2:  MOVLB  3
23C4:  INCF   x49,F
23C6:  BRA    23B2
.................... 					}else{ 
23C8:  BRA    23E0
.................... 					MB_Buffer[1]|=0x80; 
23CA:  MOVLB  1
23CC:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
23CE:  MOVLW  02
23D0:  MOVWF  x3F
.................... 					MB_Length=5; 
23D2:  MOVLB  3
23D4:  CLRF   x3E
23D6:  MOVLW  05
23D8:  MOVWF  x3D
.................... 					ExcReq++; 
23DA:  INCF   x43,F
23DC:  BTFSC  FD8.2
23DE:  INCF   x44,F
.................... 					};		 
.................... 				break; 
23E0:  MOVLB  1
23E2:  BRA    2920
.................... 		//set registers 
.................... 		case	0x45: 
.................... 				if((MB_Length>=8)&&(!(MB_Length&0x01))){ 
23E4:  MOVLB  3
23E6:  MOVF   x3E,F
23E8:  BNZ   23F0
23EA:  MOVF   x3D,W
23EC:  SUBLW  07
23EE:  BC    2434
23F0:  MOVF   x3D,W
23F2:  ANDLW  01
23F4:  MOVWF  00
23F6:  CLRF   03
23F8:  MOVF   00,W
23FA:  IORWF  03,W
23FC:  BNZ   2434
.................... 					//action 
.................... 					//action 
.................... 					j=4;	//set start answer pointer 
23FE:  MOVLW  04
2400:  MOVWF  x4A
.................... 					StAddr=MB_Buffer[3]; 
2402:  MOVFF  140,35D
.................... 					EnAddr=MB_Length-2; 
2406:  MOVLW  02
2408:  SUBWF  x3D,W
240A:  MOVWF  x5E
.................... 					//valig req propose 
.................... 					MB_Length=4; 
240C:  CLRF   x3E
240E:  MOVLW  04
2410:  MOVWF  x3D
.................... 					ValidReq++; 
2412:  INCF   x3F,F
2414:  BTFSC  FD8.2
2416:  INCF   x40,F
.................... 					for(i=StAddr; j<EnAddr; i++){ 
2418:  MOVFF  35D,349
241C:  MOVF   x5E,W
241E:  SUBWF  x4A,W
2420:  BC    2432
.................... 						SetRegData(i);		//get registers 
2422:  MOVFF  349,35F
2426:  MOVLB  0
2428:  GOTO   19CA
.................... 					}; 
242C:  MOVLB  3
242E:  INCF   x49,F
2430:  BRA    241C
.................... 					//forming answer 
.................... 					}else{ 
2432:  BRA    244A
.................... 					MB_Buffer[1]|=0x80; 
2434:  MOVLB  1
2436:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
2438:  MOVLW  02
243A:  MOVWF  x3F
.................... 					MB_Length=5; 
243C:  MOVLB  3
243E:  CLRF   x3E
2440:  MOVLW  05
2442:  MOVWF  x3D
.................... 					ExcReq++; 
2444:  INCF   x43,F
2446:  BTFSC  FD8.2
2448:  INCF   x44,F
.................... 					};		 
.................... 				break; 
244A:  MOVLB  1
244C:  BRA    2920
.................... 		//GetLCDStatus 
.................... 		case	0x46: 
.................... 				if(MB_Length==4){ 
244E:  MOVLB  3
2450:  MOVF   x3D,W
2452:  SUBLW  04
2454:  BNZ   2472
2456:  MOVF   x3E,F
2458:  BNZ   2472
.................... 					MB_Buffer[2]=GetStatusLCD(); 
245A:  MOVLB  0
245C:  RCALL  1E46
245E:  MOVFF  01,13F
.................... 					MB_Length=5; 
2462:  MOVLB  3
2464:  CLRF   x3E
2466:  MOVLW  05
2468:  MOVWF  x3D
.................... 					ValidReq++; 
246A:  INCF   x3F,F
246C:  BTFSC  FD8.2
246E:  INCF   x40,F
.................... 					}else{ 
2470:  BRA    2488
.................... 					MB_Buffer[1]|=0x80; 
2472:  MOVLB  1
2474:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
2476:  MOVLW  02
2478:  MOVWF  x3F
.................... 					MB_Length=5; 
247A:  MOVLB  3
247C:  CLRF   x3E
247E:  MOVLW  05
2480:  MOVWF  x3D
.................... 					ExcReq++; 
2482:  INCF   x43,F
2484:  BTFSC  FD8.2
2486:  INCF   x44,F
.................... 					};		 
.................... 				break; 
2488:  MOVLB  1
248A:  BRA    2920
.................... 		//SetLCDCommand 
.................... 		case	0x47: 
.................... 				if(MB_Length==5){ 
248C:  MOVLB  3
248E:  MOVF   x3D,W
2490:  SUBLW  05
2492:  BNZ   24B0
2494:  MOVF   x3E,F
2496:  BNZ   24B0
.................... 					SetCommandLCD(MB_Buffer[2]); 
2498:  MOVFF  13F,363
249C:  MOVLB  0
249E:  RCALL  1E7A
.................... 					MB_Length=4; 
24A0:  MOVLB  3
24A2:  CLRF   x3E
24A4:  MOVLW  04
24A6:  MOVWF  x3D
.................... 					ValidReq++; 
24A8:  INCF   x3F,F
24AA:  BTFSC  FD8.2
24AC:  INCF   x40,F
.................... 					}else{ 
24AE:  BRA    24C6
.................... 					MB_Buffer[1]|=0x80; 
24B0:  MOVLB  1
24B2:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
24B4:  MOVLW  02
24B6:  MOVWF  x3F
.................... 					MB_Length=5; 
24B8:  MOVLB  3
24BA:  CLRF   x3E
24BC:  MOVLW  05
24BE:  MOVWF  x3D
.................... 					ExcReq++; 
24C0:  INCF   x43,F
24C2:  BTFSC  FD8.2
24C4:  INCF   x44,F
.................... 					};		 
.................... 				break; 
24C6:  MOVLB  1
24C8:  BRA    2920
.................... 		//SetLCDData 
.................... 		case	0x48: 
.................... 				if(MB_Length==5){ 
24CA:  MOVLB  3
24CC:  MOVF   x3D,W
24CE:  SUBLW  05
24D0:  BNZ   24EE
24D2:  MOVF   x3E,F
24D4:  BNZ   24EE
.................... 					SetDataLCD(MB_Buffer[2]); 
24D6:  MOVFF  13F,364
24DA:  MOVLB  0
24DC:  RCALL  1EA4
.................... 					MB_Length=4; 
24DE:  MOVLB  3
24E0:  CLRF   x3E
24E2:  MOVLW  04
24E4:  MOVWF  x3D
.................... 					ValidReq++; 
24E6:  INCF   x3F,F
24E8:  BTFSC  FD8.2
24EA:  INCF   x40,F
.................... 					}else{ 
24EC:  BRA    2504
.................... 					MB_Buffer[1]|=0x80; 
24EE:  MOVLB  1
24F0:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
24F2:  MOVLW  02
24F4:  MOVWF  x3F
.................... 					MB_Length=5; 
24F6:  MOVLB  3
24F8:  CLRF   x3E
24FA:  MOVLW  05
24FC:  MOVWF  x3D
.................... 					ExcReq++; 
24FE:  INCF   x43,F
2500:  BTFSC  FD8.2
2502:  INCF   x44,F
.................... 					};		 
.................... 				break; 
2504:  MOVLB  1
2506:  BRA    2920
.................... 		//write to EEPROM command 
.................... 		case	0x65: 
.................... 				if(MB_Length==4){ 
2508:  MOVLB  3
250A:  MOVF   x3D,W
250C:  SUBLW  04
250E:  BNZ   2528
2510:  MOVF   x3E,F
2512:  BNZ   2528
.................... 					BUWrite(); 
2514:  MOVLB  0
2516:  BRA    1ED2
.................... 					MB_Length=4; 
2518:  MOVLB  3
251A:  CLRF   x3E
251C:  MOVLW  04
251E:  MOVWF  x3D
.................... 					ValidReq++; 
2520:  INCF   x3F,F
2522:  BTFSC  FD8.2
2524:  INCF   x40,F
.................... 					}else{ 
2526:  BRA    253E
.................... 					MB_Buffer[1]|=0x80; 
2528:  MOVLB  1
252A:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
252C:  MOVLW  02
252E:  MOVWF  x3F
.................... 					MB_Length=5; 
2530:  MOVLB  3
2532:  CLRF   x3E
2534:  MOVLW  05
2536:  MOVWF  x3D
.................... 					ExcReq++; 
2538:  INCF   x43,F
253A:  BTFSC  FD8.2
253C:  INCF   x44,F
.................... 					};		 
.................... 				break; 
253E:  MOVLB  1
2540:  BRA    2920
.................... 		//ClrScr 
.................... 		case	0x66: 
.................... 				if(MB_Length==4){ 
2542:  MOVLB  3
2544:  MOVF   x3D,W
2546:  SUBLW  04
2548:  BNZ   2562
254A:  MOVF   x3E,F
254C:  BNZ   2562
.................... 					ClrTxt(); 
254E:  MOVLB  0
2550:  RCALL  2106
.................... //					ClrGrph(); 
.................... 					MB_Length=4; 
2552:  MOVLB  3
2554:  CLRF   x3E
2556:  MOVLW  04
2558:  MOVWF  x3D
.................... 					ValidReq++; 
255A:  INCF   x3F,F
255C:  BTFSC  FD8.2
255E:  INCF   x40,F
.................... 					}else{ 
2560:  BRA    2578
.................... 					MB_Buffer[1]|=0x80; 
2562:  MOVLB  1
2564:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
2566:  MOVLW  02
2568:  MOVWF  x3F
.................... 					MB_Length=5; 
256A:  MOVLB  3
256C:  CLRF   x3E
256E:  MOVLW  05
2570:  MOVWF  x3D
.................... 					ExcReq++; 
2572:  INCF   x43,F
2574:  BTFSC  FD8.2
2576:  INCF   x44,F
.................... 					};		 
.................... 				break; 
2578:  MOVLB  1
257A:  BRA    2920
.................... 		//SetCursor 
.................... 		case	0x67: 
.................... 				if(MB_Length==6){ 
257C:  MOVLB  3
257E:  MOVF   x3D,W
2580:  SUBLW  06
2582:  BNZ   25E8
2584:  MOVF   x3E,F
2586:  BNZ   25E8
.................... 					if((MB_Buffer[2]<COLS)&(MB_Buffer[3]<ROWS)){	//if coord in screen then on cursor 
2588:  MOVLB  1
258A:  MOVF   x3F,W
258C:  SUBLW  13
258E:  BC    2594
2590:  MOVLW  00
2592:  BRA    2596
2594:  MOVLW  01
2596:  MOVLB  3
2598:  MOVWF  x5F
259A:  MOVLB  1
259C:  MOVF   x40,W
259E:  SUBLW  0F
25A0:  BC    25A6
25A2:  MOVLW  00
25A4:  BRA    25A8
25A6:  MOVLW  01
25A8:  MOVLB  3
25AA:  ANDWF  x5F,W
25AC:  BZ    25D0
.................... 						SetCommandLCD(0x9f);	//on cursor 
25AE:  MOVLW  9F
25B0:  MOVWF  x63
25B2:  MOVLB  0
25B4:  RCALL  1E7A
.................... 						SetDataLCD(MB_Buffer[2]);			//set x 
25B6:  MOVFF  13F,364
25BA:  RCALL  1EA4
.................... 						SetDataLCD(MB_Buffer[3]);			//set y 
25BC:  MOVFF  140,364
25C0:  RCALL  1EA4
.................... 						SetCommandLCD(0x21);	//set position 
25C2:  MOVLW  21
25C4:  MOVLB  3
25C6:  MOVWF  x63
25C8:  MOVLB  0
25CA:  RCALL  1E7A
.................... 						} 
.................... 						else	SetCommandLCD(0x9C);	//else off cursor 
25CC:  BRA    25D8
25CE:  MOVLB  3
25D0:  MOVLW  9C
25D2:  MOVWF  x63
25D4:  MOVLB  0
25D6:  RCALL  1E7A
.................... 					MB_Length=4; 
25D8:  MOVLB  3
25DA:  CLRF   x3E
25DC:  MOVLW  04
25DE:  MOVWF  x3D
.................... 					ValidReq++; 
25E0:  INCF   x3F,F
25E2:  BTFSC  FD8.2
25E4:  INCF   x40,F
.................... 					}else{ 
25E6:  BRA    25FE
.................... 					MB_Buffer[1]|=0x80; 
25E8:  MOVLB  1
25EA:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
25EC:  MOVLW  02
25EE:  MOVWF  x3F
.................... 					MB_Length=5; 
25F0:  MOVLB  3
25F2:  CLRF   x3E
25F4:  MOVLW  05
25F6:  MOVWF  x3D
.................... 					ExcReq++; 
25F8:  INCF   x43,F
25FA:  BTFSC  FD8.2
25FC:  INCF   x44,F
.................... 					};		 
.................... 				break; 
25FE:  MOVLB  1
2600:  BRA    2920
.................... 		//PrintXY 
.................... 		case	0x68: 
.................... 				if(MB_Length>6){ 
2602:  MOVLB  3
2604:  MOVF   x3E,F
2606:  BNZ   260E
2608:  MOVF   x3D,W
260A:  SUBLW  06
260C:  BC    2698
.................... 					for(i=4;i< MB_Length-2; i++){ 
260E:  MOVLW  04
2610:  MOVWF  x49
2612:  MOVLW  02
2614:  SUBWF  x3D,W
2616:  MOVWF  00
2618:  MOVLW  00
261A:  SUBWFB x3E,W
261C:  MOVWF  03
261E:  MOVFF  00,01
2622:  MOVF   03,F
2624:  BNZ   262C
2626:  MOVF   01,W
2628:  SUBWF  x49,W
262A:  BC    265C
.................... 						string[i-4]=MB_Buffer[i]; 
262C:  MOVLW  04
262E:  SUBWF  x49,W
2630:  CLRF   03
2632:  ADDLW  22
2634:  MOVWF  01
2636:  MOVLW  00
2638:  ADDWFC 03,F
263A:  MOVLW  3D
263C:  ADDWF  x49,W
263E:  MOVWF  FE9
2640:  MOVLW  01
2642:  MOVWF  FEA
2644:  BTFSC  FD8.0
2646:  INCF   FEA,F
2648:  MOVFF  FEF,361
264C:  MOVFF  03,FEA
2650:  MOVFF  01,FE9
2654:  MOVFF  361,FEF
.................... 					}; 
2658:  INCF   x49,F
265A:  BRA    2612
.................... 					string[MB_Length-6]=0; 
265C:  MOVLW  06
265E:  SUBWF  x3D,W
2660:  MOVWF  x5F
2662:  MOVLW  00
2664:  SUBWFB x3E,W
2666:  MOVWF  x60
2668:  MOVLW  22
266A:  ADDWF  x5F,W
266C:  MOVWF  FE9
266E:  MOVLW  00
2670:  ADDWFC x60,W
2672:  MOVWF  FEA
2674:  CLRF   FEF
.................... 					PrintXY(MB_Buffer[2],MB_Buffer[3],string); 
2676:  MOVFF  13F,35F
267A:  MOVFF  140,360
267E:  CLRF   x62
2680:  MOVLW  22
2682:  MOVWF  x61
2684:  MOVLB  0
2686:  RCALL  2166
.................... 					MB_Length=4; 
2688:  MOVLB  3
268A:  CLRF   x3E
268C:  MOVLW  04
268E:  MOVWF  x3D
.................... 					ValidReq++; 
2690:  INCF   x3F,F
2692:  BTFSC  FD8.2
2694:  INCF   x40,F
.................... 					}else{ 
2696:  BRA    26AE
.................... 					MB_Buffer[1]|=0x80; 
2698:  MOVLB  1
269A:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
269C:  MOVLW  02
269E:  MOVWF  x3F
.................... 					MB_Length=5; 
26A0:  MOVLB  3
26A2:  CLRF   x3E
26A4:  MOVLW  05
26A6:  MOVWF  x3D
.................... 					ExcReq++; 
26A8:  INCF   x43,F
26AA:  BTFSC  FD8.2
26AC:  INCF   x44,F
.................... 					};		 
.................... 				break; 
26AE:  MOVLB  1
26B0:  BRA    2920
.................... 		//Draw line/Point 
.................... 		case	0x69: 
.................... 				switch(MB_Length){ 
26B2:  MOVLB  3
26B4:  MOVF   x3D,W
26B6:  MOVWF  00
26B8:  MOVF   x3E,W
26BA:  MOVWF  03
26BC:  MOVF   03,W
26BE:  BNZ   26CA
26C0:  MOVLW  07
26C2:  SUBWF  00,W
26C4:  MOVLB  0
26C6:  BZ    26DA
26C8:  MOVLB  3
26CA:  MOVF   03,W
26CC:  BNZ   26D8
26CE:  MOVLW  09
26D0:  SUBWF  00,W
26D2:  MOVLB  0
26D4:  BZ    2726
26D6:  MOVLB  3
26D8:  BRA    278E
.................... 					case 7:	//point 
.................... 						//coord validation 
.................... 						i=0; 
26DA:  MOVLB  3
26DC:  CLRF   x49
.................... 						if(MB_Buffer[2]>159)	i=0xff; 
26DE:  MOVLB  1
26E0:  MOVF   x3F,W
26E2:  SUBLW  9F
26E4:  BC    26EE
26E6:  MOVLW  FF
26E8:  MOVLB  3
26EA:  MOVWF  x49
26EC:  MOVLB  1
.................... 						if(MB_Buffer[3]>127)	i=0xff; 
26EE:  MOVF   x40,W
26F0:  SUBLW  7F
26F2:  BC    26FA
26F4:  MOVLW  FF
26F6:  MOVLB  3
26F8:  MOVWF  x49
.................... 						if(i==0){ 
26FA:  MOVLB  3
26FC:  MOVF   x49,F
26FE:  BNZ   270E
.................... //							glcd_pixel(MB_Buffer[2],MB_Buffer[3],bit_test(MB_Buffer[4],0)); 
.................... 							MB_Length=4; 
2700:  CLRF   x3E
2702:  MOVLW  04
2704:  MOVWF  x3D
.................... 							ValidReq++; 
2706:  INCF   x3F,F
2708:  BTFSC  FD8.2
270A:  INCF   x40,F
.................... 							} 
.................... 							else{								 
270C:  BRA    2724
.................... 								MB_Buffer[1]|=0x80; 
270E:  MOVLB  1
2710:  BSF    x3E.7
.................... 								MB_Buffer[2]=illegal_data_value; 
2712:  MOVLW  03
2714:  MOVWF  x3F
.................... 								MB_Length=5; 
2716:  MOVLB  3
2718:  CLRF   x3E
271A:  MOVLW  05
271C:  MOVWF  x3D
.................... 								ExcReq++; 
271E:  INCF   x43,F
2720:  BTFSC  FD8.2
2722:  INCF   x44,F
.................... 								}; 
.................... 						break; 
2724:  BRA    27A4
.................... 					case 9:	//line 
.................... 						//coord validation 
.................... 						i=0; 
2726:  MOVLB  3
2728:  CLRF   x49
.................... 						if(MB_Buffer[2]>159)	i=0xff; 
272A:  MOVLB  1
272C:  MOVF   x3F,W
272E:  SUBLW  9F
2730:  BC    273A
2732:  MOVLW  FF
2734:  MOVLB  3
2736:  MOVWF  x49
2738:  MOVLB  1
.................... 						if(MB_Buffer[3]>127)	i=0xff; 
273A:  MOVF   x40,W
273C:  SUBLW  7F
273E:  BC    2748
2740:  MOVLW  FF
2742:  MOVLB  3
2744:  MOVWF  x49
2746:  MOVLB  1
.................... 						if(MB_Buffer[4]>159)	i=0xff; 
2748:  MOVF   x41,W
274A:  SUBLW  9F
274C:  BC    2756
274E:  MOVLW  FF
2750:  MOVLB  3
2752:  MOVWF  x49
2754:  MOVLB  1
.................... 						if(MB_Buffer[5]>127)	i=0xff; 
2756:  MOVF   x42,W
2758:  SUBLW  7F
275A:  BC    2762
275C:  MOVLW  FF
275E:  MOVLB  3
2760:  MOVWF  x49
.................... 						if(i==0){ 
2762:  MOVLB  3
2764:  MOVF   x49,F
2766:  BNZ   2776
.................... //							glcd_line(MB_Buffer[2],MB_Buffer[3],MB_Buffer[4],MB_Buffer[5],bit_test(MB_Buffer[6],0)); 
.................... 							MB_Length=4; 
2768:  CLRF   x3E
276A:  MOVLW  04
276C:  MOVWF  x3D
.................... 							ValidReq++; 
276E:  INCF   x3F,F
2770:  BTFSC  FD8.2
2772:  INCF   x40,F
.................... 							} 
.................... 							else{								 
2774:  BRA    278C
.................... 								MB_Buffer[1]|=0x80; 
2776:  MOVLB  1
2778:  BSF    x3E.7
.................... 								MB_Buffer[2]=illegal_data_value; 
277A:  MOVLW  03
277C:  MOVWF  x3F
.................... 								MB_Length=5; 
277E:  MOVLB  3
2780:  CLRF   x3E
2782:  MOVLW  05
2784:  MOVWF  x3D
.................... 								ExcReq++; 
2786:  INCF   x43,F
2788:  BTFSC  FD8.2
278A:  INCF   x44,F
.................... 								}; 
.................... 						break; 
278C:  BRA    27A4
.................... 					default:					 
.................... 						MB_Buffer[1]|=0x80; 
278E:  MOVLB  1
2790:  BSF    x3E.7
.................... 						MB_Buffer[2]=illegal_data_address; 
2792:  MOVLW  02
2794:  MOVWF  x3F
.................... 						MB_Length=5; 
2796:  MOVLB  3
2798:  CLRF   x3E
279A:  MOVLW  05
279C:  MOVWF  x3D
.................... 						ExcReq++; 
279E:  INCF   x43,F
27A0:  BTFSC  FD8.2
27A2:  INCF   x44,F
.................... 					}; 
.................... 				break; 
27A4:  MOVLB  1
27A6:  BRA    2920
.................... 		//set speed 
.................... 		case	0x6A: 
.................... 				if(MB_Length==5){ 
27A8:  MOVLB  3
27AA:  MOVF   x3D,W
27AC:  SUBLW  05
27AE:  BTFSS  FD8.2
27B0:  BRA    2882
27B2:  MOVF   x3E,F
27B4:  BTFSS  FD8.2
27B6:  BRA    2882
.................... 					MB_Length=4; 
27B8:  CLRF   x3E
27BA:  MOVLW  04
27BC:  MOVWF  x3D
.................... 					ValidReq++; 
27BE:  INCF   x3F,F
27C0:  BTFSC  FD8.2
27C2:  INCF   x40,F
.................... 					switch(MB_Buffer[2]){ 
27C4:  MOVLB  1
27C6:  MOVF   x3F,W
27C8:  XORLW  00
27CA:  MOVLB  0
27CC:  BZ    27EC
27CE:  XORLW  01
27D0:  BZ    280A
27D2:  XORLW  03
27D4:  BZ    2816
27D6:  XORLW  01
27D8:  BZ    2822
27DA:  XORLW  07
27DC:  BZ    282E
27DE:  XORLW  01
27E0:  BZ    283A
27E2:  XORLW  03
27E4:  BZ    2846
27E6:  XORLW  01
27E8:  BZ    2852
27EA:  BRA    285C
.................... 						case	0x00:	//1200 
.................... 							Speed=1200; 
27EC:  MOVLW  04
27EE:  MOVLB  1
27F0:  MOVWF  x25
27F2:  MOVLW  B0
27F4:  MOVWF  x24
.................... 							setup_uart(1200); 
27F6:  BSF    FB8.3
27F8:  MOVLW  0A
27FA:  MOVWF  FAF
27FC:  MOVLW  1A
27FE:  MOVWF  FB0
2800:  MOVLW  A6
2802:  MOVWF  FAC
2804:  NOP   
2806:  NOP   
.................... 							break; 
2808:  BRA    2874
.................... 						case	0x01:	//1800 
.................... 							Speed=1800; 
280A:  MOVLW  07
280C:  MOVLB  1
280E:  MOVWF  x25
2810:  MOVLW  08
2812:  MOVWF  x24
.................... //							setup_uart(1800); 
.................... 							break; 
2814:  BRA    2874
.................... 						case	0x02:	//2400 
.................... 							Speed=2400; 
2816:  MOVLW  09
2818:  MOVLB  1
281A:  MOVWF  x25
281C:  MOVLW  60
281E:  MOVWF  x24
.................... //							setup_uart(2400); 
.................... 							break; 
2820:  BRA    2874
.................... 						case	0x03:	//4800 
.................... 							Speed=4800; 
2822:  MOVLW  12
2824:  MOVLB  1
2826:  MOVWF  x25
2828:  MOVLW  C0
282A:  MOVWF  x24
.................... //							setup_uart(4800); 
.................... 							break; 
282C:  BRA    2874
.................... 						case	0x04:	//7200 
.................... 							Speed=7200; 
282E:  MOVLW  1C
2830:  MOVLB  1
2832:  MOVWF  x25
2834:  MOVLW  20
2836:  MOVWF  x24
.................... //							setup_uart(7200); 
.................... 							break; 
2838:  BRA    2874
.................... 						case	0x05:	//9600 
.................... 							Speed=9600; 
283A:  MOVLW  25
283C:  MOVLB  1
283E:  MOVWF  x25
2840:  MOVLW  80
2842:  MOVWF  x24
.................... //							setup_uart(9600); 
.................... 							break; 
2844:  BRA    2874
.................... 						case	0x06:	//14400 
.................... 							Speed=14400; 
2846:  MOVLW  38
2848:  MOVLB  1
284A:  MOVWF  x25
284C:  MOVLW  40
284E:  MOVWF  x24
.................... //							setup_uart(14400); 
.................... 							break; 
2850:  BRA    2874
.................... 						case	0x07:	//19200 
.................... 							Speed=19200; 
2852:  MOVLW  4B
2854:  MOVLB  1
2856:  MOVWF  x25
2858:  CLRF   x24
.................... //							setup_uart(19200); 
.................... 							break; 
285A:  BRA    2874
.................... 						default: 
.................... 							MB_Buffer[1]|=0x80; 
285C:  MOVLB  1
285E:  BSF    x3E.7
.................... 							MB_Buffer[2]=illegal_data_value; 
2860:  MOVLW  03
2862:  MOVWF  x3F
.................... 							MB_Length=5; 
2864:  MOVLB  3
2866:  CLRF   x3E
2868:  MOVLW  05
286A:  MOVWF  x3D
.................... 							ExcReq++; 
286C:  INCF   x43,F
286E:  BTFSC  FD8.2
2870:  INCF   x44,F
2872:  MOVLB  1
.................... 					}; 
.................... 					//pause for master 
.................... 					delay_ms(100); 
2874:  MOVLW  64
2876:  MOVLB  3
2878:  MOVWF  x5F
287A:  MOVLB  0
287C:  BRA    21EE
.................... 					}else{ 
287E:  BRA    289A
2880:  MOVLB  3
.................... 					MB_Buffer[1]|=0x80; 
2882:  MOVLB  1
2884:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
2886:  MOVLW  02
2888:  MOVWF  x3F
.................... 					MB_Length=5; 
288A:  MOVLB  3
288C:  CLRF   x3E
288E:  MOVLW  05
2890:  MOVWF  x3D
.................... 					ExcReq++; 
2892:  INCF   x43,F
2894:  BTFSC  FD8.2
2896:  INCF   x44,F
2898:  MOVLB  0
.................... 					};		 
.................... 				break; 
289A:  MOVLB  1
289C:  BRA    2920
.................... 		//send id 
.................... 		case	0x6B: 
.................... 				if(MB_Length==4){ 
289E:  MOVLB  3
28A0:  MOVF   x3D,W
28A2:  SUBLW  04
28A4:  BNZ   28EE
28A6:  MOVF   x3E,F
28A8:  BNZ   28EE
.................... 					MB_Buffer[2]="M"; 
28AA:  MOVLW  4D
28AC:  MOVLB  1
28AE:  MOVWF  x3F
.................... 					MB_Buffer[3]="W"; 
28B0:  MOVLW  57
28B2:  MOVWF  x40
.................... 					MB_Buffer[4]="T"; 
28B4:  MOVLW  54
28B6:  MOVWF  x41
.................... 					MB_Buffer[5]="-"; 
28B8:  MOVLW  2D
28BA:  MOVWF  x42
.................... 					MB_Buffer[6]="T"; 
28BC:  MOVLW  54
28BE:  MOVWF  x43
.................... 					MB_Buffer[7]="M"; 
28C0:  MOVLW  4D
28C2:  MOVWF  x44
.................... 					MB_Buffer[8]="3"; 
28C4:  MOVLW  33
28C6:  MOVWF  x45
.................... 					MB_Buffer[9]=" "; 
28C8:  MOVLW  20
28CA:  MOVWF  x46
.................... 					MB_Buffer[10]="v"; 
28CC:  MOVLW  76
28CE:  MOVWF  x47
.................... 					MB_Buffer[11]="1"; 
28D0:  MOVLW  31
28D2:  MOVWF  x48
.................... 					MB_Buffer[12]="."; 
28D4:  MOVLW  2E
28D6:  MOVWF  x49
.................... 					MB_Buffer[13]="0"; 
28D8:  MOVLW  30
28DA:  MOVWF  x4A
.................... 					MB_Buffer[14]="0"; 
28DC:  MOVWF  x4B
.................... 					MB_Length=16; 
28DE:  MOVLB  3
28E0:  CLRF   x3E
28E2:  MOVLW  10
28E4:  MOVWF  x3D
.................... 					ValidReq++; 
28E6:  INCF   x3F,F
28E8:  BTFSC  FD8.2
28EA:  INCF   x40,F
.................... 					}else{ 
28EC:  BRA    2904
.................... 					MB_Buffer[1]|=0x80; 
28EE:  MOVLB  1
28F0:  BSF    x3E.7
.................... 					MB_Buffer[2]=illegal_data_address; 
28F2:  MOVLW  02
28F4:  MOVWF  x3F
.................... 					MB_Length=5; 
28F6:  MOVLB  3
28F8:  CLRF   x3E
28FA:  MOVLW  05
28FC:  MOVWF  x3D
.................... 					ExcReq++; 
28FE:  INCF   x43,F
2900:  BTFSC  FD8.2
2902:  INCF   x44,F
.................... 					};		 
.................... 				break; 
2904:  MOVLB  1
2906:  BRA    2920
.................... 		//not recognized 
.................... 		default:		//not recognized command 
.................... 		MB_Buffer[1]|=0x80;	//set error code 
2908:  MOVLB  1
290A:  BSF    x3E.7
.................... 		MB_Buffer[2]=illegal_function; 
290C:  MOVLW  01
290E:  MOVWF  x3F
.................... 		MB_Length=5; 
2910:  MOVLB  3
2912:  CLRF   x3E
2914:  MOVLW  05
2916:  MOVWF  x3D
.................... 		ExcReq++; 
2918:  INCF   x43,F
291A:  BTFSC  FD8.2
291C:  INCF   x44,F
291E:  MOVLB  1
.................... 	};	 
.................... 	//send answer 
.................... 	if(MB_Buffer[0]!=0){	//if unicast req - then send answer 
2920:  MOVF   x3D,F
2922:  BZ    29B6
.................... 	CRCc=ModbusCRC(MB_Buffer,MB_Length-2);	//calc CRC 
2924:  MOVLW  02
2926:  MOVLB  3
2928:  SUBWF  x3D,W
292A:  MOVWF  x5F
292C:  MOVLW  00
292E:  SUBWFB x3E,W
2930:  MOVWF  x60
2932:  MOVLW  01
2934:  MOVWF  x62
2936:  MOVLW  3D
2938:  MOVWF  x61
293A:  MOVFF  35F,363
293E:  MOVLB  0
2940:  CALL   0BE0
2944:  MOVFF  02,348
2948:  MOVFF  01,347
.................... 	MB_Buffer[MB_Length-2]=make8(CRCc,1);	//high CRC 
294C:  MOVLW  02
294E:  MOVLB  3
2950:  SUBWF  x3D,W
2952:  MOVWF  x5F
2954:  MOVLW  00
2956:  SUBWFB x3E,W
2958:  MOVWF  x60
295A:  MOVLW  3D
295C:  ADDWF  x5F,W
295E:  MOVWF  FE9
2960:  MOVLW  01
2962:  ADDWFC x60,W
2964:  MOVWF  FEA
2966:  MOVFF  348,FEF
.................... 	MB_Buffer[MB_Length-1]=make8(CRCc,0);	//low CRC 
296A:  MOVLW  01
296C:  SUBWF  x3D,W
296E:  MOVWF  x5F
2970:  MOVLW  00
2972:  SUBWFB x3E,W
2974:  MOVWF  x60
2976:  MOVLW  3D
2978:  ADDWF  x5F,W
297A:  MOVWF  FE9
297C:  MOVLW  01
297E:  ADDWFC x60,W
2980:  MOVWF  FEA
2982:  MOVFF  347,FEF
.................... 	//send 
.................... 	for(i=0; i<MB_Length; i++){ 
2986:  CLRF   x49
2988:  MOVF   x3E,F
298A:  BNZ   2992
298C:  MOVF   x3D,W
298E:  SUBWF  x49,W
2990:  BC    29B4
.................... 		putc(MB_Buffer[i]); 
2992:  MOVLW  3D
2994:  ADDWF  x49,W
2996:  MOVWF  FE9
2998:  MOVLW  01
299A:  MOVWF  FEA
299C:  BTFSC  FD8.0
299E:  INCF   FEA,F
29A0:  MOVFF  FEF,35F
29A4:  MOVFF  35F,360
29A8:  MOVLB  0
29AA:  BRA    2220
.................... //		output_low(STAT);	//toggle led 
.................... 		restart_wdt(); 
29AC:  CLRWDT
.................... 		}; 
29AE:  MOVLB  3
29B0:  INCF   x49,F
29B2:  BRA    2988
29B4:  MOVLB  1
.................... 	};	 
.................... 	// 
.................... 	 
.................... exit:	//exit 
.................... //	output_high(STAT);	//on led 
.................... 	MB_Length=0; 
29B6:  MOVLB  3
29B8:  CLRF   x3E
29BA:  CLRF   x3D
.................... 	clear_interrupt(INT_RDA);	 
.................... 	disable_interrupts(INT_TIMER1);	 
29BC:  BCF    F9D.0
.................... 	enable_interrupts(INT_RDA); 
29BE:  BSF    F9D.5
.................... } 
.................... // 
....................  
....................  
.................... // 
....................  
29C0:  BCF    F9E.0
29C2:  MOVLB  0
29C4:  GOTO   006C
.................... void	main() { 
*
2F72:  CLRF   FF8
2F74:  BCF    FD0.7
2F76:  BSF    07.7
2F78:  CLRF   FEA
2F7A:  CLRF   FE9
2F7C:  MOVLW  70
2F7E:  MOVWF  FD3
2F80:  MOVLW  40
2F82:  MOVWF  F9B
2F84:  MOVF   FD3,W
2F86:  MOVLW  08
2F88:  MOVWF  20
2F8A:  MOVLW  06
2F8C:  MOVWF  21
2F8E:  MOVLW  FF
2F90:  MOVLB  1
2F92:  MOVWF  x35
2F94:  MOVLW  FF
2F96:  MOVWF  x34
2F98:  MOVLW  FF
2F9A:  MOVWF  x37
2F9C:  MOVLW  FF
2F9E:  MOVWF  x36
2FA0:  CLRF   x38
2FA2:  BCF    F94.2
2FA4:  BCF    F8B.2
2FA6:  BSF    FB8.3
2FA8:  MOVLW  A0
2FAA:  MOVWF  FAF
2FAC:  MOVLW  01
2FAE:  MOVWF  FB0
2FB0:  MOVLW  A6
2FB2:  MOVWF  FAC
2FB4:  MOVLW  90
2FB6:  MOVWF  FAB
2FB8:  NOP   
2FBA:  NOP   
2FBC:  MOVLB  3
2FBE:  CLRF   x4C
2FC0:  CLRF   x4B
2FC2:  MOVF   FC1,W
2FC4:  ANDLW  C0
2FC6:  IORLW  0F
2FC8:  MOVWF  FC1
2FCA:  MOVLW  07
2FCC:  MOVWF  FB4
2FCE:  CLRF   1A
2FD0:  CLRF   1B
2FD2:  MOVLB  1
2FD4:  CLRF   x24
2FD6:  CLRF   x25
2FD8:  CLRF   x26
2FDA:  CLRF   x27
2FDC:  CLRF   x28
2FDE:  CLRF   x29
2FE0:  CLRF   x2A
2FE2:  CLRF   x2B
2FE4:  CLRF   x2C
2FE6:  CLRF   x2D
2FE8:  CLRF   x2E
2FEA:  CLRF   x2F
2FEC:  CLRF   x30
2FEE:  CLRF   x31
2FF0:  CLRF   x32
2FF2:  CLRF   x33
2FF4:  CLRF   x39
2FF6:  CLRF   x3A
2FF8:  CLRF   x3B
2FFA:  CLRF   x3C
2FFC:  CLRF   x3D
2FFE:  CLRF   x3E
3000:  CLRF   x3F
3002:  CLRF   x40
3004:  CLRF   x41
3006:  CLRF   x42
3008:  CLRF   x43
300A:  CLRF   x44
300C:  CLRF   x45
300E:  CLRF   x46
3010:  CLRF   x47
3012:  CLRF   x48
3014:  CLRF   x49
3016:  CLRF   x4A
3018:  CLRF   x4B
301A:  CLRF   x4C
301C:  CLRF   x4D
301E:  CLRF   x4E
3020:  CLRF   x4F
3022:  CLRF   x50
3024:  CLRF   x51
3026:  CLRF   x52
3028:  CLRF   x53
302A:  CLRF   x54
302C:  CLRF   x55
302E:  CLRF   x56
3030:  CLRF   x57
3032:  CLRF   x58
3034:  CLRF   x59
3036:  CLRF   x5A
3038:  CLRF   x5B
303A:  CLRF   x5C
303C:  CLRF   x5D
303E:  CLRF   x5E
3040:  CLRF   x5F
3042:  CLRF   x60
3044:  CLRF   x61
3046:  CLRF   x62
3048:  CLRF   x63
304A:  CLRF   x64
304C:  CLRF   x65
304E:  CLRF   x66
3050:  CLRF   x67
3052:  CLRF   x68
3054:  CLRF   x69
3056:  CLRF   x6A
3058:  CLRF   x6B
305A:  CLRF   x6C
305C:  CLRF   x6D
305E:  CLRF   x6E
3060:  CLRF   x6F
3062:  CLRF   x70
3064:  CLRF   x71
3066:  CLRF   x72
3068:  CLRF   x73
306A:  CLRF   x74
306C:  CLRF   x75
306E:  CLRF   x76
3070:  CLRF   x77
3072:  CLRF   x78
3074:  CLRF   x79
3076:  CLRF   x7A
3078:  CLRF   x7B
307A:  CLRF   x7C
307C:  CLRF   x7D
307E:  CLRF   x7E
3080:  CLRF   x7F
3082:  CLRF   x80
3084:  CLRF   x81
3086:  CLRF   x82
3088:  CLRF   x83
308A:  CLRF   x84
308C:  CLRF   x85
308E:  CLRF   x86
3090:  CLRF   x87
3092:  CLRF   x88
3094:  CLRF   x89
3096:  CLRF   x8A
3098:  CLRF   x8B
309A:  CLRF   x8C
309C:  CLRF   x8D
309E:  CLRF   x8E
30A0:  CLRF   x8F
30A2:  CLRF   x90
30A4:  CLRF   x91
30A6:  CLRF   x92
30A8:  CLRF   x93
30AA:  CLRF   x94
30AC:  CLRF   x95
30AE:  CLRF   x96
30B0:  CLRF   x97
30B2:  CLRF   x98
30B4:  CLRF   x99
30B6:  CLRF   x9A
30B8:  CLRF   x9B
30BA:  CLRF   x9C
30BC:  CLRF   x9D
30BE:  CLRF   x9E
30C0:  CLRF   x9F
30C2:  CLRF   xA0
30C4:  CLRF   xA1
30C6:  CLRF   xA2
30C8:  CLRF   xA3
30CA:  CLRF   xA4
30CC:  CLRF   xA5
30CE:  CLRF   xA6
30D0:  CLRF   xA7
30D2:  CLRF   xA8
30D4:  CLRF   xA9
30D6:  CLRF   xAA
30D8:  CLRF   xAB
30DA:  CLRF   xAC
30DC:  CLRF   xAD
30DE:  CLRF   xAE
30E0:  CLRF   xAF
30E2:  CLRF   xB0
30E4:  CLRF   xB1
30E6:  CLRF   xB2
30E8:  CLRF   xB3
30EA:  CLRF   xB4
30EC:  CLRF   xB5
30EE:  CLRF   xB6
30F0:  CLRF   xB7
30F2:  CLRF   xB8
30F4:  CLRF   xB9
30F6:  CLRF   xBA
30F8:  CLRF   xBB
30FA:  CLRF   xBC
30FC:  CLRF   xBD
30FE:  CLRF   xBE
3100:  CLRF   xBF
3102:  CLRF   xC0
3104:  CLRF   xC1
3106:  CLRF   xC2
3108:  CLRF   xC3
310A:  CLRF   xC4
310C:  CLRF   xC5
310E:  CLRF   xC6
3110:  CLRF   xC7
3112:  CLRF   xC8
3114:  CLRF   xC9
3116:  CLRF   xCA
3118:  CLRF   xCB
311A:  CLRF   xCC
311C:  CLRF   xCD
311E:  CLRF   xCE
3120:  CLRF   xCF
3122:  CLRF   xD0
3124:  CLRF   xD1
3126:  CLRF   xD2
3128:  CLRF   xD3
312A:  CLRF   xD4
312C:  CLRF   xD5
312E:  CLRF   xD6
3130:  CLRF   xD7
3132:  CLRF   xD8
3134:  CLRF   xD9
3136:  CLRF   xDA
3138:  CLRF   xDB
313A:  CLRF   xDC
313C:  CLRF   xDD
313E:  CLRF   xDE
3140:  CLRF   xDF
3142:  CLRF   xE0
3144:  CLRF   xE1
3146:  CLRF   xE2
3148:  CLRF   xE3
314A:  CLRF   xE4
314C:  CLRF   xE5
314E:  CLRF   xE6
3150:  CLRF   xE7
3152:  CLRF   xE8
3154:  CLRF   xE9
3156:  CLRF   xEA
3158:  CLRF   xEB
315A:  CLRF   xEC
315C:  CLRF   xED
315E:  CLRF   xEE
3160:  CLRF   xEF
3162:  CLRF   xF0
3164:  CLRF   xF1
3166:  CLRF   xF2
3168:  CLRF   xF3
316A:  CLRF   xF4
316C:  CLRF   xF5
316E:  CLRF   xF6
3170:  CLRF   xF7
3172:  CLRF   xF8
3174:  CLRF   xF9
3176:  CLRF   xFA
3178:  CLRF   xFB
317A:  CLRF   xFC
317C:  CLRF   xFD
317E:  CLRF   xFE
3180:  CLRF   xFF
3182:  MOVLB  2
3184:  CLRF   x00
3186:  CLRF   x01
3188:  CLRF   x02
318A:  CLRF   x03
318C:  CLRF   x04
318E:  CLRF   x05
3190:  CLRF   x06
3192:  CLRF   x07
3194:  CLRF   x08
3196:  CLRF   x09
3198:  CLRF   x0A
319A:  CLRF   x0B
319C:  CLRF   x0C
319E:  CLRF   x0D
31A0:  CLRF   x0E
31A2:  CLRF   x0F
31A4:  CLRF   x10
31A6:  CLRF   x11
31A8:  CLRF   x12
31AA:  CLRF   x13
31AC:  CLRF   x14
31AE:  CLRF   x15
31B0:  CLRF   x16
31B2:  CLRF   x17
31B4:  CLRF   x18
31B6:  CLRF   x19
31B8:  CLRF   x1A
31BA:  CLRF   x1B
31BC:  CLRF   x1C
31BE:  CLRF   x1D
31C0:  CLRF   x1E
31C2:  CLRF   x1F
31C4:  CLRF   x20
31C6:  CLRF   x21
31C8:  CLRF   x22
31CA:  CLRF   x23
31CC:  CLRF   x24
31CE:  CLRF   x25
31D0:  CLRF   x26
31D2:  CLRF   x27
31D4:  CLRF   x28
31D6:  CLRF   x29
31D8:  CLRF   x2A
31DA:  CLRF   x2B
31DC:  CLRF   x2C
31DE:  CLRF   x2D
31E0:  CLRF   x2E
31E2:  CLRF   x2F
31E4:  CLRF   x30
31E6:  CLRF   x31
31E8:  CLRF   x32
31EA:  CLRF   x33
31EC:  CLRF   x34
31EE:  CLRF   x35
31F0:  CLRF   x36
31F2:  CLRF   x37
31F4:  CLRF   x38
31F6:  CLRF   x39
31F8:  CLRF   x3A
31FA:  CLRF   x3B
31FC:  CLRF   x3C
31FE:  CLRF   x3D
3200:  CLRF   x3E
3202:  CLRF   x3F
3204:  CLRF   x40
3206:  CLRF   x41
3208:  CLRF   x42
320A:  CLRF   x43
320C:  CLRF   x44
320E:  CLRF   x45
3210:  CLRF   x46
3212:  CLRF   x47
3214:  CLRF   x48
3216:  CLRF   x49
3218:  CLRF   x4A
321A:  CLRF   x4B
321C:  CLRF   x4C
321E:  CLRF   x4D
3220:  CLRF   x4E
3222:  CLRF   x4F
3224:  CLRF   x50
3226:  CLRF   x51
3228:  CLRF   x52
322A:  CLRF   x53
322C:  CLRF   x54
322E:  CLRF   x55
3230:  CLRF   x56
3232:  CLRF   x57
3234:  CLRF   x58
3236:  CLRF   x59
3238:  CLRF   x5A
323A:  CLRF   x5B
323C:  CLRF   x5C
323E:  CLRF   x5D
3240:  CLRF   x5E
3242:  CLRF   x5F
3244:  CLRF   x60
3246:  CLRF   x61
3248:  CLRF   x62
324A:  CLRF   x63
324C:  CLRF   x64
324E:  CLRF   x65
3250:  CLRF   x66
3252:  CLRF   x67
3254:  CLRF   x68
3256:  CLRF   x69
3258:  CLRF   x6A
325A:  CLRF   x6B
325C:  CLRF   x6C
325E:  CLRF   x6D
3260:  CLRF   x6E
3262:  CLRF   x6F
3264:  CLRF   x70
3266:  CLRF   x71
3268:  CLRF   x72
326A:  CLRF   x73
326C:  CLRF   x74
326E:  CLRF   x75
3270:  CLRF   x76
3272:  CLRF   x77
3274:  CLRF   x78
3276:  CLRF   x79
3278:  CLRF   x7A
327A:  CLRF   x7B
327C:  CLRF   x7C
327E:  CLRF   x7D
3280:  CLRF   x7E
3282:  CLRF   x7F
3284:  CLRF   x80
3286:  CLRF   x81
3288:  CLRF   x82
328A:  CLRF   x83
328C:  CLRF   x84
328E:  CLRF   x85
3290:  CLRF   x86
3292:  CLRF   x87
3294:  CLRF   x88
3296:  CLRF   x89
3298:  CLRF   x8A
329A:  CLRF   x8B
329C:  CLRF   x8C
329E:  CLRF   x8D
32A0:  CLRF   x8E
32A2:  CLRF   x8F
32A4:  CLRF   x90
32A6:  CLRF   x91
32A8:  CLRF   x92
32AA:  CLRF   x93
32AC:  CLRF   x94
32AE:  CLRF   x95
32B0:  CLRF   x96
32B2:  CLRF   x97
32B4:  CLRF   x98
32B6:  CLRF   x99
32B8:  CLRF   x9A
32BA:  CLRF   x9B
32BC:  CLRF   x9C
32BE:  CLRF   x9D
32C0:  CLRF   x9E
32C2:  CLRF   x9F
32C4:  CLRF   xA0
32C6:  CLRF   xA1
32C8:  CLRF   xA2
32CA:  CLRF   xA3
32CC:  CLRF   xA4
32CE:  CLRF   xA5
32D0:  CLRF   xA6
32D2:  CLRF   xA7
32D4:  CLRF   xA8
32D6:  CLRF   xA9
32D8:  CLRF   xAA
32DA:  CLRF   xAB
32DC:  CLRF   xAC
32DE:  CLRF   xAD
32E0:  CLRF   xAE
32E2:  CLRF   xAF
32E4:  CLRF   xB0
32E6:  CLRF   xB1
32E8:  CLRF   xB2
32EA:  CLRF   xB3
32EC:  CLRF   xB4
32EE:  CLRF   xB5
32F0:  CLRF   xB6
32F2:  CLRF   xB7
32F4:  CLRF   xB8
32F6:  CLRF   xB9
32F8:  CLRF   xBA
32FA:  CLRF   xBB
32FC:  CLRF   xBC
32FE:  CLRF   xBD
3300:  CLRF   xBE
3302:  CLRF   xBF
3304:  CLRF   xC0
3306:  CLRF   xC1
3308:  CLRF   xC2
330A:  CLRF   xC3
330C:  CLRF   xC4
330E:  CLRF   xC5
3310:  CLRF   xC6
3312:  CLRF   xC7
3314:  CLRF   xC8
3316:  CLRF   xC9
3318:  CLRF   xCA
331A:  CLRF   xCB
331C:  CLRF   xCC
331E:  CLRF   xCD
3320:  CLRF   xCE
3322:  CLRF   xCF
3324:  CLRF   xD0
3326:  CLRF   xD1
3328:  CLRF   xD2
332A:  CLRF   xD3
332C:  CLRF   xD4
332E:  CLRF   xD5
3330:  CLRF   xD6
3332:  CLRF   xD7
3334:  CLRF   xD8
3336:  CLRF   xD9
3338:  CLRF   xDA
333A:  CLRF   xDB
333C:  CLRF   xDC
333E:  CLRF   xDD
3340:  CLRF   xDE
3342:  CLRF   xDF
3344:  CLRF   xE0
3346:  CLRF   xE1
3348:  CLRF   xE2
334A:  CLRF   xE3
334C:  CLRF   xE4
334E:  CLRF   xE5
3350:  CLRF   xE6
3352:  CLRF   xE7
3354:  CLRF   xE8
3356:  CLRF   xE9
3358:  CLRF   xEA
335A:  CLRF   xEB
335C:  CLRF   xEC
335E:  CLRF   xED
3360:  CLRF   xEE
3362:  CLRF   xEF
3364:  CLRF   xF0
3366:  CLRF   xF1
3368:  CLRF   xF2
336A:  CLRF   xF3
336C:  CLRF   xF4
336E:  CLRF   xF5
3370:  CLRF   xF6
3372:  CLRF   xF7
3374:  CLRF   xF8
3376:  CLRF   xF9
3378:  CLRF   xFA
337A:  CLRF   xFB
337C:  CLRF   xFC
337E:  CLRF   xFD
3380:  CLRF   xFE
3382:  CLRF   xFF
3384:  MOVLB  3
3386:  CLRF   x00
3388:  CLRF   x01
338A:  CLRF   x02
338C:  CLRF   x03
338E:  CLRF   x04
3390:  CLRF   x05
3392:  CLRF   x06
3394:  CLRF   x07
3396:  CLRF   x08
3398:  CLRF   x09
339A:  CLRF   x0A
339C:  CLRF   x0B
339E:  CLRF   x0C
33A0:  CLRF   x0D
33A2:  CLRF   x0E
33A4:  CLRF   x0F
33A6:  CLRF   x10
33A8:  CLRF   x11
33AA:  CLRF   x12
33AC:  CLRF   x13
33AE:  CLRF   x14
33B0:  CLRF   x15
33B2:  CLRF   x16
33B4:  CLRF   x17
33B6:  CLRF   x18
33B8:  CLRF   x19
33BA:  CLRF   x1A
33BC:  CLRF   x1B
33BE:  CLRF   x1C
33C0:  CLRF   x1D
33C2:  CLRF   x1E
33C4:  CLRF   x1F
33C6:  CLRF   x20
33C8:  CLRF   x21
33CA:  CLRF   x22
33CC:  CLRF   x23
33CE:  CLRF   x24
33D0:  CLRF   x25
33D2:  CLRF   x26
33D4:  CLRF   x27
33D6:  CLRF   x28
33D8:  CLRF   x29
33DA:  CLRF   x2A
33DC:  CLRF   x2B
33DE:  CLRF   x2C
33E0:  CLRF   x2D
33E2:  CLRF   x2E
33E4:  CLRF   x2F
33E6:  CLRF   x30
33E8:  CLRF   x31
33EA:  CLRF   x32
33EC:  CLRF   x33
33EE:  CLRF   x34
33F0:  CLRF   x35
33F2:  CLRF   x36
33F4:  CLRF   x37
33F6:  CLRF   x38
33F8:  CLRF   x39
33FA:  CLRF   x3A
33FC:  CLRF   x3B
33FE:  CLRF   x3C
3400:  CLRF   x3D
3402:  CLRF   x3E
3404:  CLRF   x3F
3406:  CLRF   x40
3408:  CLRF   x41
340A:  CLRF   x42
340C:  CLRF   x43
340E:  CLRF   x44
3410:  CLRF   x45
3412:  CLRF   x46
3414:  CLRF   x47
3416:  CLRF   x48
3418:  CLRF   x49
341A:  CLRF   x4A
341C:  CLRF   x4F
341E:  CLRF   x4E
.................... 	int8	symbol; 
.................... 	int16	sym_count=0; 
.................... 	 
.................... 	InitMcu();			//hardware init 
3420:  MOVLB  0
3422:  GOTO   2A28
.................... 	BURead();			//restore backups 
3426:  GOTO   2AC0
.................... 	RsInit();			//usart init 
342A:  GOTO   2BA6
342E:  CLRF   19
3430:  BTFSC  FF2.7
3432:  BSF    19.7
3434:  BCF    FF2.7
.................... 	//setup range&init value 
.................... 	SetAoutRange0(ValPot0); 
3436:  MOVFF  129,361
343A:  MOVFF  128,360
343E:  CALL   1952
3442:  BTFSC  19.7
3444:  BSF    FF2.7
3446:  CLRF   19
3448:  BTFSC  FF2.7
344A:  BSF    19.7
344C:  BCF    FF2.7
.................... 	SetAoutRange1(ValPot1); 
344E:  MOVFF  12B,361
3452:  MOVFF  12A,360
3456:  CALL   198E
345A:  BTFSC  19.7
345C:  BSF    FF2.7
345E:  CLRF   19
3460:  BTFSC  FF2.7
3462:  BSF    19.7
3464:  BCF    FF2.7
.................... 	SetOutDac0(0x00); 
3466:  MOVLB  3
3468:  CLRF   x61
346A:  CLRF   x60
346C:  MOVLB  0
346E:  CALL   18C6
3472:  BTFSC  19.7
3474:  BSF    FF2.7
3476:  CLRF   19
3478:  BTFSC  FF2.7
347A:  BSF    19.7
347C:  BCF    FF2.7
.................... 	SetOutDac1(0x00); 
347E:  MOVLB  3
3480:  CLRF   x61
3482:  CLRF   x60
3484:  MOVLB  0
3486:  CALL   190C
348A:  BTFSC  19.7
348C:  BSF    FF2.7
.................... 	 
.................... 	//LCD init 
.................... 	SetData2LCD(CHARBASE>>11);	//send offset 0x0000h 
348E:  MOVLB  3
3490:  CLRF   x53
3492:  CLRF   x52
3494:  MOVLB  0
3496:  CALL   2BB2
349A:  CLRF   19
349C:  BTFSC  FF2.7
349E:  BSF    19.7
34A0:  BCF    FF2.7
.................... 	SetCommandLCD(0x22);	//set graphics home 
34A2:  MOVLW  22
34A4:  MOVLB  3
34A6:  MOVWF  x63
34A8:  MOVLB  0
34AA:  CALL   1E7A
34AE:  BTFSC  19.7
34B0:  BSF    FF2.7
.................... 	CharTableLoad();		//load charset table WIN 1251 
34B2:  GOTO   2C58
.................... 	SetData2LCD(GRAPHBASE);	//send adress 0x0000h 
34B6:  MOVLW  0A
34B8:  MOVLB  3
34BA:  MOVWF  x53
34BC:  CLRF   x52
34BE:  MOVLB  0
34C0:  CALL   2BB2
34C4:  CLRF   19
34C6:  BTFSC  FF2.7
34C8:  BSF    19.7
34CA:  BCF    FF2.7
.................... 	SetCommandLCD(0x42);	//set graphics home 
34CC:  MOVLW  42
34CE:  MOVLB  3
34D0:  MOVWF  x63
34D2:  MOVLB  0
34D4:  CALL   1E7A
34D8:  BTFSC  19.7
34DA:  BSF    FF2.7
.................... 	SetData2LCD(COLS);		//set col for 160x128 
34DC:  MOVLB  3
34DE:  CLRF   x53
34E0:  MOVLW  14
34E2:  MOVWF  x52
34E4:  MOVLB  0
34E6:  CALL   2BB2
34EA:  CLRF   19
34EC:  BTFSC  FF2.7
34EE:  BSF    19.7
34F0:  BCF    FF2.7
.................... 	SetCommandLCD(0x43);	//set graphics area 
34F2:  MOVLW  43
34F4:  MOVLB  3
34F6:  MOVWF  x63
34F8:  MOVLB  0
34FA:  CALL   1E7A
34FE:  BTFSC  19.7
3500:  BSF    FF2.7
.................... 	SetData2LCD(TEXTBASE);	//set adress 0x0180h 
3502:  MOVLW  08
3504:  MOVLB  3
3506:  MOVWF  x53
3508:  CLRF   x52
350A:  MOVLB  0
350C:  CALL   2BB2
3510:  CLRF   19
3512:  BTFSC  FF2.7
3514:  BSF    19.7
3516:  BCF    FF2.7
.................... 	SetCommandLCD(0x40);	//set text home 
3518:  MOVLW  40
351A:  MOVLB  3
351C:  MOVWF  x63
351E:  MOVLB  0
3520:  CALL   1E7A
3524:  BTFSC  19.7
3526:  BSF    FF2.7
.................... 	SetData2LCD(COLS);		//set cols 
3528:  MOVLB  3
352A:  CLRF   x53
352C:  MOVLW  14
352E:  MOVWF  x52
3530:  MOVLB  0
3532:  CALL   2BB2
3536:  CLRF   19
3538:  BTFSC  FF2.7
353A:  BSF    19.7
353C:  BCF    FF2.7
.................... 	SetCommandLCD(0x41);	//set text area 
353E:  MOVLW  41
3540:  MOVLB  3
3542:  MOVWF  x63
3544:  MOVLB  0
3546:  CALL   1E7A
354A:  BTFSC  19.7
354C:  BSF    FF2.7
354E:  CLRF   19
3550:  BTFSC  FF2.7
3552:  BSF    19.7
3554:  BCF    FF2.7
.................... 	SetCommandLCD(0x88);	//set LCD mode: OR, internal SG 
3556:  MOVLW  88
3558:  MOVLB  3
355A:  MOVWF  x63
355C:  MOVLB  0
355E:  CALL   1E7A
3562:  BTFSC  19.7
3564:  BSF    FF2.7
3566:  CLRF   19
3568:  BTFSC  FF2.7
356A:  BSF    19.7
356C:  BCF    FF2.7
.................... 	SetCommandLCD(0x9f);	//set view mode: graphics & text, cursor, blink 
356E:  MOVLW  9F
3570:  MOVLB  3
3572:  MOVWF  x63
3574:  MOVLB  0
3576:  CALL   1E7A
357A:  BTFSC  19.7
357C:  BSF    FF2.7
357E:  CLRF   19
3580:  BTFSC  FF2.7
3582:  BSF    19.7
3584:  BCF    FF2.7
.................... 	SetCommandLCD(0xa0);	//set 1-row cursor 
3586:  MOVLW  A0
3588:  MOVLB  3
358A:  MOVWF  x63
358C:  MOVLB  0
358E:  CALL   1E7A
3592:  BTFSC  19.7
3594:  BSF    FF2.7
3596:  CLRF   19
3598:  BTFSC  FF2.7
359A:  BSF    19.7
359C:  BCF    FF2.7
.................... 	ClrTxt(); 
359E:  CALL   2106
35A2:  BTFSC  19.7
35A4:  BSF    FF2.7
.................... 	ClrGrph(); 
35A6:  GOTO   2CEA
.................... //	SetCommandLCD(0x9c);		//off cursor 
.................... 	//greetings 
.................... 	sprintf(string,"LCD Terminal Module"); 
35AA:  MOVLB  3
35AC:  CLRF   x4C
35AE:  MOVLW  22
35B0:  MOVWF  x4B
35B2:  MOVLW  C8
35B4:  MOVWF  FF6
35B6:  MOVLW  29
35B8:  MOVWF  FF7
35BA:  MOVLB  0
35BC:  CALL   2D82
35C0:  CLRF   19
35C2:  BTFSC  FF2.7
35C4:  BSF    19.7
35C6:  BCF    FF2.7
.................... 	PrintXY(0,0,string); 
35C8:  MOVLB  3
35CA:  CLRF   x5F
35CC:  CLRF   x60
35CE:  CLRF   x62
35D0:  MOVLW  22
35D2:  MOVWF  x61
35D4:  MOVLB  0
35D6:  CALL   2166
35DA:  BTFSC  19.7
35DC:  BSF    FF2.7
.................... 	sprintf(string,"TM-3 v1.2"); 
35DE:  MOVLB  3
35E0:  CLRF   x4C
35E2:  MOVLW  22
35E4:  MOVWF  x4B
35E6:  MOVLW  DC
35E8:  MOVWF  FF6
35EA:  MOVLW  29
35EC:  MOVWF  FF7
35EE:  MOVLB  0
35F0:  CALL   2D82
35F4:  CLRF   19
35F6:  BTFSC  FF2.7
35F8:  BSF    19.7
35FA:  BCF    FF2.7
.................... 	PrintXY(0,1,string); 
35FC:  MOVLB  3
35FE:  CLRF   x5F
3600:  MOVLW  01
3602:  MOVWF  x60
3604:  CLRF   x62
3606:  MOVLW  22
3608:  MOVWF  x61
360A:  MOVLB  0
360C:  CALL   2166
3610:  BTFSC  19.7
3612:  BSF    FF2.7
.................... 	sprintf(string,"ID:");	 
3614:  MOVLB  3
3616:  CLRF   x4C
3618:  MOVLW  22
361A:  MOVWF  x4B
361C:  MOVLW  49
361E:  MOVWF  x59
3620:  MOVLB  0
3622:  CALL   2D62
3626:  MOVLW  44
3628:  MOVLB  3
362A:  MOVWF  x59
362C:  MOVLB  0
362E:  CALL   2D62
3632:  MOVLW  3A
3634:  MOVLB  3
3636:  MOVWF  x59
3638:  MOVLB  0
363A:  CALL   2D62
363E:  CLRF   19
3640:  BTFSC  FF2.7
3642:  BSF    19.7
3644:  BCF    FF2.7
.................... 	PrintXY(0,3,string); 
3646:  MOVLB  3
3648:  CLRF   x5F
364A:  MOVLW  03
364C:  MOVWF  x60
364E:  CLRF   x62
3650:  MOVLW  22
3652:  MOVWF  x61
3654:  MOVLB  0
3656:  CALL   2166
365A:  BTFSC  19.7
365C:  BSF    FF2.7
.................... 	sprintf(string,"%LX",Addr); 
365E:  MOVLB  3
3660:  CLRF   x4C
3662:  MOVLW  22
3664:  MOVWF  x4B
3666:  MOVFF  127,350
366A:  MOVLW  37
366C:  MOVWF  x51
366E:  MOVLB  0
3670:  CALL   2DA2
3674:  MOVFF  126,350
3678:  MOVLW  37
367A:  MOVLB  3
367C:  MOVWF  x51
367E:  MOVLB  0
3680:  CALL   2DA2
3684:  CLRF   19
3686:  BTFSC  FF2.7
3688:  BSF    19.7
368A:  BCF    FF2.7
.................... 	PrintXY(3,3,string); 
368C:  MOVLW  03
368E:  MOVLB  3
3690:  MOVWF  x5F
3692:  MOVWF  x60
3694:  CLRF   x62
3696:  MOVLW  22
3698:  MOVWF  x61
369A:  MOVLB  0
369C:  CALL   2166
36A0:  BTFSC  19.7
36A2:  BSF    FF2.7
.................... 	sprintf(string,"Baud:"); 
36A4:  MOVLB  3
36A6:  CLRF   x4C
36A8:  MOVLW  22
36AA:  MOVWF  x4B
36AC:  MOVLW  E6
36AE:  MOVWF  FF6
36B0:  MOVLW  29
36B2:  MOVWF  FF7
36B4:  MOVLB  0
36B6:  CALL   2D82
36BA:  CLRF   19
36BC:  BTFSC  FF2.7
36BE:  BSF    19.7
36C0:  BCF    FF2.7
.................... 	PrintXY(10,3,string); 
36C2:  MOVLW  0A
36C4:  MOVLB  3
36C6:  MOVWF  x5F
36C8:  MOVLW  03
36CA:  MOVWF  x60
36CC:  CLRF   x62
36CE:  MOVLW  22
36D0:  MOVWF  x61
36D2:  MOVLB  0
36D4:  CALL   2166
36D8:  BTFSC  19.7
36DA:  BSF    FF2.7
.................... 	sprintf(string,"%lu",Speed); 
36DC:  MOVLB  3
36DE:  CLRF   x4C
36E0:  MOVLW  22
36E2:  MOVWF  x4B
36E4:  MOVLW  10
36E6:  MOVWF  FE9
36E8:  MOVFF  125,351
36EC:  MOVFF  124,350
36F0:  MOVLB  0
36F2:  GOTO   2DE8
36F6:  CLRF   19
36F8:  BTFSC  FF2.7
36FA:  BSF    19.7
36FC:  BCF    FF2.7
.................... 	PrintXY(15,3,string); 
36FE:  MOVLW  0F
3700:  MOVLB  3
3702:  MOVWF  x5F
3704:  MOVLW  03
3706:  MOVWF  x60
3708:  CLRF   x62
370A:  MOVLW  22
370C:  MOVWF  x61
370E:  MOVLB  0
3710:  CALL   2166
3714:  BTFSC  19.7
3716:  BSF    FF2.7
.................... 	sprintf(string,"Яюфуюђютър"); 
3718:  MOVLB  3
371A:  CLRF   x4C
371C:  MOVLW  22
371E:  MOVWF  x4B
3720:  MOVLW  EC
3722:  MOVWF  FF6
3724:  MOVLW  29
3726:  MOVWF  FF7
3728:  MOVLB  0
372A:  CALL   2D82
372E:  CLRF   19
3730:  BTFSC  FF2.7
3732:  BSF    19.7
3734:  BCF    FF2.7
.................... 	PrintXY(5,6,string); 
3736:  MOVLW  05
3738:  MOVLB  3
373A:  MOVWF  x5F
373C:  MOVLW  06
373E:  MOVWF  x60
3740:  CLRF   x62
3742:  MOVLW  22
3744:  MOVWF  x61
3746:  MOVLB  0
3748:  CALL   2166
374C:  BTFSC  19.7
374E:  BSF    FF2.7
.................... 	sprintf(string,"ъ №рсюђх..."); 
3750:  MOVLB  3
3752:  CLRF   x4C
3754:  MOVLW  22
3756:  MOVWF  x4B
3758:  MOVLW  F8
375A:  MOVWF  FF6
375C:  MOVLW  29
375E:  MOVWF  FF7
3760:  MOVLB  0
3762:  CALL   2D82
3766:  CLRF   19
3768:  BTFSC  FF2.7
376A:  BSF    19.7
376C:  BCF    FF2.7
.................... 	PrintXY(5,7,string); 
376E:  MOVLW  05
3770:  MOVLB  3
3772:  MOVWF  x5F
3774:  MOVLW  07
3776:  MOVWF  x60
3778:  CLRF   x62
377A:  MOVLW  22
377C:  MOVWF  x61
377E:  MOVLB  0
3780:  CALL   2166
3784:  BTFSC  19.7
3786:  BSF    FF2.7
.................... 	sprintf(string,"Яюцрыѓщёђр,юцшфрщђх."); 
3788:  MOVLB  3
378A:  CLRF   x4C
378C:  MOVLW  22
378E:  MOVWF  x4B
3790:  MOVLW  04
3792:  MOVWF  FF6
3794:  MOVLW  2A
3796:  MOVWF  FF7
3798:  MOVLB  0
379A:  CALL   2D82
379E:  CLRF   19
37A0:  BTFSC  FF2.7
37A2:  BSF    19.7
37A4:  BCF    FF2.7
.................... 	PrintXY(0,9,string); 
37A6:  MOVLB  3
37A8:  CLRF   x5F
37AA:  MOVLW  09
37AC:  MOVWF  x60
37AE:  CLRF   x62
37B0:  MOVLW  22
37B2:  MOVWF  x61
37B4:  MOVLB  0
37B6:  CALL   2166
37BA:  BTFSC  19.7
37BC:  BSF    FF2.7
.................... 	sprintf(string,"2013 OOO MBT"); 
37BE:  MOVLB  3
37C0:  CLRF   x4C
37C2:  MOVLW  22
37C4:  MOVWF  x4B
37C6:  MOVLW  1A
37C8:  MOVWF  FF6
37CA:  MOVLW  2A
37CC:  MOVWF  FF7
37CE:  MOVLB  0
37D0:  CALL   2D82
37D4:  CLRF   19
37D6:  BTFSC  FF2.7
37D8:  BSF    19.7
37DA:  BCF    FF2.7
.................... 	PrintXY(4,15,string); 
37DC:  MOVLW  04
37DE:  MOVLB  3
37E0:  MOVWF  x5F
37E2:  MOVLW  0F
37E4:  MOVWF  x60
37E6:  CLRF   x62
37E8:  MOVLW  22
37EA:  MOVWF  x61
37EC:  MOVLB  0
37EE:  CALL   2166
37F2:  BTFSC  19.7
37F4:  BSF    FF2.7
.................... 	 
.................... 	/*for(k=0; k<20; k++){ 
.................... 		for(l=0; l<16; l++) 
.................... 		{ 
.................... 			sprintf(string,"%c",(int8)(k+20*l)); 
.................... 			restart_wdt(); 
.................... 			PrintXY(k,l,string); 
.................... 		}; 
.................... 	}; 
....................    */ 
....................    //interrupt configuration 
....................    disable_interrupts(INT_TIMER1); 
37F6:  BCF    F9D.0
....................    enable_interrupts(INT_RDA); 
37F8:  BSF    F9D.5
....................    enable_interrupts(GLOBAL); 
37FA:  MOVLW  C0
37FC:  IORWF  FF2,F
....................     
.................... 	while(TRUE){ 
.................... 		restart_wdt(); 
37FE:  CLRWDT
.................... 		//keyboard debouncing 
.................... 		if(TMR0IF){ 
3800:  BTFSS  FF2.2
3802:  BRA    382E
.................... 			TMR0IF=0; 
3804:  BCF    FF2.2
.................... 			KeyScan(); 
3806:  GOTO   2EA6
.................... 			if (sym_count>300){ 
380A:  MOVLB  3
380C:  MOVF   x4F,W
380E:  SUBLW  00
3810:  BC    3826
3812:  XORLW  FF
3814:  BNZ   381C
3816:  MOVF   x4E,W
3818:  SUBLW  2C
381A:  BC    3826
.................... 				sym_count=0; 
381C:  CLRF   x4F
381E:  CLRF   x4E
.................... 				output_toggle(STAT); 
3820:  BCF    F94.1
3822:  BTG    F8B.1
.................... 				} 
.................... 				else sym_count++; 
3824:  BRA    382C
3826:  INCF   x4E,F
3828:  BTFSC  FD8.2
382A:  INCF   x4F,F
382C:  MOVLB  0
.................... 			 
.................... //			output_toggle(STAT); 
.................... 			//screen processing 
.................... 			 
.................... 			/*SetAddrLCD(TEXTBASE);  
.................... 			SetCommandLCD(0xb0);	//set automode start 
.................... 			symbol=rand(); 
.................... 			for (sym_count=0; sym_count<320; sym_count++){ 
.................... 			SetDataLCD(symbol++); 
.................... 				}; 
.................... 			SetCommandLCD(0xb2);	//stop automode						*/ 
.................... 			};		 
.................... 	} 
382E:  BRA    37FE
.................... } 
3830:  BRA    3830

Configuration Fuses:
   Word  1: C800   IESO FCMEN INTRC_IO
   Word  2: 0019   NOBROWNOUT WDT1 NOWDT BORV20 NOPUT
   Word  3: 0700   PBADEN CCP2C1 LPT1OSC NOMCLR
   Word  4: 0000   NOSTVREN DEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB

   Some fuses have been forced to be compatible with the ICD debugger.

ROM data:
F00000: 00 4B 02 00 3C 00 44 00 
